package net.weavemc.block;

import lombok.Getter;
import net.weavemc.item.Material;
import net.weavemc.utils.Key;
import net.weavemc.utils.Producer;

import java.util.HashMap;
import java.util.List;

/**
 * This class was auto generated
 **/
public final class BlockType {
    @Getter
    private final short legacyId;
    @Getter
    private final String displayName;
    @Getter
    private final String name;
    @Getter
    private final Key resourceKey;
    @Getter
    private final float hardness;
    @Getter
    private final double resistance;
    @Getter
    private final short minStateId;
    @Getter
    private final short maxStateId;
    @Getter
    private final HashMap<Integer, Boolean> harvestable;
    @Getter
    private final short defaultState;
    @Getter
    private final boolean diggable;
    @Getter
    private final boolean transparent;
    @Getter
    private final int filteringLight;
    @Getter
    private final int emittingLight;
    @Getter
    private final Material baseMaterial;
    @Getter
    private final List<Key> tags;

    public BlockType(int legacyId,
                     String displayName,
                     String name,
                     double hardness,
                     double resistance,
                     int minStateId,
                     int maxStateId,
                     Producer<HashMap<Integer, Boolean>> harvestableProducer,
                     int defaultState,
                     boolean diggable,
                     boolean transparent,
                     int filteringLight,
                     int emittingLight,
                     Material baseMaterial,
                     List<Key> tags) {
        this.legacyId = (short) legacyId;
        this.displayName = displayName;
        this.name = name;
        this.resourceKey = Key.minecraft(name);
        this.hardness = (float) hardness;
        this.resistance = resistance;

        this.minStateId = (short) minStateId;
        this.maxStateId = (short) maxStateId;
        this.harvestable = harvestableProducer.produce();
        this.defaultState = (short) defaultState;
        this.diggable = diggable;
        this.transparent = transparent;
        this.filteringLight = filteringLight;
        this.emittingLight = emittingLight;
        this.baseMaterial = baseMaterial;
        this.tags = tags;
    }

    public static final BlockType AIR = new BlockType(0, "Air", "air", 0, 0, 0, 0, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 0, true, true, 0, 0, Material.find("air"), List.of(Key.minecraft("default")));
    public static final BlockType STONE = new BlockType(1, "Stone", "stone", 1.5, 6, 1, 1, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 1, true, false, 15, 0, Material.find("stone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType GRANITE = new BlockType(2, "Granite", "granite", 1.5, 6, 2, 2, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 2, true, false, 15, 0, Material.find("granite"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_GRANITE = new BlockType(3, "Polished Granite", "polished_granite", 1.5, 6, 3, 3, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 3, true, false, 15, 0, Material.find("polished_granite"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DIORITE = new BlockType(4, "Diorite", "diorite", 1.5, 6, 4, 4, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 4, true, false, 15, 0, Material.find("diorite"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_DIORITE = new BlockType(5, "Polished Diorite", "polished_diorite", 1.5, 6, 5, 5, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 5, true, false, 15, 0, Material.find("polished_diorite"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType ANDESITE = new BlockType(6, "Andesite", "andesite", 1.5, 6, 6, 6, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 6, true, false, 15, 0, Material.find("andesite"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_ANDESITE = new BlockType(7, "Polished Andesite", "polished_andesite", 1.5, 6, 7, 7, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7, true, false, 15, 0, Material.find("polished_andesite"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType GRASS_BLOCK = new BlockType(8, "Grass Block", "grass_block", 0.6, 0.6, 8, 9, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9, true, false, 15, 0, Material.find("grass_block"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType DIRT = new BlockType(9, "Dirt", "dirt", 0.5, 0.5, 10, 10, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 10, true, false, 15, 0, Material.find("dirt"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType COARSE_DIRT = new BlockType(10, "Coarse Dirt", "coarse_dirt", 0.5, 0.5, 11, 11, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 11, true, false, 15, 0, Material.find("coarse_dirt"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType PODZOL = new BlockType(11, "Podzol", "podzol", 0.5, 0.5, 12, 13, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 13, true, false, 15, 0, Material.find("podzol"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType COBBLESTONE = new BlockType(12, "Cobblestone", "cobblestone", 2, 6, 14, 14, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 14, true, false, 15, 0, Material.find("cobblestone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType OAK_PLANKS = new BlockType(13, "Oak Planks", "oak_planks", 2, 3, 15, 15, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15, true, false, 15, 0, Material.find("oak_planks"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType SPRUCE_PLANKS = new BlockType(14, "Spruce Planks", "spruce_planks", 2, 3, 16, 16, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 16, true, false, 15, 0, Material.find("spruce_planks"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BIRCH_PLANKS = new BlockType(15, "Birch Planks", "birch_planks", 2, 3, 17, 17, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17, true, false, 15, 0, Material.find("birch_planks"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType JUNGLE_PLANKS = new BlockType(16, "Jungle Planks", "jungle_planks", 2, 3, 18, 18, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 18, true, false, 15, 0, Material.find("jungle_planks"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType ACACIA_PLANKS = new BlockType(17, "Acacia Planks", "acacia_planks", 2, 3, 19, 19, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 19, true, false, 15, 0, Material.find("acacia_planks"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType DARK_OAK_PLANKS = new BlockType(18, "Dark Oak Planks", "dark_oak_planks", 2, 3, 20, 20, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 20, true, false, 15, 0, Material.find("dark_oak_planks"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType OAK_SAPLING = new BlockType(19, "Oak Sapling", "oak_sapling", 0, 0, 21, 22, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 21, true, true, 0, 0, Material.find("oak_sapling"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType SPRUCE_SAPLING = new BlockType(20, "Spruce Sapling", "spruce_sapling", 0, 0, 23, 24, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 23, true, true, 0, 0, Material.find("spruce_sapling"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType BIRCH_SAPLING = new BlockType(21, "Birch Sapling", "birch_sapling", 0, 0, 25, 26, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 25, true, true, 0, 0, Material.find("birch_sapling"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType JUNGLE_SAPLING = new BlockType(22, "Jungle Sapling", "jungle_sapling", 0, 0, 27, 28, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 27, true, true, 0, 0, Material.find("jungle_sapling"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType ACACIA_SAPLING = new BlockType(23, "Acacia Sapling", "acacia_sapling", 0, 0, 29, 30, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 29, true, true, 0, 0, Material.find("acacia_sapling"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType DARK_OAK_SAPLING = new BlockType(24, "Dark Oak Sapling", "dark_oak_sapling", 0, 0, 31, 32, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 31, true, true, 0, 0, Material.find("dark_oak_sapling"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType BEDROCK = new BlockType(25, "Bedrock", "bedrock", 0, 3600000, 33, 33, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 33, false, false, 15, 0, Material.find("bedrock"), List.of(Key.minecraft("default")));
    public static final BlockType WATER = new BlockType(26, "Water", "water", 100, 100, 34, 49, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 34, false, true, 1, 0, Material.find("water"), List.of(Key.minecraft("default")));
    public static final BlockType LAVA = new BlockType(27, "Lava", "lava", 100, 100, 50, 65, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 50, false, true, 1, 15, Material.find("lava"), List.of(Key.minecraft("default")));
    public static final BlockType SAND = new BlockType(28, "Sand", "sand", 0.5, 0.5, 66, 66, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 66, true, false, 15, 0, Material.find("sand"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType RED_SAND = new BlockType(29, "Red Sand", "red_sand", 0.5, 0.5, 67, 67, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 67, true, false, 15, 0, Material.find("red_sand"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType GRAVEL = new BlockType(30, "Gravel", "gravel", 0.6, 0.6, 68, 68, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 68, true, false, 15, 0, Material.find("gravel"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType GOLD_ORE = new BlockType(31, "Gold Ore", "gold_ore", 3, 3, 69, 69, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 69, true, false, 15, 0, Material.find("gold_ore"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEEPSLATE_GOLD_ORE = new BlockType(32, "Deepslate Gold Ore", "deepslate_gold_ore", 4.5, 3, 70, 70, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 70, true, false, 15, 0, Material.find("deepslate_gold_ore"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType IRON_ORE = new BlockType(33, "Iron Ore", "iron_ore", 3, 3, 71, 71, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 71, true, false, 15, 0, Material.find("iron_ore"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEEPSLATE_IRON_ORE = new BlockType(34, "Deepslate Iron Ore", "deepslate_iron_ore", 4.5, 3, 72, 72, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 72, true, false, 15, 0, Material.find("deepslate_iron_ore"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType COAL_ORE = new BlockType(35, "Coal Ore", "coal_ore", 3, 3, 73, 73, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 73, true, false, 15, 0, Material.find("coal_ore"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEEPSLATE_COAL_ORE = new BlockType(36, "Deepslate Coal Ore", "deepslate_coal_ore", 4.5, 3, 74, 74, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 74, true, false, 15, 0, Material.find("deepslate_coal_ore"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType NETHER_GOLD_ORE = new BlockType(37, "Nether Gold Ore", "nether_gold_ore", 3, 3, 75, 75, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 75, true, false, 15, 0, Material.find("nether_gold_ore"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType OAK_LOG = new BlockType(38, "Oak Log", "oak_log", 2, 2, 76, 78, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 77, true, false, 15, 0, Material.find("oak_log"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType SPRUCE_LOG = new BlockType(39, "Spruce Log", "spruce_log", 2, 2, 79, 81, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 80, true, false, 15, 0, Material.find("spruce_log"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BIRCH_LOG = new BlockType(40, "Birch Log", "birch_log", 2, 2, 82, 84, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 83, true, false, 15, 0, Material.find("birch_log"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType JUNGLE_LOG = new BlockType(41, "Jungle Log", "jungle_log", 2, 2, 85, 87, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 86, true, false, 15, 0, Material.find("jungle_log"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType ACACIA_LOG = new BlockType(42, "Acacia Log", "acacia_log", 2, 2, 88, 90, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 89, true, false, 15, 0, Material.find("acacia_log"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType DARK_OAK_LOG = new BlockType(43, "Dark Oak Log", "dark_oak_log", 2, 2, 91, 93, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 92, true, false, 15, 0, Material.find("dark_oak_log"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType STRIPPED_SPRUCE_LOG = new BlockType(44, "Stripped Spruce Log", "stripped_spruce_log", 2, 2, 94, 96, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 95, true, false, 15, 0, Material.find("stripped_spruce_log"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType STRIPPED_BIRCH_LOG = new BlockType(45, "Stripped Birch Log", "stripped_birch_log", 2, 2, 97, 99, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 98, true, false, 15, 0, Material.find("stripped_birch_log"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType STRIPPED_JUNGLE_LOG = new BlockType(46, "Stripped Jungle Log", "stripped_jungle_log", 2, 2, 100, 102, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 101, true, false, 15, 0, Material.find("stripped_jungle_log"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType STRIPPED_ACACIA_LOG = new BlockType(47, "Stripped Acacia Log", "stripped_acacia_log", 2, 2, 103, 105, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 104, true, false, 15, 0, Material.find("stripped_acacia_log"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType STRIPPED_DARK_OAK_LOG = new BlockType(48, "Stripped Dark Oak Log", "stripped_dark_oak_log", 2, 2, 106, 108, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 107, true, false, 15, 0, Material.find("stripped_dark_oak_log"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType STRIPPED_OAK_LOG = new BlockType(49, "Stripped Oak Log", "stripped_oak_log", 2, 2, 109, 111, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 110, true, false, 15, 0, Material.find("stripped_oak_log"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType OAK_WOOD = new BlockType(50, "Oak Wood", "oak_wood", 2, 2, 112, 114, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 113, true, false, 15, 0, Material.find("oak_wood"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType SPRUCE_WOOD = new BlockType(51, "Spruce Wood", "spruce_wood", 2, 2, 115, 117, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 116, true, false, 15, 0, Material.find("spruce_wood"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BIRCH_WOOD = new BlockType(52, "Birch Wood", "birch_wood", 2, 2, 118, 120, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 119, true, false, 15, 0, Material.find("birch_wood"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType JUNGLE_WOOD = new BlockType(53, "Jungle Wood", "jungle_wood", 2, 2, 121, 123, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 122, true, false, 15, 0, Material.find("jungle_wood"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType ACACIA_WOOD = new BlockType(54, "Acacia Wood", "acacia_wood", 2, 2, 124, 126, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 125, true, false, 15, 0, Material.find("acacia_wood"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType DARK_OAK_WOOD = new BlockType(55, "Dark Oak Wood", "dark_oak_wood", 2, 2, 127, 129, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 128, true, false, 15, 0, Material.find("dark_oak_wood"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType STRIPPED_OAK_WOOD = new BlockType(56, "Stripped Oak Wood", "stripped_oak_wood", 2, 2, 130, 132, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 131, true, false, 15, 0, Material.find("stripped_oak_wood"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType STRIPPED_SPRUCE_WOOD = new BlockType(57, "Stripped Spruce Wood", "stripped_spruce_wood", 2, 2, 133, 135, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 134, true, false, 15, 0, Material.find("stripped_spruce_wood"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType STRIPPED_BIRCH_WOOD = new BlockType(58, "Stripped Birch Wood", "stripped_birch_wood", 2, 2, 136, 138, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 137, true, false, 15, 0, Material.find("stripped_birch_wood"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType STRIPPED_JUNGLE_WOOD = new BlockType(59, "Stripped Jungle Wood", "stripped_jungle_wood", 2, 2, 139, 141, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 140, true, false, 15, 0, Material.find("stripped_jungle_wood"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType STRIPPED_ACACIA_WOOD = new BlockType(60, "Stripped Acacia Wood", "stripped_acacia_wood", 2, 2, 142, 144, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 143, true, false, 15, 0, Material.find("stripped_acacia_wood"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType STRIPPED_DARK_OAK_WOOD = new BlockType(61, "Stripped Dark Oak Wood", "stripped_dark_oak_wood", 2, 2, 145, 147, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 146, true, false, 15, 0, Material.find("stripped_dark_oak_wood"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType OAK_LEAVES = new BlockType(62, "Oak Leaves", "oak_leaves", 0.2, 0.2, 148, 161, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 161, true, true, 1, 0, Material.find("oak_leaves"), List.of(Key.minecraft("leaves"), Key.minecraft("mineable/hoe")));
    public static final BlockType SPRUCE_LEAVES = new BlockType(63, "Spruce Leaves", "spruce_leaves", 0.2, 0.2, 162, 175, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 175, true, true, 1, 0, Material.find("spruce_leaves"), List.of(Key.minecraft("leaves"), Key.minecraft("mineable/hoe")));
    public static final BlockType BIRCH_LEAVES = new BlockType(64, "Birch Leaves", "birch_leaves", 0.2, 0.2, 176, 189, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 189, true, true, 1, 0, Material.find("birch_leaves"), List.of(Key.minecraft("leaves"), Key.minecraft("mineable/hoe")));
    public static final BlockType JUNGLE_LEAVES = new BlockType(65, "Jungle Leaves", "jungle_leaves", 0.2, 0.2, 190, 203, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 203, true, true, 1, 0, Material.find("jungle_leaves"), List.of(Key.minecraft("leaves"), Key.minecraft("mineable/hoe")));
    public static final BlockType ACACIA_LEAVES = new BlockType(66, "Acacia Leaves", "acacia_leaves", 0.2, 0.2, 204, 217, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 217, true, true, 1, 0, Material.find("acacia_leaves"), List.of(Key.minecraft("leaves"), Key.minecraft("mineable/hoe")));
    public static final BlockType DARK_OAK_LEAVES = new BlockType(67, "Dark Oak Leaves", "dark_oak_leaves", 0.2, 0.2, 218, 231, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 231, true, true, 1, 0, Material.find("dark_oak_leaves"), List.of(Key.minecraft("leaves"), Key.minecraft("mineable/hoe")));
    public static final BlockType AZALEA_LEAVES = new BlockType(68, "Azalea Leaves", "azalea_leaves", 0.2, 0.2, 232, 245, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 245, true, true, 1, 0, Material.find("azalea_leaves"), List.of(Key.minecraft("leaves"), Key.minecraft("mineable/hoe")));
    public static final BlockType FLOWERING_AZALEA_LEAVES = new BlockType(69, "Flowering Azalea Leaves", "flowering_azalea_leaves", 0.2, 0.2, 246, 259, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 259, true, true, 1, 0, Material.find("flowering_azalea_leaves"), List.of(Key.minecraft("leaves"), Key.minecraft("mineable/axe"), Key.minecraft("mineable/hoe")));
    public static final BlockType SPONGE = new BlockType(70, "Sponge", "sponge", 0.6, 0.6, 260, 260, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 260, true, false, 15, 0, Material.find("sponge"), List.of(Key.minecraft("mineable/hoe")));
    public static final BlockType WET_SPONGE = new BlockType(71, "Wet Sponge", "wet_sponge", 0.6, 0.6, 261, 261, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 261, true, false, 15, 0, Material.find("wet_sponge"), List.of(Key.minecraft("mineable/hoe")));
    public static final BlockType GLASS = new BlockType(72, "Glass", "glass", 0.3, 0.3, 262, 262, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 262, true, true, 0, 0, Material.find("glass"), List.of(Key.minecraft("default")));
    public static final BlockType LAPIS_ORE = new BlockType(73, "Lapis Lazuli Ore", "lapis_ore", 3, 3, 263, 263, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 263, true, false, 15, 0, Material.find("lapis_ore"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEEPSLATE_LAPIS_ORE = new BlockType(74, "Deepslate Lapis Lazuli Ore", "deepslate_lapis_ore", 4.5, 3, 264, 264, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 264, true, false, 15, 0, Material.find("deepslate_lapis_ore"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType LAPIS_BLOCK = new BlockType(75, "Block of Lapis Lazuli", "lapis_block", 3, 3, 265, 265, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 265, true, false, 15, 0, Material.find("lapis_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DISPENSER = new BlockType(76, "Dispenser", "dispenser", 3.5, 3.5, 266, 277, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 267, true, false, 15, 0, Material.find("dispenser"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SANDSTONE = new BlockType(77, "Sandstone", "sandstone", 0.8, 0.8, 278, 278, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 278, true, false, 15, 0, Material.find("sandstone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CHISELED_SANDSTONE = new BlockType(78, "Chiseled Sandstone", "chiseled_sandstone", 0.8, 0.8, 279, 279, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 279, true, false, 15, 0, Material.find("chiseled_sandstone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CUT_SANDSTONE = new BlockType(79, "Cut Sandstone", "cut_sandstone", 0.8, 0.8, 280, 280, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 280, true, false, 15, 0, Material.find("cut_sandstone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType NOTE_BLOCK = new BlockType(80, "Note Block", "note_block", 0.8, 0.8, 281, 1080, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 282, true, false, 15, 0, Material.find("note_block"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType WHITE_BED = new BlockType(81, "White Bed", "white_bed", 0.2, 0.2, 1081, 1096, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1084, true, true, 0, 0, Material.find("white_bed"), List.of(Key.minecraft("default")));
    public static final BlockType ORANGE_BED = new BlockType(82, "Orange Bed", "orange_bed", 0.2, 0.2, 1097, 1112, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1100, true, true, 0, 0, Material.find("orange_bed"), List.of(Key.minecraft("default")));
    public static final BlockType MAGENTA_BED = new BlockType(83, "Magenta Bed", "magenta_bed", 0.2, 0.2, 1113, 1128, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1116, true, true, 0, 0, Material.find("magenta_bed"), List.of(Key.minecraft("default")));
    public static final BlockType LIGHT_BLUE_BED = new BlockType(84, "Light Blue Bed", "light_blue_bed", 0.2, 0.2, 1129, 1144, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1132, true, true, 0, 0, Material.find("light_blue_bed"), List.of(Key.minecraft("default")));
    public static final BlockType YELLOW_BED = new BlockType(85, "Yellow Bed", "yellow_bed", 0.2, 0.2, 1145, 1160, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1148, true, true, 0, 0, Material.find("yellow_bed"), List.of(Key.minecraft("default")));
    public static final BlockType LIME_BED = new BlockType(86, "Lime Bed", "lime_bed", 0.2, 0.2, 1161, 1176, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1164, true, true, 0, 0, Material.find("lime_bed"), List.of(Key.minecraft("default")));
    public static final BlockType PINK_BED = new BlockType(87, "Pink Bed", "pink_bed", 0.2, 0.2, 1177, 1192, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1180, true, true, 0, 0, Material.find("pink_bed"), List.of(Key.minecraft("default")));
    public static final BlockType GRAY_BED = new BlockType(88, "Gray Bed", "gray_bed", 0.2, 0.2, 1193, 1208, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1196, true, true, 0, 0, Material.find("gray_bed"), List.of(Key.minecraft("default")));
    public static final BlockType LIGHT_GRAY_BED = new BlockType(89, "Light Gray Bed", "light_gray_bed", 0.2, 0.2, 1209, 1224, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1212, true, true, 0, 0, Material.find("light_gray_bed"), List.of(Key.minecraft("default")));
    public static final BlockType CYAN_BED = new BlockType(90, "Cyan Bed", "cyan_bed", 0.2, 0.2, 1225, 1240, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1228, true, true, 0, 0, Material.find("cyan_bed"), List.of(Key.minecraft("default")));
    public static final BlockType PURPLE_BED = new BlockType(91, "Purple Bed", "purple_bed", 0.2, 0.2, 1241, 1256, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1244, true, true, 0, 0, Material.find("purple_bed"), List.of(Key.minecraft("default")));
    public static final BlockType BLUE_BED = new BlockType(92, "Blue Bed", "blue_bed", 0.2, 0.2, 1257, 1272, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1260, true, true, 0, 0, Material.find("blue_bed"), List.of(Key.minecraft("default")));
    public static final BlockType BROWN_BED = new BlockType(93, "Brown Bed", "brown_bed", 0.2, 0.2, 1273, 1288, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1276, true, true, 0, 0, Material.find("brown_bed"), List.of(Key.minecraft("default")));
    public static final BlockType GREEN_BED = new BlockType(94, "Green Bed", "green_bed", 0.2, 0.2, 1289, 1304, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1292, true, true, 0, 0, Material.find("green_bed"), List.of(Key.minecraft("default")));
    public static final BlockType RED_BED = new BlockType(95, "Red Bed", "red_bed", 0.2, 0.2, 1305, 1320, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1308, true, true, 0, 0, Material.find("red_bed"), List.of(Key.minecraft("default")));
    public static final BlockType BLACK_BED = new BlockType(96, "Black Bed", "black_bed", 0.2, 0.2, 1321, 1336, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1324, true, true, 0, 0, Material.find("black_bed"), List.of(Key.minecraft("default")));
    public static final BlockType POWERED_RAIL = new BlockType(97, "Powered Rail", "powered_rail", 0.7, 0.7, 1337, 1360, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1350, true, true, 0, 0, Material.find("powered_rail"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DETECTOR_RAIL = new BlockType(98, "Detector Rail", "detector_rail", 0.7, 0.7, 1361, 1384, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1374, true, true, 0, 0, Material.find("detector_rail"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType STICKY_PISTON = new BlockType(99, "Sticky Piston", "sticky_piston", 1.5, 1.5, 1385, 1396, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1391, true, false, 15, 0, Material.find("sticky_piston"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType COBWEB = new BlockType(100, "Cobweb", "cobweb", 4, 4, 1397, 1397, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(699, true); map.put(704, true); map.put(709, true); map.put(714, true); map.put(719, true); map.put(724, true); map.put(848, true); return map; }, 1397, true, true, 1, 0, Material.find("cobweb"), List.of(Key.minecraft("coweb")));
    public static final BlockType GRASS = new BlockType(101, "Grass", "grass", 0, 0, 1398, 1398, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1398, true, true, 0, 0, Material.find("grass"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType FERN = new BlockType(102, "Fern", "fern", 0, 0, 1399, 1399, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1399, true, true, 0, 0, Material.find("fern"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType DEAD_BUSH = new BlockType(103, "Dead Bush", "dead_bush", 0, 0, 1400, 1400, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1400, true, true, 0, 0, Material.find("dead_bush"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType SEAGRASS = new BlockType(104, "Seagrass", "seagrass", 0, 0, 1401, 1401, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1401, true, true, 1, 0, Material.find("seagrass"), List.of(Key.minecraft("default")));
    public static final BlockType TALL_SEAGRASS = new BlockType(105, "Tall Seagrass", "tall_seagrass", 0, 0, 1402, 1403, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1403, true, true, 1, 0, Material.find("tall_seagrass"), List.of(Key.minecraft("default")));
    public static final BlockType PISTON = new BlockType(106, "Piston", "piston", 1.5, 1.5, 1404, 1415, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1410, true, false, 15, 0, Material.find("piston"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PISTON_HEAD = new BlockType(107, "Piston Head", "piston_head", 1.5, 1.5, 1416, 1439, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1418, true, false, 0, 0, Material.find("piston_head"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WHITE_WOOL = new BlockType(108, "White Wool", "white_wool", 0.8, 0.8, 1440, 1440, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1440, true, false, 15, 0, Material.find("white_wool"), List.of(Key.minecraft("wool")));
    public static final BlockType ORANGE_WOOL = new BlockType(109, "Orange Wool", "orange_wool", 0.8, 0.8, 1441, 1441, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1441, true, false, 15, 0, Material.find("orange_wool"), List.of(Key.minecraft("wool")));
    public static final BlockType MAGENTA_WOOL = new BlockType(110, "Magenta Wool", "magenta_wool", 0.8, 0.8, 1442, 1442, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1442, true, false, 15, 0, Material.find("magenta_wool"), List.of(Key.minecraft("wool")));
    public static final BlockType LIGHT_BLUE_WOOL = new BlockType(111, "Light Blue Wool", "light_blue_wool", 0.8, 0.8, 1443, 1443, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1443, true, false, 15, 0, Material.find("light_blue_wool"), List.of(Key.minecraft("wool")));
    public static final BlockType YELLOW_WOOL = new BlockType(112, "Yellow Wool", "yellow_wool", 0.8, 0.8, 1444, 1444, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1444, true, false, 15, 0, Material.find("yellow_wool"), List.of(Key.minecraft("wool")));
    public static final BlockType LIME_WOOL = new BlockType(113, "Lime Wool", "lime_wool", 0.8, 0.8, 1445, 1445, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1445, true, false, 15, 0, Material.find("lime_wool"), List.of(Key.minecraft("wool")));
    public static final BlockType PINK_WOOL = new BlockType(114, "Pink Wool", "pink_wool", 0.8, 0.8, 1446, 1446, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1446, true, false, 15, 0, Material.find("pink_wool"), List.of(Key.minecraft("wool")));
    public static final BlockType GRAY_WOOL = new BlockType(115, "Gray Wool", "gray_wool", 0.8, 0.8, 1447, 1447, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1447, true, false, 15, 0, Material.find("gray_wool"), List.of(Key.minecraft("wool")));
    public static final BlockType LIGHT_GRAY_WOOL = new BlockType(116, "Light Gray Wool", "light_gray_wool", 0.8, 0.8, 1448, 1448, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1448, true, false, 15, 0, Material.find("light_gray_wool"), List.of(Key.minecraft("wool")));
    public static final BlockType CYAN_WOOL = new BlockType(117, "Cyan Wool", "cyan_wool", 0.8, 0.8, 1449, 1449, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1449, true, false, 15, 0, Material.find("cyan_wool"), List.of(Key.minecraft("wool")));
    public static final BlockType PURPLE_WOOL = new BlockType(118, "Purple Wool", "purple_wool", 0.8, 0.8, 1450, 1450, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1450, true, false, 15, 0, Material.find("purple_wool"), List.of(Key.minecraft("wool")));
    public static final BlockType BLUE_WOOL = new BlockType(119, "Blue Wool", "blue_wool", 0.8, 0.8, 1451, 1451, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1451, true, false, 15, 0, Material.find("blue_wool"), List.of(Key.minecraft("wool")));
    public static final BlockType BROWN_WOOL = new BlockType(120, "Brown Wool", "brown_wool", 0.8, 0.8, 1452, 1452, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1452, true, false, 15, 0, Material.find("brown_wool"), List.of(Key.minecraft("wool")));
    public static final BlockType GREEN_WOOL = new BlockType(121, "Green Wool", "green_wool", 0.8, 0.8, 1453, 1453, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1453, true, false, 15, 0, Material.find("green_wool"), List.of(Key.minecraft("wool")));
    public static final BlockType RED_WOOL = new BlockType(122, "Red Wool", "red_wool", 0.8, 0.8, 1454, 1454, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1454, true, false, 15, 0, Material.find("red_wool"), List.of(Key.minecraft("wool")));
    public static final BlockType BLACK_WOOL = new BlockType(123, "Black Wool", "black_wool", 0.8, 0.8, 1455, 1455, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1455, true, false, 15, 0, Material.find("black_wool"), List.of(Key.minecraft("wool")));
    public static final BlockType MOVING_PISTON = new BlockType(124, "Moving Piston", "moving_piston", 0, -1, 1456, 1467, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1456, false, true, 0, 0, Material.find("moving_piston"), List.of(Key.minecraft("default")));
    public static final BlockType DANDELION = new BlockType(125, "Dandelion", "dandelion", 0, 0, 1468, 1468, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1468, true, true, 0, 0, Material.find("dandelion"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType POPPY = new BlockType(126, "Poppy", "poppy", 0, 0, 1469, 1469, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1469, true, true, 0, 0, Material.find("poppy"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType BLUE_ORCHID = new BlockType(127, "Blue Orchid", "blue_orchid", 0, 0, 1470, 1470, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1470, true, true, 0, 0, Material.find("blue_orchid"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType ALLIUM = new BlockType(128, "Allium", "allium", 0, 0, 1471, 1471, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1471, true, true, 0, 0, Material.find("allium"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType AZURE_BLUET = new BlockType(129, "Azure Bluet", "azure_bluet", 0, 0, 1472, 1472, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1472, true, true, 0, 0, Material.find("azure_bluet"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType RED_TULIP = new BlockType(130, "Red Tulip", "red_tulip", 0, 0, 1473, 1473, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1473, true, true, 0, 0, Material.find("red_tulip"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType ORANGE_TULIP = new BlockType(131, "Orange Tulip", "orange_tulip", 0, 0, 1474, 1474, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1474, true, true, 0, 0, Material.find("orange_tulip"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType WHITE_TULIP = new BlockType(132, "White Tulip", "white_tulip", 0, 0, 1475, 1475, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1475, true, true, 0, 0, Material.find("white_tulip"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType PINK_TULIP = new BlockType(133, "Pink Tulip", "pink_tulip", 0, 0, 1476, 1476, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1476, true, true, 0, 0, Material.find("pink_tulip"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType OXEYE_DAISY = new BlockType(134, "Oxeye Daisy", "oxeye_daisy", 0, 0, 1477, 1477, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1477, true, true, 0, 0, Material.find("oxeye_daisy"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType CORNFLOWER = new BlockType(135, "Cornflower", "cornflower", 0, 0, 1478, 1478, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1478, true, true, 0, 0, Material.find("cornflower"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType WITHER_ROSE = new BlockType(136, "Wither Rose", "wither_rose", 0, 0, 1479, 1479, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1479, true, true, 0, 0, Material.find("wither_rose"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType LILY_OF_THE_VALLEY = new BlockType(137, "Lily of the Valley", "lily_of_the_valley", 0, 0, 1480, 1480, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1480, true, true, 0, 0, Material.find("lily_of_the_valley"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType BROWN_MUSHROOM = new BlockType(138, "Brown Mushroom", "brown_mushroom", 0, 0, 1481, 1481, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1481, true, true, 0, 1, Material.find("brown_mushroom"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType RED_MUSHROOM = new BlockType(139, "Red Mushroom", "red_mushroom", 0, 0, 1482, 1482, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1482, true, true, 0, 0, Material.find("red_mushroom"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType GOLD_BLOCK = new BlockType(140, "Block of Gold", "gold_block", 3, 6, 1483, 1483, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 1483, true, false, 15, 0, Material.find("gold_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType IRON_BLOCK = new BlockType(141, "Block of Iron", "iron_block", 5, 6, 1484, 1484, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 1484, true, false, 15, 0, Material.find("iron_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BRICKS = new BlockType(142, "Bricks", "bricks", 2, 6, 1485, 1485, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 1485, true, false, 15, 0, Material.find("bricks"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType TNT = new BlockType(143, "TNT", "tnt", 0, 0, 1486, 1487, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1487, true, false, 15, 0, Material.find("tnt"), List.of(Key.minecraft("default")));
    public static final BlockType BOOKSHELF = new BlockType(144, "Bookshelf", "bookshelf", 1.5, 1.5, 1488, 1488, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1488, true, false, 15, 0, Material.find("bookshelf"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType MOSSY_COBBLESTONE = new BlockType(145, "Mossy Cobblestone", "mossy_cobblestone", 2, 6, 1489, 1489, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 1489, true, false, 15, 0, Material.find("mossy_cobblestone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType OBSIDIAN = new BlockType(146, "Obsidian", "obsidian", 50, 1200, 1490, 1490, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(721, true); map.put(726, true); return map; }, 1490, true, false, 15, 0, Material.find("obsidian"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType TORCH = new BlockType(147, "Torch", "torch", 0, 0, 1491, 1491, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1491, true, true, 0, 14, Material.find("torch"), List.of(Key.minecraft("default")));
    public static final BlockType WALL_TORCH = new BlockType(148, "Wall Torch", "wall_torch", 0, 0, 1492, 1495, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1492, true, true, 0, 14, Material.find("wall_torch"), List.of(Key.minecraft("default")));
    public static final BlockType FIRE = new BlockType(149, "Fire", "fire", 0, 0, 1496, 2007, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 1527, true, true, 0, 15, Material.find("fire"), List.of(Key.minecraft("default")));
    public static final BlockType SOUL_FIRE = new BlockType(150, "Soul Fire", "soul_fire", 0, 0, 2008, 2008, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 2008, true, true, 0, 10, Material.find("soul_fire"), List.of(Key.minecraft("default")));
    public static final BlockType SPAWNER = new BlockType(151, "Spawner", "spawner", 5, 5, 2009, 2009, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 2009, true, true, 1, 0, Material.find("spawner"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType OAK_STAIRS = new BlockType(152, "Oak Stairs", "oak_stairs", 2, 3, 2010, 2089, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 2021, true, false, 0, 0, Material.find("oak_stairs"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType CHEST = new BlockType(153, "Chest", "chest", 2.5, 2.5, 2090, 2113, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 2091, true, false, 0, 0, Material.find("chest"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType REDSTONE_WIRE = new BlockType(154, "Redstone Wire", "redstone_wire", 0, 0, 2114, 3409, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3274, true, true, 0, 0, Material.find("redstone_wire"), List.of(Key.minecraft("default")));
    public static final BlockType DIAMOND_ORE = new BlockType(155, "Diamond Ore", "diamond_ore", 3, 3, 3410, 3410, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 3410, true, false, 15, 0, Material.find("diamond_ore"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEEPSLATE_DIAMOND_ORE = new BlockType(156, "Deepslate Diamond Ore", "deepslate_diamond_ore", 4.5, 3, 3411, 3411, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 3411, true, false, 15, 0, Material.find("deepslate_diamond_ore"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DIAMOND_BLOCK = new BlockType(157, "Block of Diamond", "diamond_block", 5, 6, 3412, 3412, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 3412, true, false, 15, 0, Material.find("diamond_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CRAFTING_TABLE = new BlockType(158, "Crafting Table", "crafting_table", 2.5, 2.5, 3413, 3413, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3413, true, false, 15, 0, Material.find("crafting_table"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType WHEAT = new BlockType(159, "Wheat Crops", "wheat", 0, 0, 3414, 3421, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3414, true, true, 0, 0, Material.find("wheat"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType FARMLAND = new BlockType(160, "Farmland", "farmland", 0.6, 0.6, 3422, 3429, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3422, true, false, 0, 0, Material.find("farmland"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType FURNACE = new BlockType(161, "Furnace", "furnace", 3.5, 3.5, 3430, 3437, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 3431, true, false, 15, 0, Material.find("furnace"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType OAK_SIGN = new BlockType(162, "Oak Sign", "oak_sign", 1, 1, 3438, 3469, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3439, true, true, 0, 0, Material.find("oak_sign"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType SPRUCE_SIGN = new BlockType(163, "Spruce Sign", "spruce_sign", 1, 1, 3470, 3501, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3471, true, true, 0, 0, Material.find("spruce_sign"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BIRCH_SIGN = new BlockType(164, "Birch Sign", "birch_sign", 1, 1, 3502, 3533, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3503, true, true, 0, 0, Material.find("birch_sign"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType ACACIA_SIGN = new BlockType(165, "Acacia Sign", "acacia_sign", 1, 1, 3534, 3565, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3535, true, true, 0, 0, Material.find("acacia_sign"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType JUNGLE_SIGN = new BlockType(166, "Jungle Sign", "jungle_sign", 1, 1, 3566, 3597, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3567, true, true, 0, 0, Material.find("jungle_sign"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType DARK_OAK_SIGN = new BlockType(167, "Dark Oak Sign", "dark_oak_sign", 1, 1, 3598, 3629, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3599, true, true, 0, 0, Material.find("dark_oak_sign"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType OAK_DOOR = new BlockType(168, "Oak Door", "oak_door", 3, 3, 3630, 3693, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3641, true, true, 0, 0, Material.find("oak_door"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType LADDER = new BlockType(169, "Ladder", "ladder", 0.4, 0.4, 3694, 3701, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3695, true, true, 0, 0, Material.find("ladder"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType RAIL = new BlockType(170, "Rail", "rail", 0.7, 0.7, 3702, 3721, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3703, true, true, 0, 0, Material.find("rail"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType COBBLESTONE_STAIRS = new BlockType(171, "Cobblestone Stairs", "cobblestone_stairs", 2, 6, 3722, 3801, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 3733, true, false, 0, 0, Material.find("cobblestone_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType OAK_WALL_SIGN = new BlockType(172, "Oak Wall Sign", "oak_wall_sign", 1, 1, 3802, 3809, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3803, true, true, 0, 0, Material.find("oak_wall_sign"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType SPRUCE_WALL_SIGN = new BlockType(173, "Spruce Wall Sign", "spruce_wall_sign", 1, 1, 3810, 3817, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3811, true, true, 0, 0, Material.find("spruce_wall_sign"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BIRCH_WALL_SIGN = new BlockType(174, "Birch Wall Sign", "birch_wall_sign", 1, 1, 3818, 3825, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3819, true, true, 0, 0, Material.find("birch_wall_sign"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType ACACIA_WALL_SIGN = new BlockType(175, "Acacia Wall Sign", "acacia_wall_sign", 1, 1, 3826, 3833, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3827, true, true, 0, 0, Material.find("acacia_wall_sign"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType JUNGLE_WALL_SIGN = new BlockType(176, "Jungle Wall Sign", "jungle_wall_sign", 1, 1, 3834, 3841, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3835, true, true, 0, 0, Material.find("jungle_wall_sign"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType DARK_OAK_WALL_SIGN = new BlockType(177, "Dark Oak Wall Sign", "dark_oak_wall_sign", 1, 1, 3842, 3849, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3843, true, true, 0, 0, Material.find("dark_oak_wall_sign"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType LEVER = new BlockType(178, "Lever", "lever", 0.5, 0.5, 3850, 3873, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3859, true, true, 0, 0, Material.find("lever"), List.of(Key.minecraft("default")));
    public static final BlockType STONE_PRESSURE_PLATE = new BlockType(179, "Stone Pressure Plate", "stone_pressure_plate", 0.5, 0.5, 3874, 3875, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 3875, true, true, 0, 0, Material.find("stone_pressure_plate"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType IRON_DOOR = new BlockType(180, "Iron Door", "iron_door", 5, 5, 3876, 3939, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 3887, true, true, 0, 0, Material.find("iron_door"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType OAK_PRESSURE_PLATE = new BlockType(181, "Oak Pressure Plate", "oak_pressure_plate", 0.5, 0.5, 3940, 3941, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3941, true, true, 0, 0, Material.find("oak_pressure_plate"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType SPRUCE_PRESSURE_PLATE = new BlockType(182, "Spruce Pressure Plate", "spruce_pressure_plate", 0.5, 0.5, 3942, 3943, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3943, true, true, 0, 0, Material.find("spruce_pressure_plate"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BIRCH_PRESSURE_PLATE = new BlockType(183, "Birch Pressure Plate", "birch_pressure_plate", 0.5, 0.5, 3944, 3945, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3945, true, true, 0, 0, Material.find("birch_pressure_plate"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType JUNGLE_PRESSURE_PLATE = new BlockType(184, "Jungle Pressure Plate", "jungle_pressure_plate", 0.5, 0.5, 3946, 3947, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3947, true, true, 0, 0, Material.find("jungle_pressure_plate"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType ACACIA_PRESSURE_PLATE = new BlockType(185, "Acacia Pressure Plate", "acacia_pressure_plate", 0.5, 0.5, 3948, 3949, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3949, true, true, 0, 0, Material.find("acacia_pressure_plate"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType DARK_OAK_PRESSURE_PLATE = new BlockType(186, "Dark Oak Pressure Plate", "dark_oak_pressure_plate", 0.5, 0.5, 3950, 3951, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3951, true, true, 0, 0, Material.find("dark_oak_pressure_plate"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType REDSTONE_ORE = new BlockType(187, "Redstone Ore", "redstone_ore", 3, 3, 3952, 3953, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 3953, true, false, 15, 0, Material.find("redstone_ore"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEEPSLATE_REDSTONE_ORE = new BlockType(188, "Deepslate Redstone Ore", "deepslate_redstone_ore", 4.5, 3, 3954, 3955, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 3955, true, false, 15, 0, Material.find("deepslate_redstone_ore"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType REDSTONE_TORCH = new BlockType(189, "Redstone Torch", "redstone_torch", 0, 0, 3956, 3957, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3956, true, true, 0, 7, Material.find("redstone_torch"), List.of(Key.minecraft("default")));
    public static final BlockType REDSTONE_WALL_TORCH = new BlockType(190, "Redstone Wall Torch", "redstone_wall_torch", 0, 0, 3958, 3965, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3958, true, true, 0, 7, Material.find("redstone_wall_torch"), List.of(Key.minecraft("default")));
    public static final BlockType STONE_BUTTON = new BlockType(191, "Stone Button", "stone_button", 0.5, 0.5, 3966, 3989, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3975, true, true, 0, 0, Material.find("stone_button"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SNOW = new BlockType(192, "Snow", "snow", 0.1, 0.1, 3990, 3997, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(700, true); map.put(705, true); map.put(710, true); map.put(715, true); map.put(720, true); map.put(725, true); return map; }, 3990, true, false, 0, 0, Material.find("snow"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType ICE = new BlockType(193, "Ice", "ice", 0.5, 0.5, 3998, 3998, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 3998, true, true, 1, 0, Material.find("ice"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SNOW_BLOCK = new BlockType(194, "Snow Block", "snow_block", 0.2, 0.2, 3999, 3999, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(700, true); map.put(705, true); map.put(710, true); map.put(715, true); map.put(720, true); map.put(725, true); return map; }, 3999, true, false, 15, 0, Material.find("snow_block"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType CACTUS = new BlockType(195, "Cactus", "cactus", 0.4, 0.4, 4000, 4015, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4000, true, false, 0, 0, Material.find("cactus"), List.of(Key.minecraft("default")));
    public static final BlockType CLAY = new BlockType(196, "Clay", "clay", 0.6, 0.6, 4016, 4016, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4016, true, false, 15, 0, Material.find("clay"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType SUGAR_CANE = new BlockType(197, "Sugar Cane", "sugar_cane", 0, 0, 4017, 4032, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4017, true, true, 0, 0, Material.find("sugar_cane"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType JUKEBOX = new BlockType(198, "Jukebox", "jukebox", 2, 6, 4033, 4034, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4034, true, false, 15, 0, Material.find("jukebox"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType OAK_FENCE = new BlockType(199, "Oak Fence", "oak_fence", 2, 3, 4035, 4066, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4066, true, false, 0, 0, Material.find("oak_fence"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType PUMPKIN = new BlockType(200, "Pumpkin", "pumpkin", 1, 1, 4067, 4067, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4067, true, false, 15, 0, Material.find("pumpkin"), List.of(Key.minecraft("gourd"), Key.minecraft("mineable/axe")));
    public static final BlockType NETHERRACK = new BlockType(201, "Netherrack", "netherrack", 0.4, 0.4, 4068, 4068, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 4068, true, false, 15, 0, Material.find("netherrack"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SOUL_SAND = new BlockType(202, "Soul Sand", "soul_sand", 0.5, 0.5, 4069, 4069, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4069, true, false, 15, 0, Material.find("soul_sand"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType SOUL_SOIL = new BlockType(203, "Soul Soil", "soul_soil", 0.5, 0.5, 4070, 4070, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4070, true, false, 15, 0, Material.find("soul_soil"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType BASALT = new BlockType(204, "Basalt", "basalt", 1.25, 4.2, 4071, 4073, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 4072, true, false, 15, 0, Material.find("basalt"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_BASALT = new BlockType(205, "Polished Basalt", "polished_basalt", 1.25, 4.2, 4074, 4076, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 4075, true, false, 15, 0, Material.find("polished_basalt"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SOUL_TORCH = new BlockType(206, "Soul Torch", "soul_torch", 0, 0, 4077, 4077, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4077, true, true, 0, 10, Material.find("soul_torch"), List.of(Key.minecraft("default")));
    public static final BlockType SOUL_WALL_TORCH = new BlockType(207, "Soul Wall Torch", "soul_wall_torch", 0, 0, 4078, 4081, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4078, true, true, 0, 10, Material.find("soul_wall_torch"), List.of(Key.minecraft("default")));
    public static final BlockType GLOWSTONE = new BlockType(208, "Glowstone", "glowstone", 0.3, 0.3, 4082, 4082, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4082, true, false, 15, 15, Material.find("glowstone"), List.of(Key.minecraft("default")));
    public static final BlockType NETHER_PORTAL = new BlockType(209, "Nether Portal", "nether_portal", 0, -1, 4083, 4084, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4083, false, true, 0, 11, Material.find("nether_portal"), List.of(Key.minecraft("default")));
    public static final BlockType CARVED_PUMPKIN = new BlockType(210, "Carved Pumpkin", "carved_pumpkin", 1, 1, 4085, 4088, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4085, true, false, 15, 0, Material.find("carved_pumpkin"), List.of(Key.minecraft("gourd"), Key.minecraft("mineable/axe")));
    public static final BlockType JACK_O_LANTERN = new BlockType(211, "Jack o'Lantern", "jack_o_lantern", 1, 1, 4089, 4092, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4089, true, false, 15, 15, Material.find("jack_o_lantern"), List.of(Key.minecraft("gourd"), Key.minecraft("mineable/axe")));
    public static final BlockType CAKE = new BlockType(212, "Cake", "cake", 0.5, 0.5, 4093, 4099, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4093, true, false, 0, 0, Material.find("cake"), List.of(Key.minecraft("default")));
    public static final BlockType REPEATER = new BlockType(213, "Redstone Repeater", "repeater", 0, 0, 4100, 4163, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4103, true, false, 0, 0, Material.find("repeater"), List.of(Key.minecraft("default")));
    public static final BlockType WHITE_STAINED_GLASS = new BlockType(214, "White Stained Glass", "white_stained_glass", 0.3, 0.3, 4164, 4164, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4164, true, true, 0, 0, Material.find("white_stained_glass"), List.of(Key.minecraft("default")));
    public static final BlockType ORANGE_STAINED_GLASS = new BlockType(215, "Orange Stained Glass", "orange_stained_glass", 0.3, 0.3, 4165, 4165, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4165, true, true, 0, 0, Material.find("orange_stained_glass"), List.of(Key.minecraft("default")));
    public static final BlockType MAGENTA_STAINED_GLASS = new BlockType(216, "Magenta Stained Glass", "magenta_stained_glass", 0.3, 0.3, 4166, 4166, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4166, true, true, 0, 0, Material.find("magenta_stained_glass"), List.of(Key.minecraft("default")));
    public static final BlockType LIGHT_BLUE_STAINED_GLASS = new BlockType(217, "Light Blue Stained Glass", "light_blue_stained_glass", 0.3, 0.3, 4167, 4167, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4167, true, true, 0, 0, Material.find("light_blue_stained_glass"), List.of(Key.minecraft("default")));
    public static final BlockType YELLOW_STAINED_GLASS = new BlockType(218, "Yellow Stained Glass", "yellow_stained_glass", 0.3, 0.3, 4168, 4168, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4168, true, true, 0, 0, Material.find("yellow_stained_glass"), List.of(Key.minecraft("default")));
    public static final BlockType LIME_STAINED_GLASS = new BlockType(219, "Lime Stained Glass", "lime_stained_glass", 0.3, 0.3, 4169, 4169, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4169, true, true, 0, 0, Material.find("lime_stained_glass"), List.of(Key.minecraft("default")));
    public static final BlockType PINK_STAINED_GLASS = new BlockType(220, "Pink Stained Glass", "pink_stained_glass", 0.3, 0.3, 4170, 4170, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4170, true, true, 0, 0, Material.find("pink_stained_glass"), List.of(Key.minecraft("default")));
    public static final BlockType GRAY_STAINED_GLASS = new BlockType(221, "Gray Stained Glass", "gray_stained_glass", 0.3, 0.3, 4171, 4171, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4171, true, true, 0, 0, Material.find("gray_stained_glass"), List.of(Key.minecraft("default")));
    public static final BlockType LIGHT_GRAY_STAINED_GLASS = new BlockType(222, "Light Gray Stained Glass", "light_gray_stained_glass", 0.3, 0.3, 4172, 4172, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4172, true, true, 0, 0, Material.find("light_gray_stained_glass"), List.of(Key.minecraft("default")));
    public static final BlockType CYAN_STAINED_GLASS = new BlockType(223, "Cyan Stained Glass", "cyan_stained_glass", 0.3, 0.3, 4173, 4173, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4173, true, true, 0, 0, Material.find("cyan_stained_glass"), List.of(Key.minecraft("default")));
    public static final BlockType PURPLE_STAINED_GLASS = new BlockType(224, "Purple Stained Glass", "purple_stained_glass", 0.3, 0.3, 4174, 4174, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4174, true, true, 0, 0, Material.find("purple_stained_glass"), List.of(Key.minecraft("default")));
    public static final BlockType BLUE_STAINED_GLASS = new BlockType(225, "Blue Stained Glass", "blue_stained_glass", 0.3, 0.3, 4175, 4175, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4175, true, true, 0, 0, Material.find("blue_stained_glass"), List.of(Key.minecraft("default")));
    public static final BlockType BROWN_STAINED_GLASS = new BlockType(226, "Brown Stained Glass", "brown_stained_glass", 0.3, 0.3, 4176, 4176, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4176, true, true, 0, 0, Material.find("brown_stained_glass"), List.of(Key.minecraft("default")));
    public static final BlockType GREEN_STAINED_GLASS = new BlockType(227, "Green Stained Glass", "green_stained_glass", 0.3, 0.3, 4177, 4177, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4177, true, true, 0, 0, Material.find("green_stained_glass"), List.of(Key.minecraft("default")));
    public static final BlockType RED_STAINED_GLASS = new BlockType(228, "Red Stained Glass", "red_stained_glass", 0.3, 0.3, 4178, 4178, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4178, true, true, 0, 0, Material.find("red_stained_glass"), List.of(Key.minecraft("default")));
    public static final BlockType BLACK_STAINED_GLASS = new BlockType(229, "Black Stained Glass", "black_stained_glass", 0.3, 0.3, 4179, 4179, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4179, true, true, 0, 0, Material.find("black_stained_glass"), List.of(Key.minecraft("default")));
    public static final BlockType OAK_TRAPDOOR = new BlockType(230, "Oak Trapdoor", "oak_trapdoor", 3, 3, 4180, 4243, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4195, true, true, 0, 0, Material.find("oak_trapdoor"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType SPRUCE_TRAPDOOR = new BlockType(231, "Spruce Trapdoor", "spruce_trapdoor", 3, 3, 4244, 4307, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4259, true, true, 0, 0, Material.find("spruce_trapdoor"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BIRCH_TRAPDOOR = new BlockType(232, "Birch Trapdoor", "birch_trapdoor", 3, 3, 4308, 4371, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4323, true, true, 0, 0, Material.find("birch_trapdoor"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType JUNGLE_TRAPDOOR = new BlockType(233, "Jungle Trapdoor", "jungle_trapdoor", 3, 3, 4372, 4435, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4387, true, true, 0, 0, Material.find("jungle_trapdoor"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType ACACIA_TRAPDOOR = new BlockType(234, "Acacia Trapdoor", "acacia_trapdoor", 3, 3, 4436, 4499, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4451, true, true, 0, 0, Material.find("acacia_trapdoor"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType DARK_OAK_TRAPDOOR = new BlockType(235, "Dark Oak Trapdoor", "dark_oak_trapdoor", 3, 3, 4500, 4563, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4515, true, true, 0, 0, Material.find("dark_oak_trapdoor"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType STONE_BRICKS = new BlockType(236, "Stone Bricks", "stone_bricks", 1.5, 6, 4564, 4564, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 4564, true, false, 15, 0, Material.find("stone_bricks"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType MOSSY_STONE_BRICKS = new BlockType(237, "Mossy Stone Bricks", "mossy_stone_bricks", 1.5, 6, 4565, 4565, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 4565, true, false, 15, 0, Material.find("mossy_stone_bricks"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CRACKED_STONE_BRICKS = new BlockType(238, "Cracked Stone Bricks", "cracked_stone_bricks", 1.5, 6, 4566, 4566, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 4566, true, false, 15, 0, Material.find("cracked_stone_bricks"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CHISELED_STONE_BRICKS = new BlockType(239, "Chiseled Stone Bricks", "chiseled_stone_bricks", 1.5, 6, 4567, 4567, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 4567, true, false, 15, 0, Material.find("chiseled_stone_bricks"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType INFESTED_STONE = new BlockType(240, "Infested Stone", "infested_stone", 0, 0, 4568, 4568, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4568, true, false, 15, 0, Material.find("infested_stone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType INFESTED_COBBLESTONE = new BlockType(241, "Infested Cobblestone", "infested_cobblestone", 0, 0, 4569, 4569, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4569, true, false, 15, 0, Material.find("infested_cobblestone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType INFESTED_STONE_BRICKS = new BlockType(242, "Infested Stone Bricks", "infested_stone_bricks", 0, 0, 4570, 4570, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4570, true, false, 15, 0, Material.find("infested_stone_bricks"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType INFESTED_MOSSY_STONE_BRICKS = new BlockType(243, "Infested Mossy Stone Bricks", "infested_mossy_stone_bricks", 0, 0, 4571, 4571, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4571, true, false, 15, 0, Material.find("infested_mossy_stone_bricks"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType INFESTED_CRACKED_STONE_BRICKS = new BlockType(244, "Infested Cracked Stone Bricks", "infested_cracked_stone_bricks", 0, 0, 4572, 4572, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4572, true, false, 15, 0, Material.find("infested_cracked_stone_bricks"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType INFESTED_CHISELED_STONE_BRICKS = new BlockType(245, "Infested Chiseled Stone Bricks", "infested_chiseled_stone_bricks", 0, 0, 4573, 4573, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4573, true, false, 15, 0, Material.find("infested_chiseled_stone_bricks"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BROWN_MUSHROOM_BLOCK = new BlockType(246, "Brown Mushroom Block", "brown_mushroom_block", 0.2, 0.2, 4574, 4637, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4574, true, false, 15, 0, Material.find("brown_mushroom_block"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType RED_MUSHROOM_BLOCK = new BlockType(247, "Red Mushroom Block", "red_mushroom_block", 0.2, 0.2, 4638, 4701, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4638, true, false, 15, 0, Material.find("red_mushroom_block"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType MUSHROOM_STEM = new BlockType(248, "Mushroom Stem", "mushroom_stem", 0.2, 0.2, 4702, 4765, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4702, true, false, 15, 0, Material.find("mushroom_stem"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType IRON_BARS = new BlockType(249, "Iron Bars", "iron_bars", 5, 6, 4766, 4797, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 4797, true, true, 0, 0, Material.find("iron_bars"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CHAIN = new BlockType(250, "Chain", "chain", 5, 6, 4798, 4803, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 4801, true, true, 0, 0, Material.find("chain"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType GLASS_PANE = new BlockType(251, "Glass Pane", "glass_pane", 0.3, 0.3, 4804, 4835, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4835, true, true, 0, 0, Material.find("glass_pane"), List.of(Key.minecraft("default")));
    public static final BlockType MELON = new BlockType(252, "Melon", "melon", 1, 1, 4836, 4836, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4836, true, false, 15, 0, Material.find("melon"), List.of(Key.minecraft("gourd"), Key.minecraft("mineable/axe")));
    public static final BlockType ATTACHED_PUMPKIN_STEM = new BlockType(253, "Attached Pumpkin Stem", "attached_pumpkin_stem", 0, 0, 4837, 4840, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4837, true, true, 0, 0, Material.find("attached_pumpkin_stem"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType ATTACHED_MELON_STEM = new BlockType(254, "Attached Melon Stem", "attached_melon_stem", 0, 0, 4841, 4844, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4841, true, true, 0, 0, Material.find("attached_melon_stem"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType PUMPKIN_STEM = new BlockType(255, "Pumpkin Stem", "pumpkin_stem", 0, 0, 4845, 4852, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4845, true, true, 0, 0, Material.find("pumpkin_stem"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType MELON_STEM = new BlockType(256, "Melon Stem", "melon_stem", 0, 0, 4853, 4860, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4853, true, true, 0, 0, Material.find("melon_stem"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType VINE = new BlockType(257, "Vines", "vine", 0.2, 0.2, 4861, 4892, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 4892, true, true, 0, 0, Material.find("vine"), List.of(Key.minecraft("vine_or_glow_lichen"), Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType GLOW_LICHEN = new BlockType(258, "Glow Lichen", "glow_lichen", 0.2, 0.2, 4893, 5020, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 5020, true, true, 0, 0, Material.find("glow_lichen"), List.of(Key.minecraft("vine_or_glow_lichen"), Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType OAK_FENCE_GATE = new BlockType(259, "Oak Fence Gate", "oak_fence_gate", 2, 3, 5021, 5052, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 5028, true, false, 0, 0, Material.find("oak_fence_gate"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BRICK_STAIRS = new BlockType(260, "Brick Stairs", "brick_stairs", 2, 6, 5053, 5132, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 5064, true, false, 0, 0, Material.find("brick_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType STONE_BRICK_STAIRS = new BlockType(261, "Stone Brick Stairs", "stone_brick_stairs", 1.5, 6, 5133, 5212, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 5144, true, false, 0, 0, Material.find("stone_brick_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType MYCELIUM = new BlockType(262, "Mycelium", "mycelium", 0.6, 0.6, 5213, 5214, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 5214, true, false, 15, 0, Material.find("mycelium"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType LILY_PAD = new BlockType(263, "Lily Pad", "lily_pad", 0, 0, 5215, 5215, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 5215, true, true, 0, 0, Material.find("lily_pad"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType NETHER_BRICKS = new BlockType(264, "Nether Bricks", "nether_bricks", 2, 6, 5216, 5216, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 5216, true, false, 15, 0, Material.find("nether_bricks"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType NETHER_BRICK_FENCE = new BlockType(265, "Nether Brick Fence", "nether_brick_fence", 2, 6, 5217, 5248, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 5248, true, false, 0, 0, Material.find("nether_brick_fence"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType NETHER_BRICK_STAIRS = new BlockType(266, "Nether Brick Stairs", "nether_brick_stairs", 2, 6, 5249, 5328, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 5260, true, false, 0, 0, Material.find("nether_brick_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType NETHER_WART = new BlockType(267, "Nether Wart", "nether_wart", 0, 0, 5329, 5332, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 5329, true, true, 0, 0, Material.find("nether_wart"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType ENCHANTING_TABLE = new BlockType(268, "Enchanting Table", "enchanting_table", 5, 1200, 5333, 5333, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 5333, true, false, 0, 0, Material.find("enchanting_table"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BREWING_STAND = new BlockType(269, "Brewing Stand", "brewing_stand", 0.5, 0.5, 5334, 5341, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 5341, true, true, 0, 1, Material.find("brewing_stand"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CAULDRON = new BlockType(270, "Cauldron", "cauldron", 2, 2, 5342, 5342, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 5342, true, true, 0, 0, Material.find("cauldron"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WATER_CAULDRON = new BlockType(271, "Water Cauldron", "water_cauldron", 0, 0, 5343, 5345, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 5343, true, true, 0, 0, Material.find("water_cauldron"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType LAVA_CAULDRON = new BlockType(272, "Lava Cauldron", "lava_cauldron", 0, 0, 5346, 5346, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 5346, true, true, 0, 15, Material.find("lava_cauldron"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POWDER_SNOW_CAULDRON = new BlockType(273, "Powder Snow Cauldron", "powder_snow_cauldron", 0, 0, 5347, 5349, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 5347, true, true, 0, 0, Material.find("powder_snow_cauldron"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType END_PORTAL = new BlockType(274, "End Portal", "end_portal", 0, 3600000, 5350, 5350, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 5350, false, true, 0, 15, Material.find("end_portal"), List.of(Key.minecraft("default")));
    public static final BlockType END_PORTAL_FRAME = new BlockType(275, "End Portal Frame", "end_portal_frame", 0, 3600000, 5351, 5358, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 5355, false, false, 0, 1, Material.find("end_portal_frame"), List.of(Key.minecraft("default")));
    public static final BlockType END_STONE = new BlockType(276, "End Stone", "end_stone", 3, 9, 5359, 5359, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 5359, true, false, 15, 0, Material.find("end_stone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DRAGON_EGG = new BlockType(277, "Dragon Egg", "dragon_egg", 3, 9, 5360, 5360, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 5360, true, true, 0, 1, Material.find("dragon_egg"), List.of(Key.minecraft("default")));
    public static final BlockType REDSTONE_LAMP = new BlockType(278, "Redstone Lamp", "redstone_lamp", 0.3, 0.3, 5361, 5362, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 5362, true, false, 15, 0, Material.find("redstone_lamp"), List.of(Key.minecraft("default")));
    public static final BlockType COCOA = new BlockType(279, "Cocoa", "cocoa", 0.2, 3, 5363, 5374, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 5363, true, true, 0, 0, Material.find("cocoa"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType SANDSTONE_STAIRS = new BlockType(280, "Sandstone Stairs", "sandstone_stairs", 0.8, 0.8, 5375, 5454, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 5386, true, false, 0, 0, Material.find("sandstone_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType EMERALD_ORE = new BlockType(281, "Emerald Ore", "emerald_ore", 3, 3, 5455, 5455, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 5455, true, false, 15, 0, Material.find("emerald_ore"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEEPSLATE_EMERALD_ORE = new BlockType(282, "Deepslate Emerald Ore", "deepslate_emerald_ore", 4.5, 3, 5456, 5456, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 5456, true, false, 15, 0, Material.find("deepslate_emerald_ore"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType ENDER_CHEST = new BlockType(283, "Ender Chest", "ender_chest", 22.5, 600, 5457, 5464, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 5458, true, false, 0, 7, Material.find("ender_chest"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType TRIPWIRE_HOOK = new BlockType(284, "Tripwire Hook", "tripwire_hook", 0, 0, 5465, 5480, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 5474, true, true, 0, 0, Material.find("tripwire_hook"), List.of(Key.minecraft("default")));
    public static final BlockType TRIPWIRE = new BlockType(285, "Tripwire", "tripwire", 0, 0, 5481, 5608, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 5608, true, true, 0, 0, Material.find("tripwire"), List.of(Key.minecraft("default")));
    public static final BlockType EMERALD_BLOCK = new BlockType(286, "Block of Emerald", "emerald_block", 5, 6, 5609, 5609, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 5609, true, false, 15, 0, Material.find("emerald_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SPRUCE_STAIRS = new BlockType(287, "Spruce Stairs", "spruce_stairs", 2, 3, 5610, 5689, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 5621, true, false, 0, 0, Material.find("spruce_stairs"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BIRCH_STAIRS = new BlockType(288, "Birch Stairs", "birch_stairs", 2, 3, 5690, 5769, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 5701, true, false, 0, 0, Material.find("birch_stairs"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType JUNGLE_STAIRS = new BlockType(289, "Jungle Stairs", "jungle_stairs", 2, 3, 5770, 5849, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 5781, true, false, 0, 0, Material.find("jungle_stairs"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType COMMAND_BLOCK = new BlockType(290, "Command Block", "command_block", 0, 3600000, 5850, 5861, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 5856, false, false, 15, 0, Material.find("command_block"), List.of(Key.minecraft("default")));
    public static final BlockType BEACON = new BlockType(291, "Beacon", "beacon", 3, 3, 5862, 5862, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 5862, true, true, 1, 15, Material.find("beacon"), List.of(Key.minecraft("default")));
    public static final BlockType COBBLESTONE_WALL = new BlockType(292, "Cobblestone Wall", "cobblestone_wall", 2, 6, 5863, 6186, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 5866, true, false, 0, 0, Material.find("cobblestone_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType MOSSY_COBBLESTONE_WALL = new BlockType(293, "Mossy Cobblestone Wall", "mossy_cobblestone_wall", 2, 6, 6187, 6510, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 6190, true, false, 0, 0, Material.find("mossy_cobblestone_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType FLOWER_POT = new BlockType(294, "Flower Pot", "flower_pot", 0, 0, 6511, 6511, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6511, true, true, 0, 0, Material.find("flower_pot"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_OAK_SAPLING = new BlockType(295, "Potted Oak Sapling", "potted_oak_sapling", 0, 0, 6512, 6512, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6512, true, true, 0, 0, Material.find("potted_oak_sapling"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_SPRUCE_SAPLING = new BlockType(296, "Potted Spruce Sapling", "potted_spruce_sapling", 0, 0, 6513, 6513, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6513, true, true, 0, 0, Material.find("potted_spruce_sapling"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_BIRCH_SAPLING = new BlockType(297, "Potted Birch Sapling", "potted_birch_sapling", 0, 0, 6514, 6514, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6514, true, true, 0, 0, Material.find("potted_birch_sapling"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_JUNGLE_SAPLING = new BlockType(298, "Potted Jungle Sapling", "potted_jungle_sapling", 0, 0, 6515, 6515, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6515, true, true, 0, 0, Material.find("potted_jungle_sapling"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_ACACIA_SAPLING = new BlockType(299, "Potted Acacia Sapling", "potted_acacia_sapling", 0, 0, 6516, 6516, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6516, true, true, 0, 0, Material.find("potted_acacia_sapling"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_DARK_OAK_SAPLING = new BlockType(300, "Potted Dark Oak Sapling", "potted_dark_oak_sapling", 0, 0, 6517, 6517, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6517, true, true, 0, 0, Material.find("potted_dark_oak_sapling"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_FERN = new BlockType(301, "Potted Fern", "potted_fern", 0, 0, 6518, 6518, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6518, true, true, 0, 0, Material.find("potted_fern"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_DANDELION = new BlockType(302, "Potted Dandelion", "potted_dandelion", 0, 0, 6519, 6519, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6519, true, true, 0, 0, Material.find("potted_dandelion"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_POPPY = new BlockType(303, "Potted Poppy", "potted_poppy", 0, 0, 6520, 6520, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6520, true, true, 0, 0, Material.find("potted_poppy"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_BLUE_ORCHID = new BlockType(304, "Potted Blue Orchid", "potted_blue_orchid", 0, 0, 6521, 6521, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6521, true, true, 0, 0, Material.find("potted_blue_orchid"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_ALLIUM = new BlockType(305, "Potted Allium", "potted_allium", 0, 0, 6522, 6522, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6522, true, true, 0, 0, Material.find("potted_allium"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_AZURE_BLUET = new BlockType(306, "Potted Azure Bluet", "potted_azure_bluet", 0, 0, 6523, 6523, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6523, true, true, 0, 0, Material.find("potted_azure_bluet"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_RED_TULIP = new BlockType(307, "Potted Red Tulip", "potted_red_tulip", 0, 0, 6524, 6524, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6524, true, true, 0, 0, Material.find("potted_red_tulip"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_ORANGE_TULIP = new BlockType(308, "Potted Orange Tulip", "potted_orange_tulip", 0, 0, 6525, 6525, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6525, true, true, 0, 0, Material.find("potted_orange_tulip"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_WHITE_TULIP = new BlockType(309, "Potted White Tulip", "potted_white_tulip", 0, 0, 6526, 6526, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6526, true, true, 0, 0, Material.find("potted_white_tulip"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_PINK_TULIP = new BlockType(310, "Potted Pink Tulip", "potted_pink_tulip", 0, 0, 6527, 6527, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6527, true, true, 0, 0, Material.find("potted_pink_tulip"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_OXEYE_DAISY = new BlockType(311, "Potted Oxeye Daisy", "potted_oxeye_daisy", 0, 0, 6528, 6528, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6528, true, true, 0, 0, Material.find("potted_oxeye_daisy"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_CORNFLOWER = new BlockType(312, "Potted Cornflower", "potted_cornflower", 0, 0, 6529, 6529, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6529, true, true, 0, 0, Material.find("potted_cornflower"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_LILY_OF_THE_VALLEY = new BlockType(313, "Potted Lily of the Valley", "potted_lily_of_the_valley", 0, 0, 6530, 6530, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6530, true, true, 0, 0, Material.find("potted_lily_of_the_valley"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_WITHER_ROSE = new BlockType(314, "Potted Wither Rose", "potted_wither_rose", 0, 0, 6531, 6531, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6531, true, true, 0, 0, Material.find("potted_wither_rose"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_RED_MUSHROOM = new BlockType(315, "Potted Red Mushroom", "potted_red_mushroom", 0, 0, 6532, 6532, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6532, true, true, 0, 0, Material.find("potted_red_mushroom"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_BROWN_MUSHROOM = new BlockType(316, "Potted Brown Mushroom", "potted_brown_mushroom", 0, 0, 6533, 6533, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6533, true, true, 0, 0, Material.find("potted_brown_mushroom"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_DEAD_BUSH = new BlockType(317, "Potted Dead Bush", "potted_dead_bush", 0, 0, 6534, 6534, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6534, true, true, 0, 0, Material.find("potted_dead_bush"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_CACTUS = new BlockType(318, "Potted Cactus", "potted_cactus", 0, 0, 6535, 6535, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6535, true, true, 0, 0, Material.find("potted_cactus"), List.of(Key.minecraft("default")));
    public static final BlockType CARROTS = new BlockType(319, "Carrots", "carrots", 0, 0, 6536, 6543, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6536, true, true, 0, 0, Material.find("carrots"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType POTATOES = new BlockType(320, "Potatoes", "potatoes", 0, 0, 6544, 6551, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6544, true, true, 0, 0, Material.find("potatoes"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType OAK_BUTTON = new BlockType(321, "Oak Button", "oak_button", 0.5, 0.5, 6552, 6575, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6561, true, true, 0, 0, Material.find("oak_button"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType SPRUCE_BUTTON = new BlockType(322, "Spruce Button", "spruce_button", 0.5, 0.5, 6576, 6599, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6585, true, true, 0, 0, Material.find("spruce_button"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BIRCH_BUTTON = new BlockType(323, "Birch Button", "birch_button", 0.5, 0.5, 6600, 6623, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6609, true, true, 0, 0, Material.find("birch_button"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType JUNGLE_BUTTON = new BlockType(324, "Jungle Button", "jungle_button", 0.5, 0.5, 6624, 6647, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6633, true, true, 0, 0, Material.find("jungle_button"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType ACACIA_BUTTON = new BlockType(325, "Acacia Button", "acacia_button", 0.5, 0.5, 6648, 6671, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6657, true, true, 0, 0, Material.find("acacia_button"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType DARK_OAK_BUTTON = new BlockType(326, "Dark Oak Button", "dark_oak_button", 0.5, 0.5, 6672, 6695, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6681, true, true, 0, 0, Material.find("dark_oak_button"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType SKELETON_SKULL = new BlockType(327, "Skeleton Skull", "skeleton_skull", 1, 1, 6696, 6711, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6696, true, false, 0, 0, Material.find("skeleton_skull"), List.of(Key.minecraft("default")));
    public static final BlockType SKELETON_WALL_SKULL = new BlockType(328, "Skeleton Wall Skull", "skeleton_wall_skull", 1, 1, 6712, 6715, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6712, true, false, 0, 0, Material.find("skeleton_wall_skull"), List.of(Key.minecraft("default")));
    public static final BlockType WITHER_SKELETON_SKULL = new BlockType(329, "Wither Skeleton Skull", "wither_skeleton_skull", 1, 1, 6716, 6731, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6716, true, false, 0, 0, Material.find("wither_skeleton_skull"), List.of(Key.minecraft("default")));
    public static final BlockType WITHER_SKELETON_WALL_SKULL = new BlockType(330, "Wither Skeleton Wall Skull", "wither_skeleton_wall_skull", 1, 1, 6732, 6735, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6732, true, false, 0, 0, Material.find("wither_skeleton_wall_skull"), List.of(Key.minecraft("default")));
    public static final BlockType ZOMBIE_HEAD = new BlockType(331, "Zombie Head", "zombie_head", 1, 1, 6736, 6751, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6736, true, false, 0, 0, Material.find("zombie_head"), List.of(Key.minecraft("default")));
    public static final BlockType ZOMBIE_WALL_HEAD = new BlockType(332, "Zombie Wall Head", "zombie_wall_head", 1, 1, 6752, 6755, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6752, true, false, 0, 0, Material.find("zombie_wall_head"), List.of(Key.minecraft("default")));
    public static final BlockType PLAYER_HEAD = new BlockType(333, "Player Head", "player_head", 1, 1, 6756, 6771, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6756, true, false, 0, 0, Material.find("player_head"), List.of(Key.minecraft("default")));
    public static final BlockType PLAYER_WALL_HEAD = new BlockType(334, "Player Wall Head", "player_wall_head", 1, 1, 6772, 6775, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6772, true, false, 0, 0, Material.find("player_wall_head"), List.of(Key.minecraft("default")));
    public static final BlockType CREEPER_HEAD = new BlockType(335, "Creeper Head", "creeper_head", 1, 1, 6776, 6791, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6776, true, false, 0, 0, Material.find("creeper_head"), List.of(Key.minecraft("default")));
    public static final BlockType CREEPER_WALL_HEAD = new BlockType(336, "Creeper Wall Head", "creeper_wall_head", 1, 1, 6792, 6795, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6792, true, false, 0, 0, Material.find("creeper_wall_head"), List.of(Key.minecraft("default")));
    public static final BlockType DRAGON_HEAD = new BlockType(337, "Dragon Head", "dragon_head", 1, 1, 6796, 6811, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6796, true, false, 0, 0, Material.find("dragon_head"), List.of(Key.minecraft("default")));
    public static final BlockType DRAGON_WALL_HEAD = new BlockType(338, "Dragon Wall Head", "dragon_wall_head", 1, 1, 6812, 6815, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6812, true, false, 0, 0, Material.find("dragon_wall_head"), List.of(Key.minecraft("default")));
    public static final BlockType ANVIL = new BlockType(339, "Anvil", "anvil", 5, 1200, 6816, 6819, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 6816, true, false, 0, 0, Material.find("anvil"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CHIPPED_ANVIL = new BlockType(340, "Chipped Anvil", "chipped_anvil", 5, 1200, 6820, 6823, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 6820, true, false, 0, 0, Material.find("chipped_anvil"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DAMAGED_ANVIL = new BlockType(341, "Damaged Anvil", "damaged_anvil", 5, 1200, 6824, 6827, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 6824, true, false, 0, 0, Material.find("damaged_anvil"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType TRAPPED_CHEST = new BlockType(342, "Trapped Chest", "trapped_chest", 2.5, 2.5, 6828, 6851, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6829, true, false, 0, 0, Material.find("trapped_chest"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType LIGHT_WEIGHTED_PRESSURE_PLATE = new BlockType(343, "Light Weighted Pressure Plate", "light_weighted_pressure_plate", 0.5, 0.5, 6852, 6867, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 6852, true, true, 0, 0, Material.find("light_weighted_pressure_plate"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType HEAVY_WEIGHTED_PRESSURE_PLATE = new BlockType(344, "Heavy Weighted Pressure Plate", "heavy_weighted_pressure_plate", 0.5, 0.5, 6868, 6883, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 6868, true, true, 0, 0, Material.find("heavy_weighted_pressure_plate"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType COMPARATOR = new BlockType(345, "Redstone Comparator", "comparator", 0, 0, 6884, 6899, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6885, true, false, 0, 0, Material.find("comparator"), List.of(Key.minecraft("default")));
    public static final BlockType DAYLIGHT_DETECTOR = new BlockType(346, "Daylight Detector", "daylight_detector", 0.2, 0.2, 6900, 6931, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 6916, true, false, 0, 0, Material.find("daylight_detector"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType REDSTONE_BLOCK = new BlockType(347, "Block of Redstone", "redstone_block", 5, 6, 6932, 6932, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 6932, true, false, 15, 0, Material.find("redstone_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType NETHER_QUARTZ_ORE = new BlockType(348, "Nether Quartz Ore", "nether_quartz_ore", 3, 3, 6933, 6933, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 6933, true, false, 15, 0, Material.find("nether_quartz_ore"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType HOPPER = new BlockType(349, "Hopper", "hopper", 3, 4.8, 6934, 6943, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 6934, true, true, 0, 0, Material.find("hopper"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType QUARTZ_BLOCK = new BlockType(350, "Block of Quartz", "quartz_block", 0.8, 0.8, 6944, 6944, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 6944, true, false, 15, 0, Material.find("quartz_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CHISELED_QUARTZ_BLOCK = new BlockType(351, "Chiseled Quartz Block", "chiseled_quartz_block", 0.8, 0.8, 6945, 6945, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 6945, true, false, 15, 0, Material.find("chiseled_quartz_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType QUARTZ_PILLAR = new BlockType(352, "Quartz Pillar", "quartz_pillar", 0.8, 0.8, 6946, 6948, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 6947, true, false, 15, 0, Material.find("quartz_pillar"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType QUARTZ_STAIRS = new BlockType(353, "Quartz Stairs", "quartz_stairs", 0.8, 0.8, 6949, 7028, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 6960, true, false, 0, 0, Material.find("quartz_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType ACTIVATOR_RAIL = new BlockType(354, "Activator Rail", "activator_rail", 0.7, 0.7, 7029, 7052, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7042, true, true, 0, 0, Material.find("activator_rail"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DROPPER = new BlockType(355, "Dropper", "dropper", 3.5, 3.5, 7053, 7064, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7054, true, false, 15, 0, Material.find("dropper"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WHITE_TERRACOTTA = new BlockType(356, "White Terracotta", "white_terracotta", 1.25, 4.2, 7065, 7065, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7065, true, false, 15, 0, Material.find("white_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType ORANGE_TERRACOTTA = new BlockType(357, "Orange Terracotta", "orange_terracotta", 1.25, 4.2, 7066, 7066, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7066, true, false, 15, 0, Material.find("orange_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType MAGENTA_TERRACOTTA = new BlockType(358, "Magenta Terracotta", "magenta_terracotta", 1.25, 4.2, 7067, 7067, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7067, true, false, 15, 0, Material.find("magenta_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType LIGHT_BLUE_TERRACOTTA = new BlockType(359, "Light Blue Terracotta", "light_blue_terracotta", 1.25, 4.2, 7068, 7068, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7068, true, false, 15, 0, Material.find("light_blue_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType YELLOW_TERRACOTTA = new BlockType(360, "Yellow Terracotta", "yellow_terracotta", 1.25, 4.2, 7069, 7069, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7069, true, false, 15, 0, Material.find("yellow_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType LIME_TERRACOTTA = new BlockType(361, "Lime Terracotta", "lime_terracotta", 1.25, 4.2, 7070, 7070, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7070, true, false, 15, 0, Material.find("lime_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PINK_TERRACOTTA = new BlockType(362, "Pink Terracotta", "pink_terracotta", 1.25, 4.2, 7071, 7071, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7071, true, false, 15, 0, Material.find("pink_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType GRAY_TERRACOTTA = new BlockType(363, "Gray Terracotta", "gray_terracotta", 1.25, 4.2, 7072, 7072, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7072, true, false, 15, 0, Material.find("gray_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType LIGHT_GRAY_TERRACOTTA = new BlockType(364, "Light Gray Terracotta", "light_gray_terracotta", 1.25, 4.2, 7073, 7073, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7073, true, false, 15, 0, Material.find("light_gray_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CYAN_TERRACOTTA = new BlockType(365, "Cyan Terracotta", "cyan_terracotta", 1.25, 4.2, 7074, 7074, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7074, true, false, 15, 0, Material.find("cyan_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PURPLE_TERRACOTTA = new BlockType(366, "Purple Terracotta", "purple_terracotta", 1.25, 4.2, 7075, 7075, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7075, true, false, 15, 0, Material.find("purple_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BLUE_TERRACOTTA = new BlockType(367, "Blue Terracotta", "blue_terracotta", 1.25, 4.2, 7076, 7076, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7076, true, false, 15, 0, Material.find("blue_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BROWN_TERRACOTTA = new BlockType(368, "Brown Terracotta", "brown_terracotta", 1.25, 4.2, 7077, 7077, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7077, true, false, 15, 0, Material.find("brown_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType GREEN_TERRACOTTA = new BlockType(369, "Green Terracotta", "green_terracotta", 1.25, 4.2, 7078, 7078, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7078, true, false, 15, 0, Material.find("green_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType RED_TERRACOTTA = new BlockType(370, "Red Terracotta", "red_terracotta", 1.25, 4.2, 7079, 7079, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7079, true, false, 15, 0, Material.find("red_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BLACK_TERRACOTTA = new BlockType(371, "Black Terracotta", "black_terracotta", 1.25, 4.2, 7080, 7080, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7080, true, false, 15, 0, Material.find("black_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WHITE_STAINED_GLASS_PANE = new BlockType(372, "White Stained Glass Pane", "white_stained_glass_pane", 0.3, 0.3, 7081, 7112, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7112, true, true, 0, 0, Material.find("white_stained_glass_pane"), List.of(Key.minecraft("default")));
    public static final BlockType ORANGE_STAINED_GLASS_PANE = new BlockType(373, "Orange Stained Glass Pane", "orange_stained_glass_pane", 0.3, 0.3, 7113, 7144, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7144, true, true, 0, 0, Material.find("orange_stained_glass_pane"), List.of(Key.minecraft("default")));
    public static final BlockType MAGENTA_STAINED_GLASS_PANE = new BlockType(374, "Magenta Stained Glass Pane", "magenta_stained_glass_pane", 0.3, 0.3, 7145, 7176, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7176, true, true, 0, 0, Material.find("magenta_stained_glass_pane"), List.of(Key.minecraft("default")));
    public static final BlockType LIGHT_BLUE_STAINED_GLASS_PANE = new BlockType(375, "Light Blue Stained Glass Pane", "light_blue_stained_glass_pane", 0.3, 0.3, 7177, 7208, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7208, true, true, 0, 0, Material.find("light_blue_stained_glass_pane"), List.of(Key.minecraft("default")));
    public static final BlockType YELLOW_STAINED_GLASS_PANE = new BlockType(376, "Yellow Stained Glass Pane", "yellow_stained_glass_pane", 0.3, 0.3, 7209, 7240, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7240, true, true, 0, 0, Material.find("yellow_stained_glass_pane"), List.of(Key.minecraft("default")));
    public static final BlockType LIME_STAINED_GLASS_PANE = new BlockType(377, "Lime Stained Glass Pane", "lime_stained_glass_pane", 0.3, 0.3, 7241, 7272, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7272, true, true, 0, 0, Material.find("lime_stained_glass_pane"), List.of(Key.minecraft("default")));
    public static final BlockType PINK_STAINED_GLASS_PANE = new BlockType(378, "Pink Stained Glass Pane", "pink_stained_glass_pane", 0.3, 0.3, 7273, 7304, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7304, true, true, 0, 0, Material.find("pink_stained_glass_pane"), List.of(Key.minecraft("default")));
    public static final BlockType GRAY_STAINED_GLASS_PANE = new BlockType(379, "Gray Stained Glass Pane", "gray_stained_glass_pane", 0.3, 0.3, 7305, 7336, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7336, true, true, 0, 0, Material.find("gray_stained_glass_pane"), List.of(Key.minecraft("default")));
    public static final BlockType LIGHT_GRAY_STAINED_GLASS_PANE = new BlockType(380, "Light Gray Stained Glass Pane", "light_gray_stained_glass_pane", 0.3, 0.3, 7337, 7368, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7368, true, true, 0, 0, Material.find("light_gray_stained_glass_pane"), List.of(Key.minecraft("default")));
    public static final BlockType CYAN_STAINED_GLASS_PANE = new BlockType(381, "Cyan Stained Glass Pane", "cyan_stained_glass_pane", 0.3, 0.3, 7369, 7400, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7400, true, true, 0, 0, Material.find("cyan_stained_glass_pane"), List.of(Key.minecraft("default")));
    public static final BlockType PURPLE_STAINED_GLASS_PANE = new BlockType(382, "Purple Stained Glass Pane", "purple_stained_glass_pane", 0.3, 0.3, 7401, 7432, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7432, true, true, 0, 0, Material.find("purple_stained_glass_pane"), List.of(Key.minecraft("default")));
    public static final BlockType BLUE_STAINED_GLASS_PANE = new BlockType(383, "Blue Stained Glass Pane", "blue_stained_glass_pane", 0.3, 0.3, 7433, 7464, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7464, true, true, 0, 0, Material.find("blue_stained_glass_pane"), List.of(Key.minecraft("default")));
    public static final BlockType BROWN_STAINED_GLASS_PANE = new BlockType(384, "Brown Stained Glass Pane", "brown_stained_glass_pane", 0.3, 0.3, 7465, 7496, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7496, true, true, 0, 0, Material.find("brown_stained_glass_pane"), List.of(Key.minecraft("default")));
    public static final BlockType GREEN_STAINED_GLASS_PANE = new BlockType(385, "Green Stained Glass Pane", "green_stained_glass_pane", 0.3, 0.3, 7497, 7528, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7528, true, true, 0, 0, Material.find("green_stained_glass_pane"), List.of(Key.minecraft("default")));
    public static final BlockType RED_STAINED_GLASS_PANE = new BlockType(386, "Red Stained Glass Pane", "red_stained_glass_pane", 0.3, 0.3, 7529, 7560, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7560, true, true, 0, 0, Material.find("red_stained_glass_pane"), List.of(Key.minecraft("default")));
    public static final BlockType BLACK_STAINED_GLASS_PANE = new BlockType(387, "Black Stained Glass Pane", "black_stained_glass_pane", 0.3, 0.3, 7561, 7592, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7592, true, true, 0, 0, Material.find("black_stained_glass_pane"), List.of(Key.minecraft("default")));
    public static final BlockType ACACIA_STAIRS = new BlockType(388, "Acacia Stairs", "acacia_stairs", 2, 3, 7593, 7672, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7604, true, false, 0, 0, Material.find("acacia_stairs"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType DARK_OAK_STAIRS = new BlockType(389, "Dark Oak Stairs", "dark_oak_stairs", 2, 3, 7673, 7752, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7684, true, false, 0, 0, Material.find("dark_oak_stairs"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType SLIME_BLOCK = new BlockType(390, "Slime Block", "slime_block", 0, 0, 7753, 7753, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7753, true, true, 1, 0, Material.find("slime_block"), List.of(Key.minecraft("default")));
    public static final BlockType BARRIER = new BlockType(391, "Barrier", "barrier", 0, 3600000.75, 7754, 7754, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7754, false, true, 0, 0, Material.find("barrier"), List.of(Key.minecraft("default")));
    public static final BlockType LIGHT = new BlockType(392, "Light", "light", 0, 3600000.75, 7755, 7786, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 7786, false, true, 0, 15, Material.find("light"), List.of(Key.minecraft("default")));
    public static final BlockType IRON_TRAPDOOR = new BlockType(393, "Iron Trapdoor", "iron_trapdoor", 5, 5, 7787, 7850, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7802, true, true, 0, 0, Material.find("iron_trapdoor"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PRISMARINE = new BlockType(394, "Prismarine", "prismarine", 1.5, 6, 7851, 7851, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7851, true, false, 15, 0, Material.find("prismarine"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PRISMARINE_BRICKS = new BlockType(395, "Prismarine Bricks", "prismarine_bricks", 1.5, 6, 7852, 7852, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7852, true, false, 15, 0, Material.find("prismarine_bricks"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DARK_PRISMARINE = new BlockType(396, "Dark Prismarine", "dark_prismarine", 1.5, 6, 7853, 7853, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7853, true, false, 15, 0, Material.find("dark_prismarine"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PRISMARINE_STAIRS = new BlockType(397, "Prismarine Stairs", "prismarine_stairs", 1.5, 6, 7854, 7933, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7865, true, false, 0, 0, Material.find("prismarine_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PRISMARINE_BRICK_STAIRS = new BlockType(398, "Prismarine Brick Stairs", "prismarine_brick_stairs", 1.5, 6, 7934, 8013, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 7945, true, false, 0, 0, Material.find("prismarine_brick_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DARK_PRISMARINE_STAIRS = new BlockType(399, "Dark Prismarine Stairs", "dark_prismarine_stairs", 1.5, 6, 8014, 8093, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8025, true, false, 0, 0, Material.find("dark_prismarine_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PRISMARINE_SLAB = new BlockType(400, "Prismarine Slab", "prismarine_slab", 1.5, 6, 8094, 8099, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8097, true, false, 0, 0, Material.find("prismarine_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PRISMARINE_BRICK_SLAB = new BlockType(401, "Prismarine Brick Slab", "prismarine_brick_slab", 1.5, 6, 8100, 8105, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8103, true, false, 0, 0, Material.find("prismarine_brick_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DARK_PRISMARINE_SLAB = new BlockType(402, "Dark Prismarine Slab", "dark_prismarine_slab", 1.5, 6, 8106, 8111, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8109, true, false, 0, 0, Material.find("dark_prismarine_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SEA_LANTERN = new BlockType(403, "Sea Lantern", "sea_lantern", 0.3, 0.3, 8112, 8112, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8112, true, false, 15, 15, Material.find("sea_lantern"), List.of(Key.minecraft("default")));
    public static final BlockType HAY_BLOCK = new BlockType(404, "Hay Bale", "hay_block", 0.5, 0.5, 8113, 8115, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8114, true, false, 15, 0, Material.find("hay_block"), List.of(Key.minecraft("mineable/hoe")));
    public static final BlockType WHITE_CARPET = new BlockType(405, "White Carpet", "white_carpet", 0.1, 0.1, 8116, 8116, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8116, true, false, 0, 0, Material.find("white_carpet"), List.of(Key.minecraft("default")));
    public static final BlockType ORANGE_CARPET = new BlockType(406, "Orange Carpet", "orange_carpet", 0.1, 0.1, 8117, 8117, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8117, true, false, 0, 0, Material.find("orange_carpet"), List.of(Key.minecraft("default")));
    public static final BlockType MAGENTA_CARPET = new BlockType(407, "Magenta Carpet", "magenta_carpet", 0.1, 0.1, 8118, 8118, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8118, true, false, 0, 0, Material.find("magenta_carpet"), List.of(Key.minecraft("default")));
    public static final BlockType LIGHT_BLUE_CARPET = new BlockType(408, "Light Blue Carpet", "light_blue_carpet", 0.1, 0.1, 8119, 8119, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8119, true, false, 0, 0, Material.find("light_blue_carpet"), List.of(Key.minecraft("default")));
    public static final BlockType YELLOW_CARPET = new BlockType(409, "Yellow Carpet", "yellow_carpet", 0.1, 0.1, 8120, 8120, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8120, true, false, 0, 0, Material.find("yellow_carpet"), List.of(Key.minecraft("default")));
    public static final BlockType LIME_CARPET = new BlockType(410, "Lime Carpet", "lime_carpet", 0.1, 0.1, 8121, 8121, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8121, true, false, 0, 0, Material.find("lime_carpet"), List.of(Key.minecraft("default")));
    public static final BlockType PINK_CARPET = new BlockType(411, "Pink Carpet", "pink_carpet", 0.1, 0.1, 8122, 8122, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8122, true, false, 0, 0, Material.find("pink_carpet"), List.of(Key.minecraft("default")));
    public static final BlockType GRAY_CARPET = new BlockType(412, "Gray Carpet", "gray_carpet", 0.1, 0.1, 8123, 8123, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8123, true, false, 0, 0, Material.find("gray_carpet"), List.of(Key.minecraft("default")));
    public static final BlockType LIGHT_GRAY_CARPET = new BlockType(413, "Light Gray Carpet", "light_gray_carpet", 0.1, 0.1, 8124, 8124, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8124, true, false, 0, 0, Material.find("light_gray_carpet"), List.of(Key.minecraft("default")));
    public static final BlockType CYAN_CARPET = new BlockType(414, "Cyan Carpet", "cyan_carpet", 0.1, 0.1, 8125, 8125, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8125, true, false, 0, 0, Material.find("cyan_carpet"), List.of(Key.minecraft("default")));
    public static final BlockType PURPLE_CARPET = new BlockType(415, "Purple Carpet", "purple_carpet", 0.1, 0.1, 8126, 8126, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8126, true, false, 0, 0, Material.find("purple_carpet"), List.of(Key.minecraft("default")));
    public static final BlockType BLUE_CARPET = new BlockType(416, "Blue Carpet", "blue_carpet", 0.1, 0.1, 8127, 8127, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8127, true, false, 0, 0, Material.find("blue_carpet"), List.of(Key.minecraft("default")));
    public static final BlockType BROWN_CARPET = new BlockType(417, "Brown Carpet", "brown_carpet", 0.1, 0.1, 8128, 8128, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8128, true, false, 0, 0, Material.find("brown_carpet"), List.of(Key.minecraft("default")));
    public static final BlockType GREEN_CARPET = new BlockType(418, "Green Carpet", "green_carpet", 0.1, 0.1, 8129, 8129, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8129, true, false, 0, 0, Material.find("green_carpet"), List.of(Key.minecraft("default")));
    public static final BlockType RED_CARPET = new BlockType(419, "Red Carpet", "red_carpet", 0.1, 0.1, 8130, 8130, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8130, true, false, 0, 0, Material.find("red_carpet"), List.of(Key.minecraft("default")));
    public static final BlockType BLACK_CARPET = new BlockType(420, "Black Carpet", "black_carpet", 0.1, 0.1, 8131, 8131, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8131, true, false, 0, 0, Material.find("black_carpet"), List.of(Key.minecraft("default")));
    public static final BlockType TERRACOTTA = new BlockType(421, "Terracotta", "terracotta", 1.25, 4.2, 8132, 8132, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8132, true, false, 15, 0, Material.find("terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType COAL_BLOCK = new BlockType(422, "Block of Coal", "coal_block", 5, 6, 8133, 8133, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8133, true, false, 15, 0, Material.find("coal_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PACKED_ICE = new BlockType(423, "Packed Ice", "packed_ice", 0.5, 0.5, 8134, 8134, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8134, true, false, 15, 0, Material.find("packed_ice"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SUNFLOWER = new BlockType(424, "Sunflower", "sunflower", 0, 0, 8135, 8136, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8136, true, true, 0, 0, Material.find("sunflower"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType LILAC = new BlockType(425, "Lilac", "lilac", 0, 0, 8137, 8138, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8138, true, true, 0, 0, Material.find("lilac"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType ROSE_BUSH = new BlockType(426, "Rose Bush", "rose_bush", 0, 0, 8139, 8140, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8140, true, true, 0, 0, Material.find("rose_bush"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType PEONY = new BlockType(427, "Peony", "peony", 0, 0, 8141, 8142, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8142, true, true, 0, 0, Material.find("peony"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType TALL_GRASS = new BlockType(428, "Tall Grass", "tall_grass", 0, 0, 8143, 8144, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8144, true, true, 0, 0, Material.find("tall_grass"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType LARGE_FERN = new BlockType(429, "Large Fern", "large_fern", 0, 0, 8145, 8146, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8146, true, true, 0, 0, Material.find("large_fern"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType WHITE_BANNER = new BlockType(430, "White Banner", "white_banner", 1, 1, 8147, 8162, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8147, true, true, 0, 0, Material.find("white_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType ORANGE_BANNER = new BlockType(431, "Orange Banner", "orange_banner", 1, 1, 8163, 8178, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8163, true, true, 0, 0, Material.find("orange_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType MAGENTA_BANNER = new BlockType(432, "Magenta Banner", "magenta_banner", 1, 1, 8179, 8194, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8179, true, true, 0, 0, Material.find("magenta_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType LIGHT_BLUE_BANNER = new BlockType(433, "Light Blue Banner", "light_blue_banner", 1, 1, 8195, 8210, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8195, true, true, 0, 0, Material.find("light_blue_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType YELLOW_BANNER = new BlockType(434, "Yellow Banner", "yellow_banner", 1, 1, 8211, 8226, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8211, true, true, 0, 0, Material.find("yellow_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType LIME_BANNER = new BlockType(435, "Lime Banner", "lime_banner", 1, 1, 8227, 8242, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8227, true, true, 0, 0, Material.find("lime_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType PINK_BANNER = new BlockType(436, "Pink Banner", "pink_banner", 1, 1, 8243, 8258, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8243, true, true, 0, 0, Material.find("pink_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType GRAY_BANNER = new BlockType(437, "Gray Banner", "gray_banner", 1, 1, 8259, 8274, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8259, true, true, 0, 0, Material.find("gray_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType LIGHT_GRAY_BANNER = new BlockType(438, "Light Gray Banner", "light_gray_banner", 1, 1, 8275, 8290, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8275, true, true, 0, 0, Material.find("light_gray_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType CYAN_BANNER = new BlockType(439, "Cyan Banner", "cyan_banner", 1, 1, 8291, 8306, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8291, true, true, 0, 0, Material.find("cyan_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType PURPLE_BANNER = new BlockType(440, "Purple Banner", "purple_banner", 1, 1, 8307, 8322, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8307, true, true, 0, 0, Material.find("purple_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BLUE_BANNER = new BlockType(441, "Blue Banner", "blue_banner", 1, 1, 8323, 8338, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8323, true, true, 0, 0, Material.find("blue_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BROWN_BANNER = new BlockType(442, "Brown Banner", "brown_banner", 1, 1, 8339, 8354, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8339, true, true, 0, 0, Material.find("brown_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType GREEN_BANNER = new BlockType(443, "Green Banner", "green_banner", 1, 1, 8355, 8370, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8355, true, true, 0, 0, Material.find("green_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType RED_BANNER = new BlockType(444, "Red Banner", "red_banner", 1, 1, 8371, 8386, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8371, true, true, 0, 0, Material.find("red_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BLACK_BANNER = new BlockType(445, "Black Banner", "black_banner", 1, 1, 8387, 8402, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8387, true, true, 0, 0, Material.find("black_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType WHITE_WALL_BANNER = new BlockType(446, "White wall banner", "white_wall_banner", 1, 1, 8403, 8406, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8403, true, true, 0, 0, Material.find("white_wall_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType ORANGE_WALL_BANNER = new BlockType(447, "Orange wall banner", "orange_wall_banner", 1, 1, 8407, 8410, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8407, true, true, 0, 0, Material.find("orange_wall_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType MAGENTA_WALL_BANNER = new BlockType(448, "Magenta wall banner", "magenta_wall_banner", 1, 1, 8411, 8414, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8411, true, true, 0, 0, Material.find("magenta_wall_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType LIGHT_BLUE_WALL_BANNER = new BlockType(449, "Light blue wall banner", "light_blue_wall_banner", 1, 1, 8415, 8418, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8415, true, true, 0, 0, Material.find("light_blue_wall_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType YELLOW_WALL_BANNER = new BlockType(450, "Yellow wall banner", "yellow_wall_banner", 1, 1, 8419, 8422, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8419, true, true, 0, 0, Material.find("yellow_wall_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType LIME_WALL_BANNER = new BlockType(451, "Lime wall banner", "lime_wall_banner", 1, 1, 8423, 8426, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8423, true, true, 0, 0, Material.find("lime_wall_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType PINK_WALL_BANNER = new BlockType(452, "Pink wall banner", "pink_wall_banner", 1, 1, 8427, 8430, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8427, true, true, 0, 0, Material.find("pink_wall_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType GRAY_WALL_BANNER = new BlockType(453, "Gray wall banner", "gray_wall_banner", 1, 1, 8431, 8434, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8431, true, true, 0, 0, Material.find("gray_wall_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType LIGHT_GRAY_WALL_BANNER = new BlockType(454, "Light gray wall banner", "light_gray_wall_banner", 1, 1, 8435, 8438, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8435, true, true, 0, 0, Material.find("light_gray_wall_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType CYAN_WALL_BANNER = new BlockType(455, "Cyan wall banner", "cyan_wall_banner", 1, 1, 8439, 8442, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8439, true, true, 0, 0, Material.find("cyan_wall_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType PURPLE_WALL_BANNER = new BlockType(456, "Purple wall banner", "purple_wall_banner", 1, 1, 8443, 8446, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8443, true, true, 0, 0, Material.find("purple_wall_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BLUE_WALL_BANNER = new BlockType(457, "Blue wall banner", "blue_wall_banner", 1, 1, 8447, 8450, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8447, true, true, 0, 0, Material.find("blue_wall_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BROWN_WALL_BANNER = new BlockType(458, "Brown wall banner", "brown_wall_banner", 1, 1, 8451, 8454, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8451, true, true, 0, 0, Material.find("brown_wall_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType GREEN_WALL_BANNER = new BlockType(459, "Green wall banner", "green_wall_banner", 1, 1, 8455, 8458, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8455, true, true, 0, 0, Material.find("green_wall_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType RED_WALL_BANNER = new BlockType(460, "Red wall banner", "red_wall_banner", 1, 1, 8459, 8462, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8459, true, true, 0, 0, Material.find("red_wall_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BLACK_WALL_BANNER = new BlockType(461, "Black wall banner", "black_wall_banner", 1, 1, 8463, 8466, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8463, true, true, 0, 0, Material.find("black_wall_banner"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType RED_SANDSTONE = new BlockType(462, "Red Sandstone", "red_sandstone", 0.8, 0.8, 8467, 8467, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8467, true, false, 15, 0, Material.find("red_sandstone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CHISELED_RED_SANDSTONE = new BlockType(463, "Chiseled Red Sandstone", "chiseled_red_sandstone", 0.8, 0.8, 8468, 8468, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8468, true, false, 15, 0, Material.find("chiseled_red_sandstone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CUT_RED_SANDSTONE = new BlockType(464, "Cut Red Sandstone", "cut_red_sandstone", 0.8, 0.8, 8469, 8469, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8469, true, false, 15, 0, Material.find("cut_red_sandstone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType RED_SANDSTONE_STAIRS = new BlockType(465, "Red Sandstone Stairs", "red_sandstone_stairs", 0.8, 0.8, 8470, 8549, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8481, true, false, 0, 0, Material.find("red_sandstone_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType OAK_SLAB = new BlockType(466, "Oak Slab", "oak_slab", 2, 3, 8550, 8555, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8553, true, false, 0, 0, Material.find("oak_slab"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType SPRUCE_SLAB = new BlockType(467, "Spruce Slab", "spruce_slab", 2, 3, 8556, 8561, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8559, true, false, 0, 0, Material.find("spruce_slab"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BIRCH_SLAB = new BlockType(468, "Birch Slab", "birch_slab", 2, 3, 8562, 8567, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8565, true, false, 0, 0, Material.find("birch_slab"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType JUNGLE_SLAB = new BlockType(469, "Jungle Slab", "jungle_slab", 2, 3, 8568, 8573, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8571, true, false, 0, 0, Material.find("jungle_slab"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType ACACIA_SLAB = new BlockType(470, "Acacia Slab", "acacia_slab", 2, 3, 8574, 8579, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8577, true, false, 0, 0, Material.find("acacia_slab"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType DARK_OAK_SLAB = new BlockType(471, "Dark Oak Slab", "dark_oak_slab", 2, 3, 8580, 8585, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8583, true, false, 0, 0, Material.find("dark_oak_slab"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType STONE_SLAB = new BlockType(472, "Stone Slab", "stone_slab", 2, 6, 8586, 8591, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8589, true, false, 0, 0, Material.find("stone_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SMOOTH_STONE_SLAB = new BlockType(473, "Smooth Stone Slab", "smooth_stone_slab", 2, 6, 8592, 8597, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8595, true, false, 0, 0, Material.find("smooth_stone_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SANDSTONE_SLAB = new BlockType(474, "Sandstone Slab", "sandstone_slab", 2, 6, 8598, 8603, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8601, true, false, 0, 0, Material.find("sandstone_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CUT_SANDSTONE_SLAB = new BlockType(475, "Cut Sandstone Slab", "cut_sandstone_slab", 2, 6, 8604, 8609, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8607, true, false, 0, 0, Material.find("cut_sandstone_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PETRIFIED_OAK_SLAB = new BlockType(476, "Petrified Oak Slab", "petrified_oak_slab", 2, 6, 8610, 8615, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8613, true, false, 0, 0, Material.find("petrified_oak_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType COBBLESTONE_SLAB = new BlockType(477, "Cobblestone Slab", "cobblestone_slab", 2, 6, 8616, 8621, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8619, true, false, 0, 0, Material.find("cobblestone_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BRICK_SLAB = new BlockType(478, "Brick Slab", "brick_slab", 2, 6, 8622, 8627, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8625, true, false, 0, 0, Material.find("brick_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType STONE_BRICK_SLAB = new BlockType(479, "Stone Brick Slab", "stone_brick_slab", 2, 6, 8628, 8633, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8631, true, false, 0, 0, Material.find("stone_brick_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType NETHER_BRICK_SLAB = new BlockType(480, "Nether Brick Slab", "nether_brick_slab", 2, 6, 8634, 8639, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8637, true, false, 0, 0, Material.find("nether_brick_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType QUARTZ_SLAB = new BlockType(481, "Quartz Slab", "quartz_slab", 2, 6, 8640, 8645, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8643, true, false, 0, 0, Material.find("quartz_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType RED_SANDSTONE_SLAB = new BlockType(482, "Red Sandstone Slab", "red_sandstone_slab", 2, 6, 8646, 8651, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8649, true, false, 0, 0, Material.find("red_sandstone_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CUT_RED_SANDSTONE_SLAB = new BlockType(483, "Cut Red Sandstone Slab", "cut_red_sandstone_slab", 2, 6, 8652, 8657, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8655, true, false, 0, 0, Material.find("cut_red_sandstone_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PURPUR_SLAB = new BlockType(484, "Purpur Slab", "purpur_slab", 2, 6, 8658, 8663, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8661, true, false, 0, 0, Material.find("purpur_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SMOOTH_STONE = new BlockType(485, "Smooth Stone", "smooth_stone", 2, 6, 8664, 8664, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8664, true, false, 15, 0, Material.find("smooth_stone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SMOOTH_SANDSTONE = new BlockType(486, "Smooth Sandstone", "smooth_sandstone", 2, 6, 8665, 8665, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8665, true, false, 15, 0, Material.find("smooth_sandstone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SMOOTH_QUARTZ = new BlockType(487, "Smooth Quartz Block", "smooth_quartz", 2, 6, 8666, 8666, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8666, true, false, 15, 0, Material.find("smooth_quartz"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SMOOTH_RED_SANDSTONE = new BlockType(488, "Smooth Red Sandstone", "smooth_red_sandstone", 2, 6, 8667, 8667, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 8667, true, false, 15, 0, Material.find("smooth_red_sandstone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SPRUCE_FENCE_GATE = new BlockType(489, "Spruce Fence Gate", "spruce_fence_gate", 2, 3, 8668, 8699, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8675, true, false, 0, 0, Material.find("spruce_fence_gate"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BIRCH_FENCE_GATE = new BlockType(490, "Birch Fence Gate", "birch_fence_gate", 2, 3, 8700, 8731, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8707, true, false, 0, 0, Material.find("birch_fence_gate"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType JUNGLE_FENCE_GATE = new BlockType(491, "Jungle Fence Gate", "jungle_fence_gate", 2, 3, 8732, 8763, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8739, true, false, 0, 0, Material.find("jungle_fence_gate"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType ACACIA_FENCE_GATE = new BlockType(492, "Acacia Fence Gate", "acacia_fence_gate", 2, 3, 8764, 8795, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8771, true, false, 0, 0, Material.find("acacia_fence_gate"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType DARK_OAK_FENCE_GATE = new BlockType(493, "Dark Oak Fence Gate", "dark_oak_fence_gate", 2, 3, 8796, 8827, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8803, true, false, 0, 0, Material.find("dark_oak_fence_gate"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType SPRUCE_FENCE = new BlockType(494, "Spruce Fence", "spruce_fence", 2, 3, 8828, 8859, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8859, true, false, 0, 0, Material.find("spruce_fence"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BIRCH_FENCE = new BlockType(495, "Birch Fence", "birch_fence", 2, 3, 8860, 8891, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8891, true, false, 0, 0, Material.find("birch_fence"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType JUNGLE_FENCE = new BlockType(496, "Jungle Fence", "jungle_fence", 2, 3, 8892, 8923, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8923, true, false, 0, 0, Material.find("jungle_fence"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType ACACIA_FENCE = new BlockType(497, "Acacia Fence", "acacia_fence", 2, 3, 8924, 8955, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8955, true, false, 0, 0, Material.find("acacia_fence"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType DARK_OAK_FENCE = new BlockType(498, "Dark Oak Fence", "dark_oak_fence", 2, 3, 8956, 8987, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8987, true, false, 0, 0, Material.find("dark_oak_fence"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType SPRUCE_DOOR = new BlockType(499, "Spruce Door", "spruce_door", 3, 3, 8988, 9051, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 8999, true, true, 0, 0, Material.find("spruce_door"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BIRCH_DOOR = new BlockType(500, "Birch Door", "birch_door", 3, 3, 9052, 9115, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9063, true, true, 0, 0, Material.find("birch_door"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType JUNGLE_DOOR = new BlockType(501, "Jungle Door", "jungle_door", 3, 3, 9116, 9179, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9127, true, true, 0, 0, Material.find("jungle_door"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType ACACIA_DOOR = new BlockType(502, "Acacia Door", "acacia_door", 3, 3, 9180, 9243, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9191, true, true, 0, 0, Material.find("acacia_door"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType DARK_OAK_DOOR = new BlockType(503, "Dark Oak Door", "dark_oak_door", 3, 3, 9244, 9307, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9255, true, true, 0, 0, Material.find("dark_oak_door"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType END_ROD = new BlockType(504, "End Rod", "end_rod", 0, 0, 9308, 9313, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9312, true, true, 0, 14, Material.find("end_rod"), List.of(Key.minecraft("default")));
    public static final BlockType CHORUS_PLANT = new BlockType(505, "Chorus Plant", "chorus_plant", 0.4, 0.4, 9314, 9377, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9377, true, true, 1, 0, Material.find("chorus_plant"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType CHORUS_FLOWER = new BlockType(506, "Chorus Flower", "chorus_flower", 0.4, 0.4, 9378, 9383, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9378, true, true, 1, 0, Material.find("chorus_flower"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType PURPUR_BLOCK = new BlockType(507, "Purpur Block", "purpur_block", 1.5, 6, 9384, 9384, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9384, true, false, 15, 0, Material.find("purpur_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PURPUR_PILLAR = new BlockType(508, "Purpur Pillar", "purpur_pillar", 1.5, 6, 9385, 9387, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9386, true, false, 15, 0, Material.find("purpur_pillar"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PURPUR_STAIRS = new BlockType(509, "Purpur Stairs", "purpur_stairs", 1.5, 6, 9388, 9467, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9399, true, false, 0, 0, Material.find("purpur_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType END_STONE_BRICKS = new BlockType(510, "End Stone Bricks", "end_stone_bricks", 3, 9, 9468, 9468, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9468, true, false, 15, 0, Material.find("end_stone_bricks"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BEETROOTS = new BlockType(511, "Beetroots", "beetroots", 0, 0, 9469, 9472, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9469, true, true, 0, 0, Material.find("beetroots"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType DIRT_PATH = new BlockType(512, "Dirt Path", "dirt_path", 0.65, 0.65, 9473, 9473, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9473, true, false, 0, 0, Material.find("dirt_path"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType END_GATEWAY = new BlockType(513, "End Gateway", "end_gateway", 0, 3600000, 9474, 9474, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9474, false, true, 1, 15, Material.find("end_gateway"), List.of(Key.minecraft("default")));
    public static final BlockType REPEATING_COMMAND_BLOCK = new BlockType(514, "Repeating Command Block", "repeating_command_block", 0, 3600000, 9475, 9486, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9481, false, false, 15, 0, Material.find("repeating_command_block"), List.of(Key.minecraft("default")));
    public static final BlockType CHAIN_COMMAND_BLOCK = new BlockType(515, "Chain Command Block", "chain_command_block", 0, 3600000, 9487, 9498, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9493, false, false, 15, 0, Material.find("chain_command_block"), List.of(Key.minecraft("default")));
    public static final BlockType FROSTED_ICE = new BlockType(516, "Frosted Ice", "frosted_ice", 0.5, 0.5, 9499, 9502, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9499, true, true, 1, 0, Material.find("frosted_ice"), List.of(Key.minecraft("default")));
    public static final BlockType MAGMA_BLOCK = new BlockType(517, "Magma Block", "magma_block", 0.5, 0.5, 9503, 9503, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9503, true, false, 15, 3, Material.find("magma_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType NETHER_WART_BLOCK = new BlockType(518, "Nether Wart Block", "nether_wart_block", 1, 1, 9504, 9504, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9504, true, false, 15, 0, Material.find("nether_wart_block"), List.of(Key.minecraft("mineable/hoe")));
    public static final BlockType RED_NETHER_BRICKS = new BlockType(519, "Red Nether Bricks", "red_nether_bricks", 2, 6, 9505, 9505, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9505, true, false, 15, 0, Material.find("red_nether_bricks"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BONE_BLOCK = new BlockType(520, "Bone Block", "bone_block", 2, 2, 9506, 9508, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9507, true, false, 15, 0, Material.find("bone_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType STRUCTURE_VOID = new BlockType(521, "Structure Void", "structure_void", 0, 0, 9509, 9509, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9509, true, true, 0, 0, Material.find("structure_void"), List.of(Key.minecraft("default")));
    public static final BlockType OBSERVER = new BlockType(522, "Observer", "observer", 3, 3, 9510, 9521, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9515, true, false, 15, 0, Material.find("observer"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SHULKER_BOX = new BlockType(523, "Shulker Box", "shulker_box", 2, 2, 9522, 9527, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9526, true, true, 1, 0, Material.find("shulker_box"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WHITE_SHULKER_BOX = new BlockType(524, "White Shulker Box", "white_shulker_box", 2, 2, 9528, 9533, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9532, true, true, 1, 0, Material.find("white_shulker_box"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType ORANGE_SHULKER_BOX = new BlockType(525, "Orange Shulker Box", "orange_shulker_box", 2, 2, 9534, 9539, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9538, true, true, 1, 0, Material.find("orange_shulker_box"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType MAGENTA_SHULKER_BOX = new BlockType(526, "Magenta Shulker Box", "magenta_shulker_box", 2, 2, 9540, 9545, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9544, true, true, 1, 0, Material.find("magenta_shulker_box"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType LIGHT_BLUE_SHULKER_BOX = new BlockType(527, "Light Blue Shulker Box", "light_blue_shulker_box", 2, 2, 9546, 9551, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9550, true, true, 1, 0, Material.find("light_blue_shulker_box"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType YELLOW_SHULKER_BOX = new BlockType(528, "Yellow Shulker Box", "yellow_shulker_box", 2, 2, 9552, 9557, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9556, true, true, 1, 0, Material.find("yellow_shulker_box"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType LIME_SHULKER_BOX = new BlockType(529, "Lime Shulker Box", "lime_shulker_box", 2, 2, 9558, 9563, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9562, true, true, 1, 0, Material.find("lime_shulker_box"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PINK_SHULKER_BOX = new BlockType(530, "Pink Shulker Box", "pink_shulker_box", 2, 2, 9564, 9569, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9568, true, true, 1, 0, Material.find("pink_shulker_box"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType GRAY_SHULKER_BOX = new BlockType(531, "Gray Shulker Box", "gray_shulker_box", 2, 2, 9570, 9575, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9574, true, true, 1, 0, Material.find("gray_shulker_box"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType LIGHT_GRAY_SHULKER_BOX = new BlockType(532, "Light Gray Shulker Box", "light_gray_shulker_box", 2, 2, 9576, 9581, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9580, true, true, 1, 0, Material.find("light_gray_shulker_box"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CYAN_SHULKER_BOX = new BlockType(533, "Cyan Shulker Box", "cyan_shulker_box", 2, 2, 9582, 9587, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9586, true, true, 1, 0, Material.find("cyan_shulker_box"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PURPLE_SHULKER_BOX = new BlockType(534, "Purple Shulker Box", "purple_shulker_box", 2, 2, 9588, 9593, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9592, true, true, 1, 0, Material.find("purple_shulker_box"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BLUE_SHULKER_BOX = new BlockType(535, "Blue Shulker Box", "blue_shulker_box", 2, 2, 9594, 9599, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9598, true, true, 1, 0, Material.find("blue_shulker_box"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BROWN_SHULKER_BOX = new BlockType(536, "Brown Shulker Box", "brown_shulker_box", 2, 2, 9600, 9605, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9604, true, true, 1, 0, Material.find("brown_shulker_box"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType GREEN_SHULKER_BOX = new BlockType(537, "Green Shulker Box", "green_shulker_box", 2, 2, 9606, 9611, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9610, true, true, 1, 0, Material.find("green_shulker_box"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType RED_SHULKER_BOX = new BlockType(538, "Red Shulker Box", "red_shulker_box", 2, 2, 9612, 9617, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9616, true, true, 1, 0, Material.find("red_shulker_box"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BLACK_SHULKER_BOX = new BlockType(539, "Black Shulker Box", "black_shulker_box", 2, 2, 9618, 9623, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9622, true, true, 1, 0, Material.find("black_shulker_box"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WHITE_GLAZED_TERRACOTTA = new BlockType(540, "White Glazed Terracotta", "white_glazed_terracotta", 1.4, 1.4, 9624, 9627, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9624, true, false, 15, 0, Material.find("white_glazed_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType ORANGE_GLAZED_TERRACOTTA = new BlockType(541, "Orange Glazed Terracotta", "orange_glazed_terracotta", 1.4, 1.4, 9628, 9631, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9628, true, false, 15, 0, Material.find("orange_glazed_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType MAGENTA_GLAZED_TERRACOTTA = new BlockType(542, "Magenta Glazed Terracotta", "magenta_glazed_terracotta", 1.4, 1.4, 9632, 9635, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9632, true, false, 15, 0, Material.find("magenta_glazed_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType LIGHT_BLUE_GLAZED_TERRACOTTA = new BlockType(543, "Light Blue Glazed Terracotta", "light_blue_glazed_terracotta", 1.4, 1.4, 9636, 9639, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9636, true, false, 15, 0, Material.find("light_blue_glazed_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType YELLOW_GLAZED_TERRACOTTA = new BlockType(544, "Yellow Glazed Terracotta", "yellow_glazed_terracotta", 1.4, 1.4, 9640, 9643, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9640, true, false, 15, 0, Material.find("yellow_glazed_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType LIME_GLAZED_TERRACOTTA = new BlockType(545, "Lime Glazed Terracotta", "lime_glazed_terracotta", 1.4, 1.4, 9644, 9647, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9644, true, false, 15, 0, Material.find("lime_glazed_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PINK_GLAZED_TERRACOTTA = new BlockType(546, "Pink Glazed Terracotta", "pink_glazed_terracotta", 1.4, 1.4, 9648, 9651, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9648, true, false, 15, 0, Material.find("pink_glazed_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType GRAY_GLAZED_TERRACOTTA = new BlockType(547, "Gray Glazed Terracotta", "gray_glazed_terracotta", 1.4, 1.4, 9652, 9655, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9652, true, false, 15, 0, Material.find("gray_glazed_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType LIGHT_GRAY_GLAZED_TERRACOTTA = new BlockType(548, "Light Gray Glazed Terracotta", "light_gray_glazed_terracotta", 1.4, 1.4, 9656, 9659, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9656, true, false, 15, 0, Material.find("light_gray_glazed_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CYAN_GLAZED_TERRACOTTA = new BlockType(549, "Cyan Glazed Terracotta", "cyan_glazed_terracotta", 1.4, 1.4, 9660, 9663, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9660, true, false, 15, 0, Material.find("cyan_glazed_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PURPLE_GLAZED_TERRACOTTA = new BlockType(550, "Purple Glazed Terracotta", "purple_glazed_terracotta", 1.4, 1.4, 9664, 9667, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9664, true, false, 15, 0, Material.find("purple_glazed_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BLUE_GLAZED_TERRACOTTA = new BlockType(551, "Blue Glazed Terracotta", "blue_glazed_terracotta", 1.4, 1.4, 9668, 9671, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9668, true, false, 15, 0, Material.find("blue_glazed_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BROWN_GLAZED_TERRACOTTA = new BlockType(552, "Brown Glazed Terracotta", "brown_glazed_terracotta", 1.4, 1.4, 9672, 9675, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9672, true, false, 15, 0, Material.find("brown_glazed_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType GREEN_GLAZED_TERRACOTTA = new BlockType(553, "Green Glazed Terracotta", "green_glazed_terracotta", 1.4, 1.4, 9676, 9679, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9676, true, false, 15, 0, Material.find("green_glazed_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType RED_GLAZED_TERRACOTTA = new BlockType(554, "Red Glazed Terracotta", "red_glazed_terracotta", 1.4, 1.4, 9680, 9683, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9680, true, false, 15, 0, Material.find("red_glazed_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BLACK_GLAZED_TERRACOTTA = new BlockType(555, "Black Glazed Terracotta", "black_glazed_terracotta", 1.4, 1.4, 9684, 9687, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9684, true, false, 15, 0, Material.find("black_glazed_terracotta"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WHITE_CONCRETE = new BlockType(556, "White Concrete", "white_concrete", 1.8, 1.8, 9688, 9688, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9688, true, false, 15, 0, Material.find("white_concrete"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType ORANGE_CONCRETE = new BlockType(557, "Orange Concrete", "orange_concrete", 1.8, 1.8, 9689, 9689, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9689, true, false, 15, 0, Material.find("orange_concrete"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType MAGENTA_CONCRETE = new BlockType(558, "Magenta Concrete", "magenta_concrete", 1.8, 1.8, 9690, 9690, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9690, true, false, 15, 0, Material.find("magenta_concrete"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType LIGHT_BLUE_CONCRETE = new BlockType(559, "Light Blue Concrete", "light_blue_concrete", 1.8, 1.8, 9691, 9691, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9691, true, false, 15, 0, Material.find("light_blue_concrete"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType YELLOW_CONCRETE = new BlockType(560, "Yellow Concrete", "yellow_concrete", 1.8, 1.8, 9692, 9692, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9692, true, false, 15, 0, Material.find("yellow_concrete"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType LIME_CONCRETE = new BlockType(561, "Lime Concrete", "lime_concrete", 1.8, 1.8, 9693, 9693, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9693, true, false, 15, 0, Material.find("lime_concrete"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PINK_CONCRETE = new BlockType(562, "Pink Concrete", "pink_concrete", 1.8, 1.8, 9694, 9694, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9694, true, false, 15, 0, Material.find("pink_concrete"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType GRAY_CONCRETE = new BlockType(563, "Gray Concrete", "gray_concrete", 1.8, 1.8, 9695, 9695, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9695, true, false, 15, 0, Material.find("gray_concrete"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType LIGHT_GRAY_CONCRETE = new BlockType(564, "Light Gray Concrete", "light_gray_concrete", 1.8, 1.8, 9696, 9696, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9696, true, false, 15, 0, Material.find("light_gray_concrete"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CYAN_CONCRETE = new BlockType(565, "Cyan Concrete", "cyan_concrete", 1.8, 1.8, 9697, 9697, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9697, true, false, 15, 0, Material.find("cyan_concrete"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PURPLE_CONCRETE = new BlockType(566, "Purple Concrete", "purple_concrete", 1.8, 1.8, 9698, 9698, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9698, true, false, 15, 0, Material.find("purple_concrete"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BLUE_CONCRETE = new BlockType(567, "Blue Concrete", "blue_concrete", 1.8, 1.8, 9699, 9699, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9699, true, false, 15, 0, Material.find("blue_concrete"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BROWN_CONCRETE = new BlockType(568, "Brown Concrete", "brown_concrete", 1.8, 1.8, 9700, 9700, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9700, true, false, 15, 0, Material.find("brown_concrete"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType GREEN_CONCRETE = new BlockType(569, "Green Concrete", "green_concrete", 1.8, 1.8, 9701, 9701, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9701, true, false, 15, 0, Material.find("green_concrete"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType RED_CONCRETE = new BlockType(570, "Red Concrete", "red_concrete", 1.8, 1.8, 9702, 9702, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9702, true, false, 15, 0, Material.find("red_concrete"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BLACK_CONCRETE = new BlockType(571, "Black Concrete", "black_concrete", 1.8, 1.8, 9703, 9703, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9703, true, false, 15, 0, Material.find("black_concrete"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WHITE_CONCRETE_POWDER = new BlockType(572, "White Concrete Powder", "white_concrete_powder", 0.5, 0.5, 9704, 9704, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9704, true, false, 15, 0, Material.find("white_concrete_powder"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType ORANGE_CONCRETE_POWDER = new BlockType(573, "Orange Concrete Powder", "orange_concrete_powder", 0.5, 0.5, 9705, 9705, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9705, true, false, 15, 0, Material.find("orange_concrete_powder"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType MAGENTA_CONCRETE_POWDER = new BlockType(574, "Magenta Concrete Powder", "magenta_concrete_powder", 0.5, 0.5, 9706, 9706, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9706, true, false, 15, 0, Material.find("magenta_concrete_powder"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType LIGHT_BLUE_CONCRETE_POWDER = new BlockType(575, "Light Blue Concrete Powder", "light_blue_concrete_powder", 0.5, 0.5, 9707, 9707, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9707, true, false, 15, 0, Material.find("light_blue_concrete_powder"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType YELLOW_CONCRETE_POWDER = new BlockType(576, "Yellow Concrete Powder", "yellow_concrete_powder", 0.5, 0.5, 9708, 9708, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9708, true, false, 15, 0, Material.find("yellow_concrete_powder"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType LIME_CONCRETE_POWDER = new BlockType(577, "Lime Concrete Powder", "lime_concrete_powder", 0.5, 0.5, 9709, 9709, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9709, true, false, 15, 0, Material.find("lime_concrete_powder"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType PINK_CONCRETE_POWDER = new BlockType(578, "Pink Concrete Powder", "pink_concrete_powder", 0.5, 0.5, 9710, 9710, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9710, true, false, 15, 0, Material.find("pink_concrete_powder"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType GRAY_CONCRETE_POWDER = new BlockType(579, "Gray Concrete Powder", "gray_concrete_powder", 0.5, 0.5, 9711, 9711, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9711, true, false, 15, 0, Material.find("gray_concrete_powder"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType LIGHT_GRAY_CONCRETE_POWDER = new BlockType(580, "Light Gray Concrete Powder", "light_gray_concrete_powder", 0.5, 0.5, 9712, 9712, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9712, true, false, 15, 0, Material.find("light_gray_concrete_powder"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType CYAN_CONCRETE_POWDER = new BlockType(581, "Cyan Concrete Powder", "cyan_concrete_powder", 0.5, 0.5, 9713, 9713, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9713, true, false, 15, 0, Material.find("cyan_concrete_powder"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType PURPLE_CONCRETE_POWDER = new BlockType(582, "Purple Concrete Powder", "purple_concrete_powder", 0.5, 0.5, 9714, 9714, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9714, true, false, 15, 0, Material.find("purple_concrete_powder"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType BLUE_CONCRETE_POWDER = new BlockType(583, "Blue Concrete Powder", "blue_concrete_powder", 0.5, 0.5, 9715, 9715, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9715, true, false, 15, 0, Material.find("blue_concrete_powder"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType BROWN_CONCRETE_POWDER = new BlockType(584, "Brown Concrete Powder", "brown_concrete_powder", 0.5, 0.5, 9716, 9716, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9716, true, false, 15, 0, Material.find("brown_concrete_powder"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType GREEN_CONCRETE_POWDER = new BlockType(585, "Green Concrete Powder", "green_concrete_powder", 0.5, 0.5, 9717, 9717, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9717, true, false, 15, 0, Material.find("green_concrete_powder"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType RED_CONCRETE_POWDER = new BlockType(586, "Red Concrete Powder", "red_concrete_powder", 0.5, 0.5, 9718, 9718, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9718, true, false, 15, 0, Material.find("red_concrete_powder"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType BLACK_CONCRETE_POWDER = new BlockType(587, "Black Concrete Powder", "black_concrete_powder", 0.5, 0.5, 9719, 9719, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9719, true, false, 15, 0, Material.find("black_concrete_powder"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType KELP = new BlockType(588, "Kelp", "kelp", 0, 0, 9720, 9745, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9720, true, true, 1, 0, Material.find("kelp"), List.of(Key.minecraft("default")));
    public static final BlockType KELP_PLANT = new BlockType(589, "Kelp Plant", "kelp_plant", 0, 0, 9746, 9746, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9746, true, true, 1, 0, Material.find("kelp_plant"), List.of(Key.minecraft("default")));
    public static final BlockType DRIED_KELP_BLOCK = new BlockType(590, "Dried Kelp Block", "dried_kelp_block", 0.5, 2.5, 9747, 9747, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9747, true, false, 15, 0, Material.find("dried_kelp_block"), List.of(Key.minecraft("mineable/hoe")));
    public static final BlockType TURTLE_EGG = new BlockType(591, "Turtle Egg", "turtle_egg", 0.5, 0.5, 9748, 9759, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9748, true, true, 0, 0, Material.find("turtle_egg"), List.of(Key.minecraft("default")));
    public static final BlockType DEAD_TUBE_CORAL_BLOCK = new BlockType(592, "Dead Tube Coral Block", "dead_tube_coral_block", 1.5, 6, 9760, 9760, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9760, true, false, 15, 0, Material.find("dead_tube_coral_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEAD_BRAIN_CORAL_BLOCK = new BlockType(593, "Dead Brain Coral Block", "dead_brain_coral_block", 1.5, 6, 9761, 9761, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9761, true, false, 15, 0, Material.find("dead_brain_coral_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEAD_BUBBLE_CORAL_BLOCK = new BlockType(594, "Dead Bubble Coral Block", "dead_bubble_coral_block", 1.5, 6, 9762, 9762, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9762, true, false, 15, 0, Material.find("dead_bubble_coral_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEAD_FIRE_CORAL_BLOCK = new BlockType(595, "Dead Fire Coral Block", "dead_fire_coral_block", 1.5, 6, 9763, 9763, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9763, true, false, 15, 0, Material.find("dead_fire_coral_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEAD_HORN_CORAL_BLOCK = new BlockType(596, "Dead Horn Coral Block", "dead_horn_coral_block", 1.5, 6, 9764, 9764, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9764, true, false, 15, 0, Material.find("dead_horn_coral_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType TUBE_CORAL_BLOCK = new BlockType(597, "Tube Coral Block", "tube_coral_block", 1.5, 6, 9765, 9765, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9765, true, false, 15, 0, Material.find("tube_coral_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BRAIN_CORAL_BLOCK = new BlockType(598, "Brain Coral Block", "brain_coral_block", 1.5, 6, 9766, 9766, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9766, true, false, 15, 0, Material.find("brain_coral_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BUBBLE_CORAL_BLOCK = new BlockType(599, "Bubble Coral Block", "bubble_coral_block", 1.5, 6, 9767, 9767, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9767, true, false, 15, 0, Material.find("bubble_coral_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType FIRE_CORAL_BLOCK = new BlockType(600, "Fire Coral Block", "fire_coral_block", 1.5, 6, 9768, 9768, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9768, true, false, 15, 0, Material.find("fire_coral_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType HORN_CORAL_BLOCK = new BlockType(601, "Horn Coral Block", "horn_coral_block", 1.5, 6, 9769, 9769, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9769, true, false, 15, 0, Material.find("horn_coral_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEAD_TUBE_CORAL = new BlockType(602, "Dead Tube Coral", "dead_tube_coral", 0, 0, 9770, 9771, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9770, true, true, 1, 0, Material.find("dead_tube_coral"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEAD_BRAIN_CORAL = new BlockType(603, "Dead Brain Coral", "dead_brain_coral", 0, 0, 9772, 9773, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9772, true, true, 1, 0, Material.find("dead_brain_coral"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEAD_BUBBLE_CORAL = new BlockType(604, "Dead Bubble Coral", "dead_bubble_coral", 0, 0, 9774, 9775, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9774, true, true, 1, 0, Material.find("dead_bubble_coral"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEAD_FIRE_CORAL = new BlockType(605, "Dead Fire Coral", "dead_fire_coral", 0, 0, 9776, 9777, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9776, true, true, 1, 0, Material.find("dead_fire_coral"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEAD_HORN_CORAL = new BlockType(606, "Dead Horn Coral", "dead_horn_coral", 0, 0, 9778, 9779, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9778, true, true, 1, 0, Material.find("dead_horn_coral"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType TUBE_CORAL = new BlockType(607, "Tube Coral", "tube_coral", 0, 0, 9780, 9781, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9780, true, true, 1, 0, Material.find("tube_coral"), List.of(Key.minecraft("default")));
    public static final BlockType BRAIN_CORAL = new BlockType(608, "Brain Coral", "brain_coral", 0, 0, 9782, 9783, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9782, true, true, 1, 0, Material.find("brain_coral"), List.of(Key.minecraft("default")));
    public static final BlockType BUBBLE_CORAL = new BlockType(609, "Bubble Coral", "bubble_coral", 0, 0, 9784, 9785, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9784, true, true, 1, 0, Material.find("bubble_coral"), List.of(Key.minecraft("default")));
    public static final BlockType FIRE_CORAL = new BlockType(610, "Fire Coral", "fire_coral", 0, 0, 9786, 9787, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9786, true, true, 1, 0, Material.find("fire_coral"), List.of(Key.minecraft("default")));
    public static final BlockType HORN_CORAL = new BlockType(611, "Horn Coral", "horn_coral", 0, 0, 9788, 9789, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9788, true, true, 1, 0, Material.find("horn_coral"), List.of(Key.minecraft("default")));
    public static final BlockType DEAD_TUBE_CORAL_FAN = new BlockType(612, "Dead Tube Coral Fan", "dead_tube_coral_fan", 0, 0, 9790, 9791, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9790, true, true, 1, 0, Material.find("dead_tube_coral_fan"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEAD_BRAIN_CORAL_FAN = new BlockType(613, "Dead Brain Coral Fan", "dead_brain_coral_fan", 0, 0, 9792, 9793, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9792, true, true, 1, 0, Material.find("dead_brain_coral_fan"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEAD_BUBBLE_CORAL_FAN = new BlockType(614, "Dead Bubble Coral Fan", "dead_bubble_coral_fan", 0, 0, 9794, 9795, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9794, true, true, 1, 0, Material.find("dead_bubble_coral_fan"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEAD_FIRE_CORAL_FAN = new BlockType(615, "Dead Fire Coral Fan", "dead_fire_coral_fan", 0, 0, 9796, 9797, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9796, true, true, 1, 0, Material.find("dead_fire_coral_fan"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEAD_HORN_CORAL_FAN = new BlockType(616, "Dead Horn Coral Fan", "dead_horn_coral_fan", 0, 0, 9798, 9799, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9798, true, true, 1, 0, Material.find("dead_horn_coral_fan"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType TUBE_CORAL_FAN = new BlockType(617, "Tube Coral Fan", "tube_coral_fan", 0, 0, 9800, 9801, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9800, true, true, 1, 0, Material.find("tube_coral_fan"), List.of(Key.minecraft("default")));
    public static final BlockType BRAIN_CORAL_FAN = new BlockType(618, "Brain Coral Fan", "brain_coral_fan", 0, 0, 9802, 9803, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9802, true, true, 1, 0, Material.find("brain_coral_fan"), List.of(Key.minecraft("default")));
    public static final BlockType BUBBLE_CORAL_FAN = new BlockType(619, "Bubble Coral Fan", "bubble_coral_fan", 0, 0, 9804, 9805, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9804, true, true, 1, 0, Material.find("bubble_coral_fan"), List.of(Key.minecraft("default")));
    public static final BlockType FIRE_CORAL_FAN = new BlockType(620, "Fire Coral Fan", "fire_coral_fan", 0, 0, 9806, 9807, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9806, true, true, 1, 0, Material.find("fire_coral_fan"), List.of(Key.minecraft("default")));
    public static final BlockType HORN_CORAL_FAN = new BlockType(621, "Horn Coral Fan", "horn_coral_fan", 0, 0, 9808, 9809, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9808, true, true, 1, 0, Material.find("horn_coral_fan"), List.of(Key.minecraft("default")));
    public static final BlockType DEAD_TUBE_CORAL_WALL_FAN = new BlockType(622, "Dead Tube Coral Wall Fan", "dead_tube_coral_wall_fan", 0, 0, 9810, 9817, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9810, true, true, 1, 0, Material.find("dead_tube_coral_wall_fan"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEAD_BRAIN_CORAL_WALL_FAN = new BlockType(623, "Dead Brain Coral Wall Fan", "dead_brain_coral_wall_fan", 0, 0, 9818, 9825, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9818, true, true, 1, 0, Material.find("dead_brain_coral_wall_fan"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEAD_BUBBLE_CORAL_WALL_FAN = new BlockType(624, "Dead Bubble Coral Wall Fan", "dead_bubble_coral_wall_fan", 0, 0, 9826, 9833, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9826, true, true, 1, 0, Material.find("dead_bubble_coral_wall_fan"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEAD_FIRE_CORAL_WALL_FAN = new BlockType(625, "Dead Fire Coral Wall Fan", "dead_fire_coral_wall_fan", 0, 0, 9834, 9841, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9834, true, true, 1, 0, Material.find("dead_fire_coral_wall_fan"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEAD_HORN_CORAL_WALL_FAN = new BlockType(626, "Dead Horn Coral Wall Fan", "dead_horn_coral_wall_fan", 0, 0, 9842, 9849, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9842, true, true, 1, 0, Material.find("dead_horn_coral_wall_fan"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType TUBE_CORAL_WALL_FAN = new BlockType(627, "Tube Coral Wall Fan", "tube_coral_wall_fan", 0, 0, 9850, 9857, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9850, true, true, 1, 0, Material.find("tube_coral_wall_fan"), List.of(Key.minecraft("default")));
    public static final BlockType BRAIN_CORAL_WALL_FAN = new BlockType(628, "Brain Coral Wall Fan", "brain_coral_wall_fan", 0, 0, 9858, 9865, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9858, true, true, 1, 0, Material.find("brain_coral_wall_fan"), List.of(Key.minecraft("default")));
    public static final BlockType BUBBLE_CORAL_WALL_FAN = new BlockType(629, "Bubble Coral Wall Fan", "bubble_coral_wall_fan", 0, 0, 9866, 9873, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9866, true, true, 1, 0, Material.find("bubble_coral_wall_fan"), List.of(Key.minecraft("default")));
    public static final BlockType FIRE_CORAL_WALL_FAN = new BlockType(630, "Fire Coral Wall Fan", "fire_coral_wall_fan", 0, 0, 9874, 9881, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9874, true, true, 1, 0, Material.find("fire_coral_wall_fan"), List.of(Key.minecraft("default")));
    public static final BlockType HORN_CORAL_WALL_FAN = new BlockType(631, "Horn Coral Wall Fan", "horn_coral_wall_fan", 0, 0, 9882, 9889, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9882, true, true, 1, 0, Material.find("horn_coral_wall_fan"), List.of(Key.minecraft("default")));
    public static final BlockType SEA_PICKLE = new BlockType(632, "Sea Pickle", "sea_pickle", 0, 0, 9890, 9897, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9890, true, true, 1, 6, Material.find("sea_pickle"), List.of(Key.minecraft("default")));
    public static final BlockType BLUE_ICE = new BlockType(633, "Blue Ice", "blue_ice", 2.8, 2.8, 9898, 9898, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9898, true, false, 15, 0, Material.find("blue_ice"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CONDUIT = new BlockType(634, "Conduit", "conduit", 3, 3, 9899, 9900, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9899, true, true, 1, 15, Material.find("conduit"), List.of(Key.minecraft("default")));
    public static final BlockType BAMBOO_SAPLING = new BlockType(635, "Bamboo Shoot", "bamboo_sapling", 1, 1, 9901, 9901, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9901, true, true, 0, 0, Material.find("bamboo_sapling"), List.of(Key.minecraft("default")));
    public static final BlockType BAMBOO = new BlockType(636, "Bamboo", "bamboo", 1, 1, 9902, 9913, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9902, true, true, 0, 0, Material.find("bamboo"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType POTTED_BAMBOO = new BlockType(637, "Potted Bamboo", "potted_bamboo", 0, 0, 9914, 9914, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9914, true, true, 0, 0, Material.find("potted_bamboo"), List.of(Key.minecraft("default")));
    public static final BlockType VOID_AIR = new BlockType(638, "Void Air", "void_air", 0, 0, 9915, 9915, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9915, true, true, 0, 0, Material.find("void_air"), List.of(Key.minecraft("default")));
    public static final BlockType CAVE_AIR = new BlockType(639, "Cave Air", "cave_air", 0, 0, 9916, 9916, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9916, true, true, 0, 0, Material.find("cave_air"), List.of(Key.minecraft("default")));
    public static final BlockType BUBBLE_COLUMN = new BlockType(640, "Bubble Column", "bubble_column", 0, 0, 9917, 9918, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 9917, true, true, 1, 0, Material.find("bubble_column"), List.of(Key.minecraft("default")));
    public static final BlockType POLISHED_GRANITE_STAIRS = new BlockType(641, "Polished Granite Stairs", "polished_granite_stairs", 1.5, 6, 9919, 9998, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 9930, true, false, 0, 0, Material.find("polished_granite_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SMOOTH_RED_SANDSTONE_STAIRS = new BlockType(642, "Smooth Red Sandstone Stairs", "smooth_red_sandstone_stairs", 2, 6, 9999, 10078, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 10010, true, false, 0, 0, Material.find("smooth_red_sandstone_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType MOSSY_STONE_BRICK_STAIRS = new BlockType(643, "Mossy Stone Brick Stairs", "mossy_stone_brick_stairs", 1.5, 6, 10079, 10158, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 10090, true, false, 0, 0, Material.find("mossy_stone_brick_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_DIORITE_STAIRS = new BlockType(644, "Polished Diorite Stairs", "polished_diorite_stairs", 1.5, 6, 10159, 10238, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 10170, true, false, 0, 0, Material.find("polished_diorite_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType MOSSY_COBBLESTONE_STAIRS = new BlockType(645, "Mossy Cobblestone Stairs", "mossy_cobblestone_stairs", 2, 6, 10239, 10318, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 10250, true, false, 0, 0, Material.find("mossy_cobblestone_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType END_STONE_BRICK_STAIRS = new BlockType(646, "End Stone Brick Stairs", "end_stone_brick_stairs", 3, 9, 10319, 10398, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 10330, true, false, 0, 0, Material.find("end_stone_brick_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType STONE_STAIRS = new BlockType(647, "Stone Stairs", "stone_stairs", 1.5, 6, 10399, 10478, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 10410, true, false, 0, 0, Material.find("stone_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SMOOTH_SANDSTONE_STAIRS = new BlockType(648, "Smooth Sandstone Stairs", "smooth_sandstone_stairs", 2, 6, 10479, 10558, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 10490, true, false, 0, 0, Material.find("smooth_sandstone_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SMOOTH_QUARTZ_STAIRS = new BlockType(649, "Smooth Quartz Stairs", "smooth_quartz_stairs", 2, 6, 10559, 10638, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 10570, true, false, 0, 0, Material.find("smooth_quartz_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType GRANITE_STAIRS = new BlockType(650, "Granite Stairs", "granite_stairs", 1.5, 6, 10639, 10718, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 10650, true, false, 0, 0, Material.find("granite_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType ANDESITE_STAIRS = new BlockType(651, "Andesite Stairs", "andesite_stairs", 1.5, 6, 10719, 10798, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 10730, true, false, 0, 0, Material.find("andesite_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType RED_NETHER_BRICK_STAIRS = new BlockType(652, "Red Nether Brick Stairs", "red_nether_brick_stairs", 2, 6, 10799, 10878, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 10810, true, false, 0, 0, Material.find("red_nether_brick_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_ANDESITE_STAIRS = new BlockType(653, "Polished Andesite Stairs", "polished_andesite_stairs", 1.5, 6, 10879, 10958, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 10890, true, false, 0, 0, Material.find("polished_andesite_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DIORITE_STAIRS = new BlockType(654, "Diorite Stairs", "diorite_stairs", 1.5, 6, 10959, 11038, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 10970, true, false, 0, 0, Material.find("diorite_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_GRANITE_SLAB = new BlockType(655, "Polished Granite Slab", "polished_granite_slab", 1.5, 6, 11039, 11044, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 11042, true, false, 0, 0, Material.find("polished_granite_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SMOOTH_RED_SANDSTONE_SLAB = new BlockType(656, "Smooth Red Sandstone Slab", "smooth_red_sandstone_slab", 2, 6, 11045, 11050, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 11048, true, false, 0, 0, Material.find("smooth_red_sandstone_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType MOSSY_STONE_BRICK_SLAB = new BlockType(657, "Mossy Stone Brick Slab", "mossy_stone_brick_slab", 1.5, 6, 11051, 11056, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 11054, true, false, 0, 0, Material.find("mossy_stone_brick_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_DIORITE_SLAB = new BlockType(658, "Polished Diorite Slab", "polished_diorite_slab", 1.5, 6, 11057, 11062, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 11060, true, false, 0, 0, Material.find("polished_diorite_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType MOSSY_COBBLESTONE_SLAB = new BlockType(659, "Mossy Cobblestone Slab", "mossy_cobblestone_slab", 2, 6, 11063, 11068, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 11066, true, false, 0, 0, Material.find("mossy_cobblestone_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType END_STONE_BRICK_SLAB = new BlockType(660, "End Stone Brick Slab", "end_stone_brick_slab", 3, 9, 11069, 11074, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 11072, true, false, 0, 0, Material.find("end_stone_brick_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SMOOTH_SANDSTONE_SLAB = new BlockType(661, "Smooth Sandstone Slab", "smooth_sandstone_slab", 2, 6, 11075, 11080, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 11078, true, false, 0, 0, Material.find("smooth_sandstone_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SMOOTH_QUARTZ_SLAB = new BlockType(662, "Smooth Quartz Slab", "smooth_quartz_slab", 2, 6, 11081, 11086, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 11084, true, false, 0, 0, Material.find("smooth_quartz_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType GRANITE_SLAB = new BlockType(663, "Granite Slab", "granite_slab", 1.5, 6, 11087, 11092, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 11090, true, false, 0, 0, Material.find("granite_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType ANDESITE_SLAB = new BlockType(664, "Andesite Slab", "andesite_slab", 1.5, 6, 11093, 11098, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 11096, true, false, 0, 0, Material.find("andesite_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType RED_NETHER_BRICK_SLAB = new BlockType(665, "Red Nether Brick Slab", "red_nether_brick_slab", 2, 6, 11099, 11104, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 11102, true, false, 0, 0, Material.find("red_nether_brick_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_ANDESITE_SLAB = new BlockType(666, "Polished Andesite Slab", "polished_andesite_slab", 1.5, 6, 11105, 11110, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 11108, true, false, 0, 0, Material.find("polished_andesite_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DIORITE_SLAB = new BlockType(667, "Diorite Slab", "diorite_slab", 1.5, 6, 11111, 11116, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 11114, true, false, 0, 0, Material.find("diorite_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BRICK_WALL = new BlockType(668, "Brick Wall", "brick_wall", 2, 6, 11117, 11440, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 11120, true, false, 0, 0, Material.find("brick_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType PRISMARINE_WALL = new BlockType(669, "Prismarine Wall", "prismarine_wall", 1.5, 6, 11441, 11764, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 11444, true, false, 0, 0, Material.find("prismarine_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType RED_SANDSTONE_WALL = new BlockType(670, "Red Sandstone Wall", "red_sandstone_wall", 0.8, 0.8, 11765, 12088, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 11768, true, false, 0, 0, Material.find("red_sandstone_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType MOSSY_STONE_BRICK_WALL = new BlockType(671, "Mossy Stone Brick Wall", "mossy_stone_brick_wall", 1.5, 6, 12089, 12412, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 12092, true, false, 0, 0, Material.find("mossy_stone_brick_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType GRANITE_WALL = new BlockType(672, "Granite Wall", "granite_wall", 1.5, 6, 12413, 12736, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 12416, true, false, 0, 0, Material.find("granite_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType STONE_BRICK_WALL = new BlockType(673, "Stone Brick Wall", "stone_brick_wall", 1.5, 6, 12737, 13060, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 12740, true, false, 0, 0, Material.find("stone_brick_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType NETHER_BRICK_WALL = new BlockType(674, "Nether Brick Wall", "nether_brick_wall", 2, 6, 13061, 13384, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 13064, true, false, 0, 0, Material.find("nether_brick_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType ANDESITE_WALL = new BlockType(675, "Andesite Wall", "andesite_wall", 1.5, 6, 13385, 13708, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 13388, true, false, 0, 0, Material.find("andesite_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType RED_NETHER_BRICK_WALL = new BlockType(676, "Red Nether Brick Wall", "red_nether_brick_wall", 2, 6, 13709, 14032, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 13712, true, false, 0, 0, Material.find("red_nether_brick_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SANDSTONE_WALL = new BlockType(677, "Sandstone Wall", "sandstone_wall", 0.8, 0.8, 14033, 14356, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 14036, true, false, 0, 0, Material.find("sandstone_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType END_STONE_BRICK_WALL = new BlockType(678, "End Stone Brick Wall", "end_stone_brick_wall", 3, 9, 14357, 14680, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 14360, true, false, 0, 0, Material.find("end_stone_brick_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DIORITE_WALL = new BlockType(679, "Diorite Wall", "diorite_wall", 1.5, 6, 14681, 15004, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 14684, true, false, 0, 0, Material.find("diorite_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SCAFFOLDING = new BlockType(680, "Scaffolding", "scaffolding", 0, 0, 15005, 15036, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15036, true, true, 0, 0, Material.find("scaffolding"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType LOOM = new BlockType(681, "Loom", "loom", 2.5, 2.5, 15037, 15040, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15037, true, false, 15, 0, Material.find("loom"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BARREL = new BlockType(682, "Barrel", "barrel", 2.5, 2.5, 15041, 15052, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15042, true, false, 15, 0, Material.find("barrel"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType SMOKER = new BlockType(683, "Smoker", "smoker", 3.5, 3.5, 15053, 15060, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 15054, true, false, 15, 0, Material.find("smoker"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BLAST_FURNACE = new BlockType(684, "Blast Furnace", "blast_furnace", 3.5, 3.5, 15061, 15068, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 15062, true, false, 15, 0, Material.find("blast_furnace"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CARTOGRAPHY_TABLE = new BlockType(685, "Cartography Table", "cartography_table", 2.5, 2.5, 15069, 15069, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15069, true, false, 15, 0, Material.find("cartography_table"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType FLETCHING_TABLE = new BlockType(686, "Fletching Table", "fletching_table", 2.5, 2.5, 15070, 15070, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15070, true, false, 15, 0, Material.find("fletching_table"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType GRINDSTONE = new BlockType(687, "Grindstone", "grindstone", 2, 6, 15071, 15082, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 15075, true, false, 0, 0, Material.find("grindstone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType LECTERN = new BlockType(688, "Lectern", "lectern", 2.5, 2.5, 15083, 15098, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15086, true, false, 0, 0, Material.find("lectern"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType SMITHING_TABLE = new BlockType(689, "Smithing Table", "smithing_table", 2.5, 2.5, 15099, 15099, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15099, true, false, 15, 0, Material.find("smithing_table"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType STONECUTTER = new BlockType(690, "Stonecutter", "stonecutter", 3.5, 3.5, 15100, 15103, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 15100, true, false, 0, 0, Material.find("stonecutter"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BELL = new BlockType(691, "Bell", "bell", 5, 5, 15104, 15135, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 15105, true, false, 0, 0, Material.find("bell"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType LANTERN = new BlockType(692, "Lantern", "lantern", 3.5, 3.5, 15136, 15139, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 15139, true, true, 0, 15, Material.find("lantern"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SOUL_LANTERN = new BlockType(693, "Soul Lantern", "soul_lantern", 3.5, 3.5, 15140, 15143, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 15143, true, true, 0, 10, Material.find("soul_lantern"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CAMPFIRE = new BlockType(694, "Campfire", "campfire", 2, 2, 15144, 15175, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15147, true, true, 0, 15, Material.find("campfire"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType SOUL_CAMPFIRE = new BlockType(695, "Soul Campfire", "soul_campfire", 2, 2, 15176, 15207, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15179, true, true, 0, 10, Material.find("soul_campfire"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType SWEET_BERRY_BUSH = new BlockType(696, "Sweet Berry Bush", "sweet_berry_bush", 0, 0, 15208, 15211, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15208, true, true, 0, 0, Material.find("sweet_berry_bush"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType WARPED_STEM = new BlockType(697, "Warped Stem", "warped_stem", 2, 2, 15212, 15214, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15213, true, false, 15, 0, Material.find("warped_stem"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType STRIPPED_WARPED_STEM = new BlockType(698, "Stripped Warped Stem", "stripped_warped_stem", 2, 2, 15215, 15217, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15216, true, false, 15, 0, Material.find("stripped_warped_stem"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType WARPED_HYPHAE = new BlockType(699, "Warped Hyphae", "warped_hyphae", 2, 2, 15218, 15220, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15219, true, false, 15, 0, Material.find("warped_hyphae"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType STRIPPED_WARPED_HYPHAE = new BlockType(700, "Stripped Warped Hyphae", "stripped_warped_hyphae", 2, 2, 15221, 15223, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15222, true, false, 15, 0, Material.find("stripped_warped_hyphae"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType WARPED_NYLIUM = new BlockType(701, "Warped Nylium", "warped_nylium", 0.4, 0.4, 15224, 15224, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 15224, true, false, 15, 0, Material.find("warped_nylium"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WARPED_FUNGUS = new BlockType(702, "Warped Fungus", "warped_fungus", 0, 0, 15225, 15225, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15225, true, true, 0, 0, Material.find("warped_fungus"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType WARPED_WART_BLOCK = new BlockType(703, "Warped Wart Block", "warped_wart_block", 1, 1, 15226, 15226, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15226, true, false, 15, 0, Material.find("warped_wart_block"), List.of(Key.minecraft("mineable/hoe")));
    public static final BlockType WARPED_ROOTS = new BlockType(704, "Warped Roots", "warped_roots", 0, 0, 15227, 15227, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15227, true, true, 0, 0, Material.find("warped_roots"), List.of(Key.minecraft("default")));
    public static final BlockType NETHER_SPROUTS = new BlockType(705, "Nether Sprouts", "nether_sprouts", 0, 0, 15228, 15228, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15228, true, true, 0, 0, Material.find("nether_sprouts"), List.of(Key.minecraft("default")));
    public static final BlockType CRIMSON_STEM = new BlockType(706, "Crimson Stem", "crimson_stem", 2, 2, 15229, 15231, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15230, true, false, 15, 0, Material.find("crimson_stem"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType STRIPPED_CRIMSON_STEM = new BlockType(707, "Stripped Crimson Stem", "stripped_crimson_stem", 2, 2, 15232, 15234, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15233, true, false, 15, 0, Material.find("stripped_crimson_stem"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType CRIMSON_HYPHAE = new BlockType(708, "Crimson Hyphae", "crimson_hyphae", 2, 2, 15235, 15237, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15236, true, false, 15, 0, Material.find("crimson_hyphae"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType STRIPPED_CRIMSON_HYPHAE = new BlockType(709, "Stripped Crimson Hyphae", "stripped_crimson_hyphae", 2, 2, 15238, 15240, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15239, true, false, 15, 0, Material.find("stripped_crimson_hyphae"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType CRIMSON_NYLIUM = new BlockType(710, "Crimson Nylium", "crimson_nylium", 0.4, 0.4, 15241, 15241, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 15241, true, false, 15, 0, Material.find("crimson_nylium"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CRIMSON_FUNGUS = new BlockType(711, "Crimson Fungus", "crimson_fungus", 0, 0, 15242, 15242, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15242, true, true, 0, 0, Material.find("crimson_fungus"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType SHROOMLIGHT = new BlockType(712, "Shroomlight", "shroomlight", 1, 1, 15243, 15243, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15243, true, false, 15, 15, Material.find("shroomlight"), List.of(Key.minecraft("mineable/hoe")));
    public static final BlockType WEEPING_VINES = new BlockType(713, "Weeping Vines", "weeping_vines", 0, 0, 15244, 15269, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15244, true, true, 0, 0, Material.find("weeping_vines"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType WEEPING_VINES_PLANT = new BlockType(714, "Weeping Vines Plant", "weeping_vines_plant", 0, 0, 15270, 15270, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15270, true, true, 0, 0, Material.find("weeping_vines_plant"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType TWISTING_VINES = new BlockType(715, "Twisting Vines", "twisting_vines", 0, 0, 15271, 15296, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15271, true, true, 0, 0, Material.find("twisting_vines"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType TWISTING_VINES_PLANT = new BlockType(716, "Twisting Vines Plant", "twisting_vines_plant", 0, 0, 15297, 15297, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15297, true, true, 0, 0, Material.find("twisting_vines_plant"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType CRIMSON_ROOTS = new BlockType(717, "Crimson Roots", "crimson_roots", 0, 0, 15298, 15298, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15298, true, true, 0, 0, Material.find("crimson_roots"), List.of(Key.minecraft("default")));
    public static final BlockType CRIMSON_PLANKS = new BlockType(718, "Crimson Planks", "crimson_planks", 2, 3, 15299, 15299, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15299, true, false, 15, 0, Material.find("crimson_planks"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType WARPED_PLANKS = new BlockType(719, "Warped Planks", "warped_planks", 2, 3, 15300, 15300, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15300, true, false, 15, 0, Material.find("warped_planks"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType CRIMSON_SLAB = new BlockType(720, "Crimson Slab", "crimson_slab", 2, 3, 15301, 15306, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15304, true, false, 0, 0, Material.find("crimson_slab"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType WARPED_SLAB = new BlockType(721, "Warped Slab", "warped_slab", 2, 3, 15307, 15312, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15310, true, false, 0, 0, Material.find("warped_slab"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType CRIMSON_PRESSURE_PLATE = new BlockType(722, "Crimson Pressure Plate", "crimson_pressure_plate", 0.5, 0.5, 15313, 15314, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15314, true, true, 0, 0, Material.find("crimson_pressure_plate"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType WARPED_PRESSURE_PLATE = new BlockType(723, "Warped Pressure Plate", "warped_pressure_plate", 0.5, 0.5, 15315, 15316, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15316, true, true, 0, 0, Material.find("warped_pressure_plate"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType CRIMSON_FENCE = new BlockType(724, "Crimson Fence", "crimson_fence", 2, 3, 15317, 15348, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15348, true, false, 0, 0, Material.find("crimson_fence"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType WARPED_FENCE = new BlockType(725, "Warped Fence", "warped_fence", 2, 3, 15349, 15380, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15380, true, false, 0, 0, Material.find("warped_fence"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType CRIMSON_TRAPDOOR = new BlockType(726, "Crimson Trapdoor", "crimson_trapdoor", 3, 3, 15381, 15444, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15396, true, true, 0, 0, Material.find("crimson_trapdoor"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType WARPED_TRAPDOOR = new BlockType(727, "Warped Trapdoor", "warped_trapdoor", 3, 3, 15445, 15508, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15460, true, true, 0, 0, Material.find("warped_trapdoor"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType CRIMSON_FENCE_GATE = new BlockType(728, "Crimson Fence Gate", "crimson_fence_gate", 2, 3, 15509, 15540, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15516, true, false, 0, 0, Material.find("crimson_fence_gate"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType WARPED_FENCE_GATE = new BlockType(729, "Warped Fence Gate", "warped_fence_gate", 2, 3, 15541, 15572, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15548, true, false, 0, 0, Material.find("warped_fence_gate"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType CRIMSON_STAIRS = new BlockType(730, "Crimson Stairs", "crimson_stairs", 2, 3, 15573, 15652, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15584, true, false, 0, 0, Material.find("crimson_stairs"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType WARPED_STAIRS = new BlockType(731, "Warped Stairs", "warped_stairs", 2, 3, 15653, 15732, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15664, true, false, 0, 0, Material.find("warped_stairs"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType CRIMSON_BUTTON = new BlockType(732, "Crimson Button", "crimson_button", 0.5, 0.5, 15733, 15756, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15742, true, true, 0, 0, Material.find("crimson_button"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType WARPED_BUTTON = new BlockType(733, "Warped Button", "warped_button", 0.5, 0.5, 15757, 15780, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15766, true, true, 0, 0, Material.find("warped_button"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType CRIMSON_DOOR = new BlockType(734, "Crimson Door", "crimson_door", 3, 3, 15781, 15844, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15792, true, true, 0, 0, Material.find("crimson_door"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType WARPED_DOOR = new BlockType(735, "Warped Door", "warped_door", 3, 3, 15845, 15908, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15856, true, true, 0, 0, Material.find("warped_door"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType CRIMSON_SIGN = new BlockType(736, "Crimson Sign", "crimson_sign", 1, 1, 15909, 15940, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15910, true, true, 0, 0, Material.find("crimson_sign"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType WARPED_SIGN = new BlockType(737, "Warped Sign", "warped_sign", 1, 1, 15941, 15972, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15942, true, true, 0, 0, Material.find("warped_sign"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType CRIMSON_WALL_SIGN = new BlockType(738, "Crimson Wall Sign", "crimson_wall_sign", 1, 1, 15973, 15980, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15974, true, true, 0, 0, Material.find("crimson_wall_sign"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType WARPED_WALL_SIGN = new BlockType(739, "Warped Wall Sign", "warped_wall_sign", 1, 1, 15981, 15988, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15982, true, true, 0, 0, Material.find("warped_wall_sign"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType STRUCTURE_BLOCK = new BlockType(740, "Structure Block", "structure_block", 0, 3600000, 15989, 15992, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 15990, false, false, 15, 0, Material.find("structure_block"), List.of(Key.minecraft("default")));
    public static final BlockType JIGSAW = new BlockType(741, "Jigsaw Block", "jigsaw", 0, 3600000, 15993, 16004, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 16003, false, false, 15, 0, Material.find("jigsaw"), List.of(Key.minecraft("default")));
    public static final BlockType COMPOSTER = new BlockType(742, "Composter", "composter", 0.6, 0.6, 16005, 16013, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 16005, true, false, 0, 0, Material.find("composter"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType TARGET = new BlockType(743, "Target", "target", 0.5, 0.5, 16014, 16029, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 16014, true, false, 15, 0, Material.find("target"), List.of(Key.minecraft("mineable/hoe")));
    public static final BlockType BEE_NEST = new BlockType(744, "Bee Nest", "bee_nest", 0.3, 0.3, 16030, 16053, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 16030, true, false, 15, 0, Material.find("bee_nest"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType BEEHIVE = new BlockType(745, "Beehive", "beehive", 0.6, 0.6, 16054, 16077, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 16054, true, false, 15, 0, Material.find("beehive"), List.of(Key.minecraft("mineable/axe")));
    public static final BlockType HONEY_BLOCK = new BlockType(746, "Honey Block", "honey_block", 0, 0, 16078, 16078, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 16078, true, true, 1, 0, Material.find("honey_block"), List.of(Key.minecraft("default")));
    public static final BlockType HONEYCOMB_BLOCK = new BlockType(747, "Honeycomb Block", "honeycomb_block", 0.6, 0.6, 16079, 16079, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 16079, true, false, 15, 0, Material.find("honeycomb_block"), List.of(Key.minecraft("default")));
    public static final BlockType NETHERITE_BLOCK = new BlockType(748, "Block of Netherite", "netherite_block", 50, 1200, 16080, 16080, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(721, true); map.put(726, true); return map; }, 16080, true, false, 15, 0, Material.find("netherite_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType ANCIENT_DEBRIS = new BlockType(749, "Ancient Debris", "ancient_debris", 30, 1200, 16081, 16081, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(721, true); map.put(726, true); return map; }, 16081, true, false, 15, 0, Material.find("ancient_debris"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CRYING_OBSIDIAN = new BlockType(750, "Crying Obsidian", "crying_obsidian", 50, 1200, 16082, 16082, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(721, true); map.put(726, true); return map; }, 16082, true, false, 15, 10, Material.find("crying_obsidian"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType RESPAWN_ANCHOR = new BlockType(751, "Respawn Anchor", "respawn_anchor", 50, 1200, 16083, 16087, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(721, true); map.put(726, true); return map; }, 16083, true, false, 15, 0, Material.find("respawn_anchor"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POTTED_CRIMSON_FUNGUS = new BlockType(752, "Potted Crimson Fungus", "potted_crimson_fungus", 0, 0, 16088, 16088, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 16088, true, true, 0, 0, Material.find("potted_crimson_fungus"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_WARPED_FUNGUS = new BlockType(753, "Potted Warped Fungus", "potted_warped_fungus", 0, 0, 16089, 16089, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 16089, true, true, 0, 0, Material.find("potted_warped_fungus"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_CRIMSON_ROOTS = new BlockType(754, "Potted Crimson Roots", "potted_crimson_roots", 0, 0, 16090, 16090, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 16090, true, true, 0, 0, Material.find("potted_crimson_roots"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_WARPED_ROOTS = new BlockType(755, "Potted Warped Roots", "potted_warped_roots", 0, 0, 16091, 16091, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 16091, true, true, 0, 0, Material.find("potted_warped_roots"), List.of(Key.minecraft("default")));
    public static final BlockType LODESTONE = new BlockType(756, "Lodestone", "lodestone", 3.5, 3.5, 16092, 16092, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 16092, true, false, 15, 0, Material.find("lodestone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BLACKSTONE = new BlockType(757, "Blackstone", "blackstone", 1.5, 6, 16093, 16093, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 16093, true, false, 15, 0, Material.find("blackstone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BLACKSTONE_STAIRS = new BlockType(758, "Blackstone Stairs", "blackstone_stairs", 1.5, 6, 16094, 16173, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 16105, true, false, 0, 0, Material.find("blackstone_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BLACKSTONE_WALL = new BlockType(759, "Blackstone Wall", "blackstone_wall", 1.5, 6, 16174, 16497, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 16177, true, false, 0, 0, Material.find("blackstone_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BLACKSTONE_SLAB = new BlockType(760, "Blackstone Slab", "blackstone_slab", 2, 6, 16498, 16503, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 16501, true, false, 0, 0, Material.find("blackstone_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_BLACKSTONE = new BlockType(761, "Polished Blackstone", "polished_blackstone", 2, 6, 16504, 16504, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 16504, true, false, 15, 0, Material.find("polished_blackstone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_BLACKSTONE_BRICKS = new BlockType(762, "Polished Blackstone Bricks", "polished_blackstone_bricks", 1.5, 6, 16505, 16505, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 16505, true, false, 15, 0, Material.find("polished_blackstone_bricks"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CRACKED_POLISHED_BLACKSTONE_BRICKS = new BlockType(763, "Cracked Polished Blackstone Bricks", "cracked_polished_blackstone_bricks", 1.5, 6, 16506, 16506, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 16506, true, false, 15, 0, Material.find("cracked_polished_blackstone_bricks"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CHISELED_POLISHED_BLACKSTONE = new BlockType(764, "Chiseled Polished Blackstone", "chiseled_polished_blackstone", 1.5, 6, 16507, 16507, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 16507, true, false, 15, 0, Material.find("chiseled_polished_blackstone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_BLACKSTONE_BRICK_SLAB = new BlockType(765, "Polished Blackstone Brick Slab", "polished_blackstone_brick_slab", 2, 6, 16508, 16513, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 16511, true, false, 0, 0, Material.find("polished_blackstone_brick_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_BLACKSTONE_BRICK_STAIRS = new BlockType(766, "Polished Blackstone Brick Stairs", "polished_blackstone_brick_stairs", 1.5, 6, 16514, 16593, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 16525, true, false, 0, 0, Material.find("polished_blackstone_brick_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_BLACKSTONE_BRICK_WALL = new BlockType(767, "Polished Blackstone Brick Wall", "polished_blackstone_brick_wall", 1.5, 6, 16594, 16917, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 16597, true, false, 0, 0, Material.find("polished_blackstone_brick_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType GILDED_BLACKSTONE = new BlockType(768, "Gilded Blackstone", "gilded_blackstone", 1.5, 6, 16918, 16918, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 16918, true, false, 15, 0, Material.find("gilded_blackstone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_BLACKSTONE_STAIRS = new BlockType(769, "Polished Blackstone Stairs", "polished_blackstone_stairs", 2, 6, 16919, 16998, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 16930, true, false, 0, 0, Material.find("polished_blackstone_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_BLACKSTONE_SLAB = new BlockType(770, "Polished Blackstone Slab", "polished_blackstone_slab", 2, 6, 16999, 17004, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17002, true, false, 0, 0, Material.find("polished_blackstone_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_BLACKSTONE_PRESSURE_PLATE = new BlockType(771, "Polished Blackstone Pressure Plate", "polished_blackstone_pressure_plate", 0.5, 0.5, 17005, 17006, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17006, true, true, 0, 0, Material.find("polished_blackstone_pressure_plate"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_BLACKSTONE_BUTTON = new BlockType(772, "Polished Blackstone Button", "polished_blackstone_button", 0.5, 0.5, 17007, 17030, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17016, true, true, 0, 0, Material.find("polished_blackstone_button"), List.of(Key.minecraft("default")));
    public static final BlockType POLISHED_BLACKSTONE_WALL = new BlockType(773, "Polished Blackstone Wall", "polished_blackstone_wall", 2, 6, 17031, 17354, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17034, true, false, 0, 0, Material.find("polished_blackstone_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CHISELED_NETHER_BRICKS = new BlockType(774, "Chiseled Nether Bricks", "chiseled_nether_bricks", 2, 6, 17355, 17355, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17355, true, false, 15, 0, Material.find("chiseled_nether_bricks"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CRACKED_NETHER_BRICKS = new BlockType(775, "Cracked Nether Bricks", "cracked_nether_bricks", 2, 6, 17356, 17356, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17356, true, false, 15, 0, Material.find("cracked_nether_bricks"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType QUARTZ_BRICKS = new BlockType(776, "Quartz Bricks", "quartz_bricks", 0.8, 0.8, 17357, 17357, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17357, true, false, 15, 0, Material.find("quartz_bricks"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CANDLE = new BlockType(777, "Candle", "candle", 0.1, 0.1, 17358, 17373, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17361, true, true, 0, 0, Material.find("candle"), List.of(Key.minecraft("default")));
    public static final BlockType WHITE_CANDLE = new BlockType(778, "White Candle", "white_candle", 0.1, 0.1, 17374, 17389, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17377, true, true, 0, 0, Material.find("white_candle"), List.of(Key.minecraft("default")));
    public static final BlockType ORANGE_CANDLE = new BlockType(779, "Orange Candle", "orange_candle", 0.1, 0.1, 17390, 17405, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17393, true, true, 0, 0, Material.find("orange_candle"), List.of(Key.minecraft("default")));
    public static final BlockType MAGENTA_CANDLE = new BlockType(780, "Magenta Candle", "magenta_candle", 0.1, 0.1, 17406, 17421, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17409, true, true, 0, 0, Material.find("magenta_candle"), List.of(Key.minecraft("default")));
    public static final BlockType LIGHT_BLUE_CANDLE = new BlockType(781, "Light Blue Candle", "light_blue_candle", 0.1, 0.1, 17422, 17437, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17425, true, true, 0, 0, Material.find("light_blue_candle"), List.of(Key.minecraft("default")));
    public static final BlockType YELLOW_CANDLE = new BlockType(782, "Yellow Candle", "yellow_candle", 0.1, 0.1, 17438, 17453, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17441, true, true, 0, 0, Material.find("yellow_candle"), List.of(Key.minecraft("default")));
    public static final BlockType LIME_CANDLE = new BlockType(783, "Lime Candle", "lime_candle", 0.1, 0.1, 17454, 17469, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17457, true, true, 0, 0, Material.find("lime_candle"), List.of(Key.minecraft("default")));
    public static final BlockType PINK_CANDLE = new BlockType(784, "Pink Candle", "pink_candle", 0.1, 0.1, 17470, 17485, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17473, true, true, 0, 0, Material.find("pink_candle"), List.of(Key.minecraft("default")));
    public static final BlockType GRAY_CANDLE = new BlockType(785, "Gray Candle", "gray_candle", 0.1, 0.1, 17486, 17501, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17489, true, true, 0, 0, Material.find("gray_candle"), List.of(Key.minecraft("default")));
    public static final BlockType LIGHT_GRAY_CANDLE = new BlockType(786, "Light Gray Candle", "light_gray_candle", 0.1, 0.1, 17502, 17517, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17505, true, true, 0, 0, Material.find("light_gray_candle"), List.of(Key.minecraft("default")));
    public static final BlockType CYAN_CANDLE = new BlockType(787, "Cyan Candle", "cyan_candle", 0.1, 0.1, 17518, 17533, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17521, true, true, 0, 0, Material.find("cyan_candle"), List.of(Key.minecraft("default")));
    public static final BlockType PURPLE_CANDLE = new BlockType(788, "Purple Candle", "purple_candle", 0.1, 0.1, 17534, 17549, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17537, true, true, 0, 0, Material.find("purple_candle"), List.of(Key.minecraft("default")));
    public static final BlockType BLUE_CANDLE = new BlockType(789, "Blue Candle", "blue_candle", 0.1, 0.1, 17550, 17565, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17553, true, true, 0, 0, Material.find("blue_candle"), List.of(Key.minecraft("default")));
    public static final BlockType BROWN_CANDLE = new BlockType(790, "Brown Candle", "brown_candle", 0.1, 0.1, 17566, 17581, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17569, true, true, 0, 0, Material.find("brown_candle"), List.of(Key.minecraft("default")));
    public static final BlockType GREEN_CANDLE = new BlockType(791, "Green Candle", "green_candle", 0.1, 0.1, 17582, 17597, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17585, true, true, 0, 0, Material.find("green_candle"), List.of(Key.minecraft("default")));
    public static final BlockType RED_CANDLE = new BlockType(792, "Red Candle", "red_candle", 0.1, 0.1, 17598, 17613, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17601, true, true, 0, 0, Material.find("red_candle"), List.of(Key.minecraft("default")));
    public static final BlockType BLACK_CANDLE = new BlockType(793, "Black Candle", "black_candle", 0.1, 0.1, 17614, 17629, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17617, true, true, 0, 0, Material.find("black_candle"), List.of(Key.minecraft("default")));
    public static final BlockType CANDLE_CAKE = new BlockType(794, "Cake with Candle", "candle_cake", 0, 0, 17630, 17631, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17631, true, false, 0, 0, Material.find("candle_cake"), List.of(Key.minecraft("default")));
    public static final BlockType WHITE_CANDLE_CAKE = new BlockType(795, "Cake with White Candle", "white_candle_cake", 0, 0, 17632, 17633, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17633, true, false, 0, 0, Material.find("white_candle_cake"), List.of(Key.minecraft("default")));
    public static final BlockType ORANGE_CANDLE_CAKE = new BlockType(796, "Cake with Orange Candle", "orange_candle_cake", 0, 0, 17634, 17635, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17635, true, false, 0, 0, Material.find("orange_candle_cake"), List.of(Key.minecraft("default")));
    public static final BlockType MAGENTA_CANDLE_CAKE = new BlockType(797, "Cake with Magenta Candle", "magenta_candle_cake", 0, 0, 17636, 17637, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17637, true, false, 0, 0, Material.find("magenta_candle_cake"), List.of(Key.minecraft("default")));
    public static final BlockType LIGHT_BLUE_CANDLE_CAKE = new BlockType(798, "Cake with Light Blue Candle", "light_blue_candle_cake", 0, 0, 17638, 17639, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17639, true, false, 0, 0, Material.find("light_blue_candle_cake"), List.of(Key.minecraft("default")));
    public static final BlockType YELLOW_CANDLE_CAKE = new BlockType(799, "Cake with Yellow Candle", "yellow_candle_cake", 0, 0, 17640, 17641, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17641, true, false, 0, 0, Material.find("yellow_candle_cake"), List.of(Key.minecraft("default")));
    public static final BlockType LIME_CANDLE_CAKE = new BlockType(800, "Cake with Lime Candle", "lime_candle_cake", 0, 0, 17642, 17643, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17643, true, false, 0, 0, Material.find("lime_candle_cake"), List.of(Key.minecraft("default")));
    public static final BlockType PINK_CANDLE_CAKE = new BlockType(801, "Cake with Pink Candle", "pink_candle_cake", 0, 0, 17644, 17645, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17645, true, false, 0, 0, Material.find("pink_candle_cake"), List.of(Key.minecraft("default")));
    public static final BlockType GRAY_CANDLE_CAKE = new BlockType(802, "Cake with Gray Candle", "gray_candle_cake", 0, 0, 17646, 17647, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17647, true, false, 0, 0, Material.find("gray_candle_cake"), List.of(Key.minecraft("default")));
    public static final BlockType LIGHT_GRAY_CANDLE_CAKE = new BlockType(803, "Cake with Light Gray Candle", "light_gray_candle_cake", 0, 0, 17648, 17649, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17649, true, false, 0, 0, Material.find("light_gray_candle_cake"), List.of(Key.minecraft("default")));
    public static final BlockType CYAN_CANDLE_CAKE = new BlockType(804, "Cake with Cyan Candle", "cyan_candle_cake", 0, 0, 17650, 17651, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17651, true, false, 0, 0, Material.find("cyan_candle_cake"), List.of(Key.minecraft("default")));
    public static final BlockType PURPLE_CANDLE_CAKE = new BlockType(805, "Cake with Purple Candle", "purple_candle_cake", 0, 0, 17652, 17653, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17653, true, false, 0, 0, Material.find("purple_candle_cake"), List.of(Key.minecraft("default")));
    public static final BlockType BLUE_CANDLE_CAKE = new BlockType(806, "Cake with Blue Candle", "blue_candle_cake", 0, 0, 17654, 17655, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17655, true, false, 0, 0, Material.find("blue_candle_cake"), List.of(Key.minecraft("default")));
    public static final BlockType BROWN_CANDLE_CAKE = new BlockType(807, "Cake with Brown Candle", "brown_candle_cake", 0, 0, 17656, 17657, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17657, true, false, 0, 0, Material.find("brown_candle_cake"), List.of(Key.minecraft("default")));
    public static final BlockType GREEN_CANDLE_CAKE = new BlockType(808, "Cake with Green Candle", "green_candle_cake", 0, 0, 17658, 17659, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17659, true, false, 0, 0, Material.find("green_candle_cake"), List.of(Key.minecraft("default")));
    public static final BlockType RED_CANDLE_CAKE = new BlockType(809, "Cake with Red Candle", "red_candle_cake", 0, 0, 17660, 17661, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17661, true, false, 0, 0, Material.find("red_candle_cake"), List.of(Key.minecraft("default")));
    public static final BlockType BLACK_CANDLE_CAKE = new BlockType(810, "Cake with Black Candle", "black_candle_cake", 0, 0, 17662, 17663, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17663, true, false, 0, 0, Material.find("black_candle_cake"), List.of(Key.minecraft("default")));
    public static final BlockType AMETHYST_BLOCK = new BlockType(811, "Block of Amethyst", "amethyst_block", 1.5, 1.5, 17664, 17664, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17664, true, false, 15, 0, Material.find("amethyst_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType BUDDING_AMETHYST = new BlockType(812, "Budding Amethyst", "budding_amethyst", 1.5, 1.5, 17665, 17665, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17665, true, false, 15, 0, Material.find("budding_amethyst"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType AMETHYST_CLUSTER = new BlockType(813, "Amethyst Cluster", "amethyst_cluster", 1.5, 1.5, 17666, 17677, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17675, true, true, 0, 5, Material.find("amethyst_cluster"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType LARGE_AMETHYST_BUD = new BlockType(814, "Large Amethyst Bud", "large_amethyst_bud", 0, 0, 17678, 17689, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17687, true, true, 0, 4, Material.find("large_amethyst_bud"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType MEDIUM_AMETHYST_BUD = new BlockType(815, "Medium Amethyst Bud", "medium_amethyst_bud", 0, 0, 17690, 17701, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17699, true, true, 0, 2, Material.find("medium_amethyst_bud"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SMALL_AMETHYST_BUD = new BlockType(816, "Small Amethyst Bud", "small_amethyst_bud", 0, 0, 17702, 17713, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17711, true, true, 0, 1, Material.find("small_amethyst_bud"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType TUFF = new BlockType(817, "Tuff", "tuff", 1.5, 6, 17714, 17714, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17714, true, false, 15, 0, Material.find("tuff"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CALCITE = new BlockType(818, "Calcite", "calcite", 0.75, 0.75, 17715, 17715, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17715, true, false, 15, 0, Material.find("calcite"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType TINTED_GLASS = new BlockType(819, "Tinted Glass", "tinted_glass", 0, 0, 17716, 17716, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17716, true, true, 15, 0, Material.find("tinted_glass"), List.of(Key.minecraft("default")));
    public static final BlockType POWDER_SNOW = new BlockType(820, "Powder Snow", "powder_snow", 0.25, 0.25, 17717, 17717, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17717, true, false, 1, 0, Material.find("powder_snow"), List.of(Key.minecraft("default")));
    public static final BlockType SCULK_SENSOR = new BlockType(821, "Sculk Sensor", "sculk_sensor", 1.5, 1.5, 17718, 17813, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 17719, true, false, 0, 1, Material.find("sculk_sensor"), List.of(Key.minecraft("mineable/hoe")));
    public static final BlockType OXIDIZED_COPPER = new BlockType(822, "Oxidized Copper", "oxidized_copper", 3, 6, 17814, 17814, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17814, true, false, 15, 0, Material.find("oxidized_copper"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WEATHERED_COPPER = new BlockType(823, "Weathered Copper", "weathered_copper", 3, 6, 17815, 17815, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17815, true, false, 15, 0, Material.find("weathered_copper"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType EXPOSED_COPPER = new BlockType(824, "Exposed Copper", "exposed_copper", 3, 6, 17816, 17816, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17816, true, false, 15, 0, Material.find("exposed_copper"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType COPPER_BLOCK = new BlockType(825, "Block of Copper", "copper_block", 3, 6, 17817, 17817, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17817, true, false, 15, 0, Material.find("copper_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType COPPER_ORE = new BlockType(826, "Copper Ore", "copper_ore", 0, 0, 17818, 17818, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17818, true, false, 15, 0, Material.find("copper_ore"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEEPSLATE_COPPER_ORE = new BlockType(827, "Deepslate Copper Ore", "deepslate_copper_ore", 4.5, 3, 17819, 17819, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17819, true, false, 15, 0, Material.find("deepslate_copper_ore"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType OXIDIZED_CUT_COPPER = new BlockType(828, "Oxidized Cut Copper", "oxidized_cut_copper", 0, 0, 17820, 17820, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17820, true, false, 15, 0, Material.find("oxidized_cut_copper"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WEATHERED_CUT_COPPER = new BlockType(829, "Weathered Cut Copper", "weathered_cut_copper", 0, 0, 17821, 17821, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17821, true, false, 15, 0, Material.find("weathered_cut_copper"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType EXPOSED_CUT_COPPER = new BlockType(830, "Exposed Cut Copper", "exposed_cut_copper", 0, 0, 17822, 17822, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17822, true, false, 15, 0, Material.find("exposed_cut_copper"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CUT_COPPER = new BlockType(831, "Cut Copper", "cut_copper", 0, 0, 17823, 17823, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17823, true, false, 15, 0, Material.find("cut_copper"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType OXIDIZED_CUT_COPPER_STAIRS = new BlockType(832, "Oxidized Cut Copper Stairs", "oxidized_cut_copper_stairs", 0, 0, 17824, 17903, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17835, true, false, 0, 0, Material.find("oxidized_cut_copper_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WEATHERED_CUT_COPPER_STAIRS = new BlockType(833, "Weathered Cut Copper Stairs", "weathered_cut_copper_stairs", 0, 0, 17904, 17983, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17915, true, false, 0, 0, Material.find("weathered_cut_copper_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType EXPOSED_CUT_COPPER_STAIRS = new BlockType(834, "Exposed Cut Copper Stairs", "exposed_cut_copper_stairs", 0, 0, 17984, 18063, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 17995, true, false, 0, 0, Material.find("exposed_cut_copper_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CUT_COPPER_STAIRS = new BlockType(835, "Cut Copper Stairs", "cut_copper_stairs", 0, 0, 18064, 18143, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18075, true, false, 0, 0, Material.find("cut_copper_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType OXIDIZED_CUT_COPPER_SLAB = new BlockType(836, "Oxidized Cut Copper Slab", "oxidized_cut_copper_slab", 0, 0, 18144, 18149, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18147, true, false, 0, 0, Material.find("oxidized_cut_copper_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WEATHERED_CUT_COPPER_SLAB = new BlockType(837, "Weathered Cut Copper Slab", "weathered_cut_copper_slab", 0, 0, 18150, 18155, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18153, true, false, 0, 0, Material.find("weathered_cut_copper_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType EXPOSED_CUT_COPPER_SLAB = new BlockType(838, "Exposed Cut Copper Slab", "exposed_cut_copper_slab", 0, 0, 18156, 18161, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18159, true, false, 0, 0, Material.find("exposed_cut_copper_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CUT_COPPER_SLAB = new BlockType(839, "Cut Copper Slab", "cut_copper_slab", 0, 0, 18162, 18167, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18165, true, false, 0, 0, Material.find("cut_copper_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WAXED_COPPER_BLOCK = new BlockType(840, "Waxed Block of Copper", "waxed_copper_block", 0, 0, 18168, 18168, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18168, true, false, 15, 0, Material.find("waxed_copper_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WAXED_WEATHERED_COPPER = new BlockType(841, "Waxed Weathered Copper", "waxed_weathered_copper", 0, 0, 18169, 18169, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18169, true, false, 15, 0, Material.find("waxed_weathered_copper"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WAXED_EXPOSED_COPPER = new BlockType(842, "Waxed Exposed Copper", "waxed_exposed_copper", 0, 0, 18170, 18170, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18170, true, false, 15, 0, Material.find("waxed_exposed_copper"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WAXED_OXIDIZED_COPPER = new BlockType(843, "Waxed Oxidized Copper", "waxed_oxidized_copper", 0, 0, 18171, 18171, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18171, true, false, 15, 0, Material.find("waxed_oxidized_copper"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WAXED_OXIDIZED_CUT_COPPER = new BlockType(844, "Waxed Oxidized Cut Copper", "waxed_oxidized_cut_copper", 0, 0, 18172, 18172, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18172, true, false, 15, 0, Material.find("waxed_oxidized_cut_copper"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WAXED_WEATHERED_CUT_COPPER = new BlockType(845, "Waxed Weathered Cut Copper", "waxed_weathered_cut_copper", 0, 0, 18173, 18173, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18173, true, false, 15, 0, Material.find("waxed_weathered_cut_copper"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WAXED_EXPOSED_CUT_COPPER = new BlockType(846, "Waxed Exposed Cut Copper", "waxed_exposed_cut_copper", 0, 0, 18174, 18174, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18174, true, false, 15, 0, Material.find("waxed_exposed_cut_copper"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WAXED_CUT_COPPER = new BlockType(847, "Waxed Cut Copper", "waxed_cut_copper", 0, 0, 18175, 18175, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18175, true, false, 15, 0, Material.find("waxed_cut_copper"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WAXED_OXIDIZED_CUT_COPPER_STAIRS = new BlockType(848, "Waxed Oxidized Cut Copper Stairs", "waxed_oxidized_cut_copper_stairs", 0, 0, 18176, 18255, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18187, true, false, 0, 0, Material.find("waxed_oxidized_cut_copper_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WAXED_WEATHERED_CUT_COPPER_STAIRS = new BlockType(849, "Waxed Weathered Cut Copper Stairs", "waxed_weathered_cut_copper_stairs", 0, 0, 18256, 18335, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18267, true, false, 0, 0, Material.find("waxed_weathered_cut_copper_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WAXED_EXPOSED_CUT_COPPER_STAIRS = new BlockType(850, "Waxed Exposed Cut Copper Stairs", "waxed_exposed_cut_copper_stairs", 0, 0, 18336, 18415, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18347, true, false, 0, 0, Material.find("waxed_exposed_cut_copper_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WAXED_CUT_COPPER_STAIRS = new BlockType(851, "Waxed Cut Copper Stairs", "waxed_cut_copper_stairs", 0, 0, 18416, 18495, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18427, true, false, 0, 0, Material.find("waxed_cut_copper_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WAXED_OXIDIZED_CUT_COPPER_SLAB = new BlockType(852, "Waxed Oxidized Cut Copper Slab", "waxed_oxidized_cut_copper_slab", 0, 0, 18496, 18501, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18499, true, false, 0, 0, Material.find("waxed_oxidized_cut_copper_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WAXED_WEATHERED_CUT_COPPER_SLAB = new BlockType(853, "Waxed Weathered Cut Copper Slab", "waxed_weathered_cut_copper_slab", 0, 0, 18502, 18507, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18505, true, false, 0, 0, Material.find("waxed_weathered_cut_copper_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WAXED_EXPOSED_CUT_COPPER_SLAB = new BlockType(854, "Waxed Exposed Cut Copper Slab", "waxed_exposed_cut_copper_slab", 0, 0, 18508, 18513, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18511, true, false, 0, 0, Material.find("waxed_exposed_cut_copper_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType WAXED_CUT_COPPER_SLAB = new BlockType(855, "Waxed Cut Copper Slab", "waxed_cut_copper_slab", 0, 0, 18514, 18519, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18517, true, false, 0, 0, Material.find("waxed_cut_copper_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType LIGHTNING_ROD = new BlockType(856, "Lightning Rod", "lightning_rod", 3, 6, 18520, 18543, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18539, true, true, 0, 0, Material.find("lightning_rod"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POINTED_DRIPSTONE = new BlockType(857, "Pointed Dripstone", "pointed_dripstone", 1.5, 3, 18544, 18563, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 18549, true, true, 0, 0, Material.find("pointed_dripstone"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DRIPSTONE_BLOCK = new BlockType(858, "Dripstone Block", "dripstone_block", 1.5, 1, 18564, 18564, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18564, true, false, 15, 0, Material.find("dripstone_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CAVE_VINES = new BlockType(859, "Cave Vines", "cave_vines", 0, 0, 18565, 18616, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 18566, true, true, 0, 0, Material.find("cave_vines"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType CAVE_VINES_PLANT = new BlockType(860, "Cave Vines Plant", "cave_vines_plant", 0, 0, 18617, 18618, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 18618, true, true, 0, 0, Material.find("cave_vines_plant"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType SPORE_BLOSSOM = new BlockType(861, "Spore Blossom", "spore_blossom", 0, 0, 18619, 18619, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 18619, true, true, 0, 0, Material.find("spore_blossom"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType AZALEA = new BlockType(862, "Azalea", "azalea", 0, 0, 18620, 18620, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 18620, true, true, 0, 0, Material.find("azalea"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType FLOWERING_AZALEA = new BlockType(863, "Flowering Azalea", "flowering_azalea", 0, 0, 18621, 18621, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 18621, true, true, 0, 0, Material.find("flowering_azalea"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType MOSS_CARPET = new BlockType(864, "Moss Carpet", "moss_carpet", 0.1, 0.1, 18622, 18622, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 18622, true, false, 0, 0, Material.find("moss_carpet"), List.of(Key.minecraft("plant")));
    public static final BlockType MOSS_BLOCK = new BlockType(865, "Moss Block", "moss_block", 0.1, 0.1, 18623, 18623, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 18623, true, false, 15, 0, Material.find("moss_block"), List.of(Key.minecraft("mineable/hoe")));
    public static final BlockType BIG_DRIPLEAF = new BlockType(866, "Big Dripleaf", "big_dripleaf", 0.1, 0.1, 18624, 18655, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 18625, true, false, 0, 0, Material.find("big_dripleaf"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType BIG_DRIPLEAF_STEM = new BlockType(867, "Big Dripleaf Stem", "big_dripleaf_stem", 0.1, 0.1, 18656, 18663, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 18657, true, true, 0, 0, Material.find("big_dripleaf_stem"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType SMALL_DRIPLEAF = new BlockType(868, "Small Dripleaf", "small_dripleaf", 0, 0, 18664, 18679, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 18667, true, true, 0, 0, Material.find("small_dripleaf"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType HANGING_ROOTS = new BlockType(869, "Hanging Roots", "hanging_roots", 0, 0, 18680, 18681, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 18681, true, true, 0, 0, Material.find("hanging_roots"), List.of(Key.minecraft("plant"), Key.minecraft("mineable/axe")));
    public static final BlockType ROOTED_DIRT = new BlockType(870, "Rooted Dirt", "rooted_dirt", 0.5, 0.5, 18682, 18682, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 18682, true, false, 15, 0, Material.find("rooted_dirt"), List.of(Key.minecraft("mineable/shovel")));
    public static final BlockType DEEPSLATE = new BlockType(871, "Deepslate", "deepslate", 3, 6, 18683, 18685, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18684, true, false, 15, 0, Material.find("deepslate"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType COBBLED_DEEPSLATE = new BlockType(872, "Cobbled Deepslate", "cobbled_deepslate", 3.5, 6, 18686, 18686, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18686, true, false, 15, 0, Material.find("cobbled_deepslate"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType COBBLED_DEEPSLATE_STAIRS = new BlockType(873, "Cobbled Deepslate Stairs", "cobbled_deepslate_stairs", 0, 0, 18687, 18766, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18698, true, false, 0, 0, Material.find("cobbled_deepslate_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType COBBLED_DEEPSLATE_SLAB = new BlockType(874, "Cobbled Deepslate Slab", "cobbled_deepslate_slab", 0, 0, 18767, 18772, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18770, true, false, 0, 0, Material.find("cobbled_deepslate_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType COBBLED_DEEPSLATE_WALL = new BlockType(875, "Cobbled Deepslate Wall", "cobbled_deepslate_wall", 0, 0, 18773, 19096, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 18776, true, false, 0, 0, Material.find("cobbled_deepslate_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_DEEPSLATE = new BlockType(876, "Polished Deepslate", "polished_deepslate", 0, 0, 19097, 19097, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 19097, true, false, 15, 0, Material.find("polished_deepslate"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_DEEPSLATE_STAIRS = new BlockType(877, "Polished Deepslate Stairs", "polished_deepslate_stairs", 0, 0, 19098, 19177, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 19109, true, false, 0, 0, Material.find("polished_deepslate_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_DEEPSLATE_SLAB = new BlockType(878, "Polished Deepslate Slab", "polished_deepslate_slab", 0, 0, 19178, 19183, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 19181, true, false, 0, 0, Material.find("polished_deepslate_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POLISHED_DEEPSLATE_WALL = new BlockType(879, "Polished Deepslate Wall", "polished_deepslate_wall", 0, 0, 19184, 19507, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 19187, true, false, 0, 0, Material.find("polished_deepslate_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEEPSLATE_TILES = new BlockType(880, "Deepslate Tiles", "deepslate_tiles", 0, 0, 19508, 19508, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 19508, true, false, 15, 0, Material.find("deepslate_tiles"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEEPSLATE_TILE_STAIRS = new BlockType(881, "Deepslate Tile Stairs", "deepslate_tile_stairs", 0, 0, 19509, 19588, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 19520, true, false, 0, 0, Material.find("deepslate_tile_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEEPSLATE_TILE_SLAB = new BlockType(882, "Deepslate Tile Slab", "deepslate_tile_slab", 0, 0, 19589, 19594, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 19592, true, false, 0, 0, Material.find("deepslate_tile_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEEPSLATE_TILE_WALL = new BlockType(883, "Deepslate Tile Wall", "deepslate_tile_wall", 0, 0, 19595, 19918, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 19598, true, false, 0, 0, Material.find("deepslate_tile_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEEPSLATE_BRICKS = new BlockType(884, "Deepslate Bricks", "deepslate_bricks", 0, 0, 19919, 19919, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 19919, true, false, 15, 0, Material.find("deepslate_bricks"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEEPSLATE_BRICK_STAIRS = new BlockType(885, "Deepslate Brick Stairs", "deepslate_brick_stairs", 0, 0, 19920, 19999, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 19931, true, false, 0, 0, Material.find("deepslate_brick_stairs"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEEPSLATE_BRICK_SLAB = new BlockType(886, "Deepslate Brick Slab", "deepslate_brick_slab", 0, 0, 20000, 20005, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 20003, true, false, 0, 0, Material.find("deepslate_brick_slab"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType DEEPSLATE_BRICK_WALL = new BlockType(887, "Deepslate Brick Wall", "deepslate_brick_wall", 0, 0, 20006, 20329, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 20009, true, false, 0, 0, Material.find("deepslate_brick_wall"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CHISELED_DEEPSLATE = new BlockType(888, "Chiseled Deepslate", "chiseled_deepslate", 0, 0, 20330, 20330, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 20330, true, false, 15, 0, Material.find("chiseled_deepslate"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CRACKED_DEEPSLATE_BRICKS = new BlockType(889, "Cracked Deepslate Bricks", "cracked_deepslate_bricks", 0, 0, 20331, 20331, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 20331, true, false, 15, 0, Material.find("cracked_deepslate_bricks"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType CRACKED_DEEPSLATE_TILES = new BlockType(890, "Cracked Deepslate Tiles", "cracked_deepslate_tiles", 0, 0, 20332, 20332, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 20332, true, false, 15, 0, Material.find("cracked_deepslate_tiles"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType INFESTED_DEEPSLATE = new BlockType(891, "Infested Deepslate", "infested_deepslate", 0, 0, 20333, 20335, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 20334, true, false, 15, 0, Material.find("infested_deepslate"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType SMOOTH_BASALT = new BlockType(892, "Smooth Basalt", "smooth_basalt", 0, 0, 20336, 20336, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(701, true); map.put(706, true); map.put(711, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 20336, true, false, 15, 0, Material.find("smooth_basalt"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType RAW_IRON_BLOCK = new BlockType(893, "Block of Raw Iron", "raw_iron_block", 5, 6, 20337, 20337, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 20337, true, false, 15, 0, Material.find("raw_iron_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType RAW_COPPER_BLOCK = new BlockType(894, "Block of Raw Copper", "raw_copper_block", 5, 6, 20338, 20338, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(706, true); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 20338, true, false, 15, 0, Material.find("raw_copper_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType RAW_GOLD_BLOCK = new BlockType(895, "Block of Raw Gold", "raw_gold_block", 5, 6, 20339, 20339, (Producer<HashMap<Integer, Boolean>>) () -> { HashMap<Integer, Boolean> map = new HashMap<>(); map.put(716, true); map.put(721, true); map.put(726, true); return map; }, 20339, true, false, 15, 0, Material.find("raw_gold_block"), List.of(Key.minecraft("mineable/pickaxe")));
    public static final BlockType POTTED_AZALEA_BUSH = new BlockType(896, "Potted Azalea", "potted_azalea_bush", 0, 0, 20340, 20340, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 20340, true, true, 0, 0, Material.find("potted_azalea_bush"), List.of(Key.minecraft("default")));
    public static final BlockType POTTED_FLOWERING_AZALEA_BUSH = new BlockType(897, "Potted Flowering Azalea", "potted_flowering_azalea_bush", 0, 0, 20341, 20341, (Producer<HashMap<Integer, Boolean>>) () -> new HashMap<>(), 20341, true, true, 0, 0, Material.find("potted_flowering_azalea_bush"), List.of(Key.minecraft("default")));
    
    public static BlockType find(String name) {
        switch(name.toLowerCase()) {
                case "air": return BlockType.AIR;
            case "stone": return BlockType.STONE;
            case "granite": return BlockType.GRANITE;
            case "polished_granite": return BlockType.POLISHED_GRANITE;
            case "diorite": return BlockType.DIORITE;
            case "polished_diorite": return BlockType.POLISHED_DIORITE;
            case "andesite": return BlockType.ANDESITE;
            case "polished_andesite": return BlockType.POLISHED_ANDESITE;
            case "grass_block": return BlockType.GRASS_BLOCK;
            case "dirt": return BlockType.DIRT;
            case "coarse_dirt": return BlockType.COARSE_DIRT;
            case "podzol": return BlockType.PODZOL;
            case "cobblestone": return BlockType.COBBLESTONE;
            case "oak_planks": return BlockType.OAK_PLANKS;
            case "spruce_planks": return BlockType.SPRUCE_PLANKS;
            case "birch_planks": return BlockType.BIRCH_PLANKS;
            case "jungle_planks": return BlockType.JUNGLE_PLANKS;
            case "acacia_planks": return BlockType.ACACIA_PLANKS;
            case "dark_oak_planks": return BlockType.DARK_OAK_PLANKS;
            case "oak_sapling": return BlockType.OAK_SAPLING;
            case "spruce_sapling": return BlockType.SPRUCE_SAPLING;
            case "birch_sapling": return BlockType.BIRCH_SAPLING;
            case "jungle_sapling": return BlockType.JUNGLE_SAPLING;
            case "acacia_sapling": return BlockType.ACACIA_SAPLING;
            case "dark_oak_sapling": return BlockType.DARK_OAK_SAPLING;
            case "bedrock": return BlockType.BEDROCK;
            case "water": return BlockType.WATER;
            case "lava": return BlockType.LAVA;
            case "sand": return BlockType.SAND;
            case "red_sand": return BlockType.RED_SAND;
            case "gravel": return BlockType.GRAVEL;
            case "gold_ore": return BlockType.GOLD_ORE;
            case "deepslate_gold_ore": return BlockType.DEEPSLATE_GOLD_ORE;
            case "iron_ore": return BlockType.IRON_ORE;
            case "deepslate_iron_ore": return BlockType.DEEPSLATE_IRON_ORE;
            case "coal_ore": return BlockType.COAL_ORE;
            case "deepslate_coal_ore": return BlockType.DEEPSLATE_COAL_ORE;
            case "nether_gold_ore": return BlockType.NETHER_GOLD_ORE;
            case "oak_log": return BlockType.OAK_LOG;
            case "spruce_log": return BlockType.SPRUCE_LOG;
            case "birch_log": return BlockType.BIRCH_LOG;
            case "jungle_log": return BlockType.JUNGLE_LOG;
            case "acacia_log": return BlockType.ACACIA_LOG;
            case "dark_oak_log": return BlockType.DARK_OAK_LOG;
            case "stripped_spruce_log": return BlockType.STRIPPED_SPRUCE_LOG;
            case "stripped_birch_log": return BlockType.STRIPPED_BIRCH_LOG;
            case "stripped_jungle_log": return BlockType.STRIPPED_JUNGLE_LOG;
            case "stripped_acacia_log": return BlockType.STRIPPED_ACACIA_LOG;
            case "stripped_dark_oak_log": return BlockType.STRIPPED_DARK_OAK_LOG;
            case "stripped_oak_log": return BlockType.STRIPPED_OAK_LOG;
            case "oak_wood": return BlockType.OAK_WOOD;
            case "spruce_wood": return BlockType.SPRUCE_WOOD;
            case "birch_wood": return BlockType.BIRCH_WOOD;
            case "jungle_wood": return BlockType.JUNGLE_WOOD;
            case "acacia_wood": return BlockType.ACACIA_WOOD;
            case "dark_oak_wood": return BlockType.DARK_OAK_WOOD;
            case "stripped_oak_wood": return BlockType.STRIPPED_OAK_WOOD;
            case "stripped_spruce_wood": return BlockType.STRIPPED_SPRUCE_WOOD;
            case "stripped_birch_wood": return BlockType.STRIPPED_BIRCH_WOOD;
            case "stripped_jungle_wood": return BlockType.STRIPPED_JUNGLE_WOOD;
            case "stripped_acacia_wood": return BlockType.STRIPPED_ACACIA_WOOD;
            case "stripped_dark_oak_wood": return BlockType.STRIPPED_DARK_OAK_WOOD;
            case "oak_leaves": return BlockType.OAK_LEAVES;
            case "spruce_leaves": return BlockType.SPRUCE_LEAVES;
            case "birch_leaves": return BlockType.BIRCH_LEAVES;
            case "jungle_leaves": return BlockType.JUNGLE_LEAVES;
            case "acacia_leaves": return BlockType.ACACIA_LEAVES;
            case "dark_oak_leaves": return BlockType.DARK_OAK_LEAVES;
            case "azalea_leaves": return BlockType.AZALEA_LEAVES;
            case "flowering_azalea_leaves": return BlockType.FLOWERING_AZALEA_LEAVES;
            case "sponge": return BlockType.SPONGE;
            case "wet_sponge": return BlockType.WET_SPONGE;
            case "glass": return BlockType.GLASS;
            case "lapis_ore": return BlockType.LAPIS_ORE;
            case "deepslate_lapis_ore": return BlockType.DEEPSLATE_LAPIS_ORE;
            case "lapis_block": return BlockType.LAPIS_BLOCK;
            case "dispenser": return BlockType.DISPENSER;
            case "sandstone": return BlockType.SANDSTONE;
            case "chiseled_sandstone": return BlockType.CHISELED_SANDSTONE;
            case "cut_sandstone": return BlockType.CUT_SANDSTONE;
            case "note_block": return BlockType.NOTE_BLOCK;
            case "white_bed": return BlockType.WHITE_BED;
            case "orange_bed": return BlockType.ORANGE_BED;
            case "magenta_bed": return BlockType.MAGENTA_BED;
            case "light_blue_bed": return BlockType.LIGHT_BLUE_BED;
            case "yellow_bed": return BlockType.YELLOW_BED;
            case "lime_bed": return BlockType.LIME_BED;
            case "pink_bed": return BlockType.PINK_BED;
            case "gray_bed": return BlockType.GRAY_BED;
            case "light_gray_bed": return BlockType.LIGHT_GRAY_BED;
            case "cyan_bed": return BlockType.CYAN_BED;
            case "purple_bed": return BlockType.PURPLE_BED;
            case "blue_bed": return BlockType.BLUE_BED;
            case "brown_bed": return BlockType.BROWN_BED;
            case "green_bed": return BlockType.GREEN_BED;
            case "red_bed": return BlockType.RED_BED;
            case "black_bed": return BlockType.BLACK_BED;
            case "powered_rail": return BlockType.POWERED_RAIL;
            case "detector_rail": return BlockType.DETECTOR_RAIL;
            case "sticky_piston": return BlockType.STICKY_PISTON;
            case "cobweb": return BlockType.COBWEB;
            case "grass": return BlockType.GRASS;
            case "fern": return BlockType.FERN;
            case "dead_bush": return BlockType.DEAD_BUSH;
            case "seagrass": return BlockType.SEAGRASS;
            case "tall_seagrass": return BlockType.TALL_SEAGRASS;
            case "piston": return BlockType.PISTON;
            case "piston_head": return BlockType.PISTON_HEAD;
            case "white_wool": return BlockType.WHITE_WOOL;
            case "orange_wool": return BlockType.ORANGE_WOOL;
            case "magenta_wool": return BlockType.MAGENTA_WOOL;
            case "light_blue_wool": return BlockType.LIGHT_BLUE_WOOL;
            case "yellow_wool": return BlockType.YELLOW_WOOL;
            case "lime_wool": return BlockType.LIME_WOOL;
            case "pink_wool": return BlockType.PINK_WOOL;
            case "gray_wool": return BlockType.GRAY_WOOL;
            case "light_gray_wool": return BlockType.LIGHT_GRAY_WOOL;
            case "cyan_wool": return BlockType.CYAN_WOOL;
            case "purple_wool": return BlockType.PURPLE_WOOL;
            case "blue_wool": return BlockType.BLUE_WOOL;
            case "brown_wool": return BlockType.BROWN_WOOL;
            case "green_wool": return BlockType.GREEN_WOOL;
            case "red_wool": return BlockType.RED_WOOL;
            case "black_wool": return BlockType.BLACK_WOOL;
            case "moving_piston": return BlockType.MOVING_PISTON;
            case "dandelion": return BlockType.DANDELION;
            case "poppy": return BlockType.POPPY;
            case "blue_orchid": return BlockType.BLUE_ORCHID;
            case "allium": return BlockType.ALLIUM;
            case "azure_bluet": return BlockType.AZURE_BLUET;
            case "red_tulip": return BlockType.RED_TULIP;
            case "orange_tulip": return BlockType.ORANGE_TULIP;
            case "white_tulip": return BlockType.WHITE_TULIP;
            case "pink_tulip": return BlockType.PINK_TULIP;
            case "oxeye_daisy": return BlockType.OXEYE_DAISY;
            case "cornflower": return BlockType.CORNFLOWER;
            case "wither_rose": return BlockType.WITHER_ROSE;
            case "lily_of_the_valley": return BlockType.LILY_OF_THE_VALLEY;
            case "brown_mushroom": return BlockType.BROWN_MUSHROOM;
            case "red_mushroom": return BlockType.RED_MUSHROOM;
            case "gold_block": return BlockType.GOLD_BLOCK;
            case "iron_block": return BlockType.IRON_BLOCK;
            case "bricks": return BlockType.BRICKS;
            case "tnt": return BlockType.TNT;
            case "bookshelf": return BlockType.BOOKSHELF;
            case "mossy_cobblestone": return BlockType.MOSSY_COBBLESTONE;
            case "obsidian": return BlockType.OBSIDIAN;
            case "torch": return BlockType.TORCH;
            case "wall_torch": return BlockType.WALL_TORCH;
            case "fire": return BlockType.FIRE;
            case "soul_fire": return BlockType.SOUL_FIRE;
            case "spawner": return BlockType.SPAWNER;
            case "oak_stairs": return BlockType.OAK_STAIRS;
            case "chest": return BlockType.CHEST;
            case "redstone_wire": return BlockType.REDSTONE_WIRE;
            case "diamond_ore": return BlockType.DIAMOND_ORE;
            case "deepslate_diamond_ore": return BlockType.DEEPSLATE_DIAMOND_ORE;
            case "diamond_block": return BlockType.DIAMOND_BLOCK;
            case "crafting_table": return BlockType.CRAFTING_TABLE;
            case "wheat": return BlockType.WHEAT;
            case "farmland": return BlockType.FARMLAND;
            case "furnace": return BlockType.FURNACE;
            case "oak_sign": return BlockType.OAK_SIGN;
            case "spruce_sign": return BlockType.SPRUCE_SIGN;
            case "birch_sign": return BlockType.BIRCH_SIGN;
            case "acacia_sign": return BlockType.ACACIA_SIGN;
            case "jungle_sign": return BlockType.JUNGLE_SIGN;
            case "dark_oak_sign": return BlockType.DARK_OAK_SIGN;
            case "oak_door": return BlockType.OAK_DOOR;
            case "ladder": return BlockType.LADDER;
            case "rail": return BlockType.RAIL;
            case "cobblestone_stairs": return BlockType.COBBLESTONE_STAIRS;
            case "oak_wall_sign": return BlockType.OAK_WALL_SIGN;
            case "spruce_wall_sign": return BlockType.SPRUCE_WALL_SIGN;
            case "birch_wall_sign": return BlockType.BIRCH_WALL_SIGN;
            case "acacia_wall_sign": return BlockType.ACACIA_WALL_SIGN;
            case "jungle_wall_sign": return BlockType.JUNGLE_WALL_SIGN;
            case "dark_oak_wall_sign": return BlockType.DARK_OAK_WALL_SIGN;
            case "lever": return BlockType.LEVER;
            case "stone_pressure_plate": return BlockType.STONE_PRESSURE_PLATE;
            case "iron_door": return BlockType.IRON_DOOR;
            case "oak_pressure_plate": return BlockType.OAK_PRESSURE_PLATE;
            case "spruce_pressure_plate": return BlockType.SPRUCE_PRESSURE_PLATE;
            case "birch_pressure_plate": return BlockType.BIRCH_PRESSURE_PLATE;
            case "jungle_pressure_plate": return BlockType.JUNGLE_PRESSURE_PLATE;
            case "acacia_pressure_plate": return BlockType.ACACIA_PRESSURE_PLATE;
            case "dark_oak_pressure_plate": return BlockType.DARK_OAK_PRESSURE_PLATE;
            case "redstone_ore": return BlockType.REDSTONE_ORE;
            case "deepslate_redstone_ore": return BlockType.DEEPSLATE_REDSTONE_ORE;
            case "redstone_torch": return BlockType.REDSTONE_TORCH;
            case "redstone_wall_torch": return BlockType.REDSTONE_WALL_TORCH;
            case "stone_button": return BlockType.STONE_BUTTON;
            case "snow": return BlockType.SNOW;
            case "ice": return BlockType.ICE;
            case "snow_block": return BlockType.SNOW_BLOCK;
            case "cactus": return BlockType.CACTUS;
            case "clay": return BlockType.CLAY;
            case "sugar_cane": return BlockType.SUGAR_CANE;
            case "jukebox": return BlockType.JUKEBOX;
            case "oak_fence": return BlockType.OAK_FENCE;
            case "pumpkin": return BlockType.PUMPKIN;
            case "netherrack": return BlockType.NETHERRACK;
            case "soul_sand": return BlockType.SOUL_SAND;
            case "soul_soil": return BlockType.SOUL_SOIL;
            case "basalt": return BlockType.BASALT;
            case "polished_basalt": return BlockType.POLISHED_BASALT;
            case "soul_torch": return BlockType.SOUL_TORCH;
            case "soul_wall_torch": return BlockType.SOUL_WALL_TORCH;
            case "glowstone": return BlockType.GLOWSTONE;
            case "nether_portal": return BlockType.NETHER_PORTAL;
            case "carved_pumpkin": return BlockType.CARVED_PUMPKIN;
            case "jack_o_lantern": return BlockType.JACK_O_LANTERN;
            case "cake": return BlockType.CAKE;
            case "repeater": return BlockType.REPEATER;
            case "white_stained_glass": return BlockType.WHITE_STAINED_GLASS;
            case "orange_stained_glass": return BlockType.ORANGE_STAINED_GLASS;
            case "magenta_stained_glass": return BlockType.MAGENTA_STAINED_GLASS;
            case "light_blue_stained_glass": return BlockType.LIGHT_BLUE_STAINED_GLASS;
            case "yellow_stained_glass": return BlockType.YELLOW_STAINED_GLASS;
            case "lime_stained_glass": return BlockType.LIME_STAINED_GLASS;
            case "pink_stained_glass": return BlockType.PINK_STAINED_GLASS;
            case "gray_stained_glass": return BlockType.GRAY_STAINED_GLASS;
            case "light_gray_stained_glass": return BlockType.LIGHT_GRAY_STAINED_GLASS;
            case "cyan_stained_glass": return BlockType.CYAN_STAINED_GLASS;
            case "purple_stained_glass": return BlockType.PURPLE_STAINED_GLASS;
            case "blue_stained_glass": return BlockType.BLUE_STAINED_GLASS;
            case "brown_stained_glass": return BlockType.BROWN_STAINED_GLASS;
            case "green_stained_glass": return BlockType.GREEN_STAINED_GLASS;
            case "red_stained_glass": return BlockType.RED_STAINED_GLASS;
            case "black_stained_glass": return BlockType.BLACK_STAINED_GLASS;
            case "oak_trapdoor": return BlockType.OAK_TRAPDOOR;
            case "spruce_trapdoor": return BlockType.SPRUCE_TRAPDOOR;
            case "birch_trapdoor": return BlockType.BIRCH_TRAPDOOR;
            case "jungle_trapdoor": return BlockType.JUNGLE_TRAPDOOR;
            case "acacia_trapdoor": return BlockType.ACACIA_TRAPDOOR;
            case "dark_oak_trapdoor": return BlockType.DARK_OAK_TRAPDOOR;
            case "stone_bricks": return BlockType.STONE_BRICKS;
            case "mossy_stone_bricks": return BlockType.MOSSY_STONE_BRICKS;
            case "cracked_stone_bricks": return BlockType.CRACKED_STONE_BRICKS;
            case "chiseled_stone_bricks": return BlockType.CHISELED_STONE_BRICKS;
            case "infested_stone": return BlockType.INFESTED_STONE;
            case "infested_cobblestone": return BlockType.INFESTED_COBBLESTONE;
            case "infested_stone_bricks": return BlockType.INFESTED_STONE_BRICKS;
            case "infested_mossy_stone_bricks": return BlockType.INFESTED_MOSSY_STONE_BRICKS;
            case "infested_cracked_stone_bricks": return BlockType.INFESTED_CRACKED_STONE_BRICKS;
            case "infested_chiseled_stone_bricks": return BlockType.INFESTED_CHISELED_STONE_BRICKS;
            case "brown_mushroom_block": return BlockType.BROWN_MUSHROOM_BLOCK;
            case "red_mushroom_block": return BlockType.RED_MUSHROOM_BLOCK;
            case "mushroom_stem": return BlockType.MUSHROOM_STEM;
            case "iron_bars": return BlockType.IRON_BARS;
            case "chain": return BlockType.CHAIN;
            case "glass_pane": return BlockType.GLASS_PANE;
            case "melon": return BlockType.MELON;
            case "attached_pumpkin_stem": return BlockType.ATTACHED_PUMPKIN_STEM;
            case "attached_melon_stem": return BlockType.ATTACHED_MELON_STEM;
            case "pumpkin_stem": return BlockType.PUMPKIN_STEM;
            case "melon_stem": return BlockType.MELON_STEM;
            case "vine": return BlockType.VINE;
            case "glow_lichen": return BlockType.GLOW_LICHEN;
            case "oak_fence_gate": return BlockType.OAK_FENCE_GATE;
            case "brick_stairs": return BlockType.BRICK_STAIRS;
            case "stone_brick_stairs": return BlockType.STONE_BRICK_STAIRS;
            case "mycelium": return BlockType.MYCELIUM;
            case "lily_pad": return BlockType.LILY_PAD;
            case "nether_bricks": return BlockType.NETHER_BRICKS;
            case "nether_brick_fence": return BlockType.NETHER_BRICK_FENCE;
            case "nether_brick_stairs": return BlockType.NETHER_BRICK_STAIRS;
            case "nether_wart": return BlockType.NETHER_WART;
            case "enchanting_table": return BlockType.ENCHANTING_TABLE;
            case "brewing_stand": return BlockType.BREWING_STAND;
            case "cauldron": return BlockType.CAULDRON;
            case "water_cauldron": return BlockType.WATER_CAULDRON;
            case "lava_cauldron": return BlockType.LAVA_CAULDRON;
            case "powder_snow_cauldron": return BlockType.POWDER_SNOW_CAULDRON;
            case "end_portal": return BlockType.END_PORTAL;
            case "end_portal_frame": return BlockType.END_PORTAL_FRAME;
            case "end_stone": return BlockType.END_STONE;
            case "dragon_egg": return BlockType.DRAGON_EGG;
            case "redstone_lamp": return BlockType.REDSTONE_LAMP;
            case "cocoa": return BlockType.COCOA;
            case "sandstone_stairs": return BlockType.SANDSTONE_STAIRS;
            case "emerald_ore": return BlockType.EMERALD_ORE;
            case "deepslate_emerald_ore": return BlockType.DEEPSLATE_EMERALD_ORE;
            case "ender_chest": return BlockType.ENDER_CHEST;
            case "tripwire_hook": return BlockType.TRIPWIRE_HOOK;
            case "tripwire": return BlockType.TRIPWIRE;
            case "emerald_block": return BlockType.EMERALD_BLOCK;
            case "spruce_stairs": return BlockType.SPRUCE_STAIRS;
            case "birch_stairs": return BlockType.BIRCH_STAIRS;
            case "jungle_stairs": return BlockType.JUNGLE_STAIRS;
            case "command_block": return BlockType.COMMAND_BLOCK;
            case "beacon": return BlockType.BEACON;
            case "cobblestone_wall": return BlockType.COBBLESTONE_WALL;
            case "mossy_cobblestone_wall": return BlockType.MOSSY_COBBLESTONE_WALL;
            case "flower_pot": return BlockType.FLOWER_POT;
            case "potted_oak_sapling": return BlockType.POTTED_OAK_SAPLING;
            case "potted_spruce_sapling": return BlockType.POTTED_SPRUCE_SAPLING;
            case "potted_birch_sapling": return BlockType.POTTED_BIRCH_SAPLING;
            case "potted_jungle_sapling": return BlockType.POTTED_JUNGLE_SAPLING;
            case "potted_acacia_sapling": return BlockType.POTTED_ACACIA_SAPLING;
            case "potted_dark_oak_sapling": return BlockType.POTTED_DARK_OAK_SAPLING;
            case "potted_fern": return BlockType.POTTED_FERN;
            case "potted_dandelion": return BlockType.POTTED_DANDELION;
            case "potted_poppy": return BlockType.POTTED_POPPY;
            case "potted_blue_orchid": return BlockType.POTTED_BLUE_ORCHID;
            case "potted_allium": return BlockType.POTTED_ALLIUM;
            case "potted_azure_bluet": return BlockType.POTTED_AZURE_BLUET;
            case "potted_red_tulip": return BlockType.POTTED_RED_TULIP;
            case "potted_orange_tulip": return BlockType.POTTED_ORANGE_TULIP;
            case "potted_white_tulip": return BlockType.POTTED_WHITE_TULIP;
            case "potted_pink_tulip": return BlockType.POTTED_PINK_TULIP;
            case "potted_oxeye_daisy": return BlockType.POTTED_OXEYE_DAISY;
            case "potted_cornflower": return BlockType.POTTED_CORNFLOWER;
            case "potted_lily_of_the_valley": return BlockType.POTTED_LILY_OF_THE_VALLEY;
            case "potted_wither_rose": return BlockType.POTTED_WITHER_ROSE;
            case "potted_red_mushroom": return BlockType.POTTED_RED_MUSHROOM;
            case "potted_brown_mushroom": return BlockType.POTTED_BROWN_MUSHROOM;
            case "potted_dead_bush": return BlockType.POTTED_DEAD_BUSH;
            case "potted_cactus": return BlockType.POTTED_CACTUS;
            case "carrots": return BlockType.CARROTS;
            case "potatoes": return BlockType.POTATOES;
            case "oak_button": return BlockType.OAK_BUTTON;
            case "spruce_button": return BlockType.SPRUCE_BUTTON;
            case "birch_button": return BlockType.BIRCH_BUTTON;
            case "jungle_button": return BlockType.JUNGLE_BUTTON;
            case "acacia_button": return BlockType.ACACIA_BUTTON;
            case "dark_oak_button": return BlockType.DARK_OAK_BUTTON;
            case "skeleton_skull": return BlockType.SKELETON_SKULL;
            case "skeleton_wall_skull": return BlockType.SKELETON_WALL_SKULL;
            case "wither_skeleton_skull": return BlockType.WITHER_SKELETON_SKULL;
            case "wither_skeleton_wall_skull": return BlockType.WITHER_SKELETON_WALL_SKULL;
            case "zombie_head": return BlockType.ZOMBIE_HEAD;
            case "zombie_wall_head": return BlockType.ZOMBIE_WALL_HEAD;
            case "player_head": return BlockType.PLAYER_HEAD;
            case "player_wall_head": return BlockType.PLAYER_WALL_HEAD;
            case "creeper_head": return BlockType.CREEPER_HEAD;
            case "creeper_wall_head": return BlockType.CREEPER_WALL_HEAD;
            case "dragon_head": return BlockType.DRAGON_HEAD;
            case "dragon_wall_head": return BlockType.DRAGON_WALL_HEAD;
            case "anvil": return BlockType.ANVIL;
            case "chipped_anvil": return BlockType.CHIPPED_ANVIL;
            case "damaged_anvil": return BlockType.DAMAGED_ANVIL;
            case "trapped_chest": return BlockType.TRAPPED_CHEST;
            case "light_weighted_pressure_plate": return BlockType.LIGHT_WEIGHTED_PRESSURE_PLATE;
            case "heavy_weighted_pressure_plate": return BlockType.HEAVY_WEIGHTED_PRESSURE_PLATE;
            case "comparator": return BlockType.COMPARATOR;
            case "daylight_detector": return BlockType.DAYLIGHT_DETECTOR;
            case "redstone_block": return BlockType.REDSTONE_BLOCK;
            case "nether_quartz_ore": return BlockType.NETHER_QUARTZ_ORE;
            case "hopper": return BlockType.HOPPER;
            case "quartz_block": return BlockType.QUARTZ_BLOCK;
            case "chiseled_quartz_block": return BlockType.CHISELED_QUARTZ_BLOCK;
            case "quartz_pillar": return BlockType.QUARTZ_PILLAR;
            case "quartz_stairs": return BlockType.QUARTZ_STAIRS;
            case "activator_rail": return BlockType.ACTIVATOR_RAIL;
            case "dropper": return BlockType.DROPPER;
            case "white_terracotta": return BlockType.WHITE_TERRACOTTA;
            case "orange_terracotta": return BlockType.ORANGE_TERRACOTTA;
            case "magenta_terracotta": return BlockType.MAGENTA_TERRACOTTA;
            case "light_blue_terracotta": return BlockType.LIGHT_BLUE_TERRACOTTA;
            case "yellow_terracotta": return BlockType.YELLOW_TERRACOTTA;
            case "lime_terracotta": return BlockType.LIME_TERRACOTTA;
            case "pink_terracotta": return BlockType.PINK_TERRACOTTA;
            case "gray_terracotta": return BlockType.GRAY_TERRACOTTA;
            case "light_gray_terracotta": return BlockType.LIGHT_GRAY_TERRACOTTA;
            case "cyan_terracotta": return BlockType.CYAN_TERRACOTTA;
            case "purple_terracotta": return BlockType.PURPLE_TERRACOTTA;
            case "blue_terracotta": return BlockType.BLUE_TERRACOTTA;
            case "brown_terracotta": return BlockType.BROWN_TERRACOTTA;
            case "green_terracotta": return BlockType.GREEN_TERRACOTTA;
            case "red_terracotta": return BlockType.RED_TERRACOTTA;
            case "black_terracotta": return BlockType.BLACK_TERRACOTTA;
            case "white_stained_glass_pane": return BlockType.WHITE_STAINED_GLASS_PANE;
            case "orange_stained_glass_pane": return BlockType.ORANGE_STAINED_GLASS_PANE;
            case "magenta_stained_glass_pane": return BlockType.MAGENTA_STAINED_GLASS_PANE;
            case "light_blue_stained_glass_pane": return BlockType.LIGHT_BLUE_STAINED_GLASS_PANE;
            case "yellow_stained_glass_pane": return BlockType.YELLOW_STAINED_GLASS_PANE;
            case "lime_stained_glass_pane": return BlockType.LIME_STAINED_GLASS_PANE;
            case "pink_stained_glass_pane": return BlockType.PINK_STAINED_GLASS_PANE;
            case "gray_stained_glass_pane": return BlockType.GRAY_STAINED_GLASS_PANE;
            case "light_gray_stained_glass_pane": return BlockType.LIGHT_GRAY_STAINED_GLASS_PANE;
            case "cyan_stained_glass_pane": return BlockType.CYAN_STAINED_GLASS_PANE;
            case "purple_stained_glass_pane": return BlockType.PURPLE_STAINED_GLASS_PANE;
            case "blue_stained_glass_pane": return BlockType.BLUE_STAINED_GLASS_PANE;
            case "brown_stained_glass_pane": return BlockType.BROWN_STAINED_GLASS_PANE;
            case "green_stained_glass_pane": return BlockType.GREEN_STAINED_GLASS_PANE;
            case "red_stained_glass_pane": return BlockType.RED_STAINED_GLASS_PANE;
            case "black_stained_glass_pane": return BlockType.BLACK_STAINED_GLASS_PANE;
            case "acacia_stairs": return BlockType.ACACIA_STAIRS;
            case "dark_oak_stairs": return BlockType.DARK_OAK_STAIRS;
            case "slime_block": return BlockType.SLIME_BLOCK;
            case "barrier": return BlockType.BARRIER;
            case "light": return BlockType.LIGHT;
            case "iron_trapdoor": return BlockType.IRON_TRAPDOOR;
            case "prismarine": return BlockType.PRISMARINE;
            case "prismarine_bricks": return BlockType.PRISMARINE_BRICKS;
            case "dark_prismarine": return BlockType.DARK_PRISMARINE;
            case "prismarine_stairs": return BlockType.PRISMARINE_STAIRS;
            case "prismarine_brick_stairs": return BlockType.PRISMARINE_BRICK_STAIRS;
            case "dark_prismarine_stairs": return BlockType.DARK_PRISMARINE_STAIRS;
            case "prismarine_slab": return BlockType.PRISMARINE_SLAB;
            case "prismarine_brick_slab": return BlockType.PRISMARINE_BRICK_SLAB;
            case "dark_prismarine_slab": return BlockType.DARK_PRISMARINE_SLAB;
            case "sea_lantern": return BlockType.SEA_LANTERN;
            case "hay_block": return BlockType.HAY_BLOCK;
            case "white_carpet": return BlockType.WHITE_CARPET;
            case "orange_carpet": return BlockType.ORANGE_CARPET;
            case "magenta_carpet": return BlockType.MAGENTA_CARPET;
            case "light_blue_carpet": return BlockType.LIGHT_BLUE_CARPET;
            case "yellow_carpet": return BlockType.YELLOW_CARPET;
            case "lime_carpet": return BlockType.LIME_CARPET;
            case "pink_carpet": return BlockType.PINK_CARPET;
            case "gray_carpet": return BlockType.GRAY_CARPET;
            case "light_gray_carpet": return BlockType.LIGHT_GRAY_CARPET;
            case "cyan_carpet": return BlockType.CYAN_CARPET;
            case "purple_carpet": return BlockType.PURPLE_CARPET;
            case "blue_carpet": return BlockType.BLUE_CARPET;
            case "brown_carpet": return BlockType.BROWN_CARPET;
            case "green_carpet": return BlockType.GREEN_CARPET;
            case "red_carpet": return BlockType.RED_CARPET;
            case "black_carpet": return BlockType.BLACK_CARPET;
            case "terracotta": return BlockType.TERRACOTTA;
            case "coal_block": return BlockType.COAL_BLOCK;
            case "packed_ice": return BlockType.PACKED_ICE;
            case "sunflower": return BlockType.SUNFLOWER;
            case "lilac": return BlockType.LILAC;
            case "rose_bush": return BlockType.ROSE_BUSH;
            case "peony": return BlockType.PEONY;
            case "tall_grass": return BlockType.TALL_GRASS;
            case "large_fern": return BlockType.LARGE_FERN;
            case "white_banner": return BlockType.WHITE_BANNER;
            case "orange_banner": return BlockType.ORANGE_BANNER;
            case "magenta_banner": return BlockType.MAGENTA_BANNER;
            case "light_blue_banner": return BlockType.LIGHT_BLUE_BANNER;
            case "yellow_banner": return BlockType.YELLOW_BANNER;
            case "lime_banner": return BlockType.LIME_BANNER;
            case "pink_banner": return BlockType.PINK_BANNER;
            case "gray_banner": return BlockType.GRAY_BANNER;
            case "light_gray_banner": return BlockType.LIGHT_GRAY_BANNER;
            case "cyan_banner": return BlockType.CYAN_BANNER;
            case "purple_banner": return BlockType.PURPLE_BANNER;
            case "blue_banner": return BlockType.BLUE_BANNER;
            case "brown_banner": return BlockType.BROWN_BANNER;
            case "green_banner": return BlockType.GREEN_BANNER;
            case "red_banner": return BlockType.RED_BANNER;
            case "black_banner": return BlockType.BLACK_BANNER;
            case "white_wall_banner": return BlockType.WHITE_WALL_BANNER;
            case "orange_wall_banner": return BlockType.ORANGE_WALL_BANNER;
            case "magenta_wall_banner": return BlockType.MAGENTA_WALL_BANNER;
            case "light_blue_wall_banner": return BlockType.LIGHT_BLUE_WALL_BANNER;
            case "yellow_wall_banner": return BlockType.YELLOW_WALL_BANNER;
            case "lime_wall_banner": return BlockType.LIME_WALL_BANNER;
            case "pink_wall_banner": return BlockType.PINK_WALL_BANNER;
            case "gray_wall_banner": return BlockType.GRAY_WALL_BANNER;
            case "light_gray_wall_banner": return BlockType.LIGHT_GRAY_WALL_BANNER;
            case "cyan_wall_banner": return BlockType.CYAN_WALL_BANNER;
            case "purple_wall_banner": return BlockType.PURPLE_WALL_BANNER;
            case "blue_wall_banner": return BlockType.BLUE_WALL_BANNER;
            case "brown_wall_banner": return BlockType.BROWN_WALL_BANNER;
            case "green_wall_banner": return BlockType.GREEN_WALL_BANNER;
            case "red_wall_banner": return BlockType.RED_WALL_BANNER;
            case "black_wall_banner": return BlockType.BLACK_WALL_BANNER;
            case "red_sandstone": return BlockType.RED_SANDSTONE;
            case "chiseled_red_sandstone": return BlockType.CHISELED_RED_SANDSTONE;
            case "cut_red_sandstone": return BlockType.CUT_RED_SANDSTONE;
            case "red_sandstone_stairs": return BlockType.RED_SANDSTONE_STAIRS;
            case "oak_slab": return BlockType.OAK_SLAB;
            case "spruce_slab": return BlockType.SPRUCE_SLAB;
            case "birch_slab": return BlockType.BIRCH_SLAB;
            case "jungle_slab": return BlockType.JUNGLE_SLAB;
            case "acacia_slab": return BlockType.ACACIA_SLAB;
            case "dark_oak_slab": return BlockType.DARK_OAK_SLAB;
            case "stone_slab": return BlockType.STONE_SLAB;
            case "smooth_stone_slab": return BlockType.SMOOTH_STONE_SLAB;
            case "sandstone_slab": return BlockType.SANDSTONE_SLAB;
            case "cut_sandstone_slab": return BlockType.CUT_SANDSTONE_SLAB;
            case "petrified_oak_slab": return BlockType.PETRIFIED_OAK_SLAB;
            case "cobblestone_slab": return BlockType.COBBLESTONE_SLAB;
            case "brick_slab": return BlockType.BRICK_SLAB;
            case "stone_brick_slab": return BlockType.STONE_BRICK_SLAB;
            case "nether_brick_slab": return BlockType.NETHER_BRICK_SLAB;
            case "quartz_slab": return BlockType.QUARTZ_SLAB;
            case "red_sandstone_slab": return BlockType.RED_SANDSTONE_SLAB;
            case "cut_red_sandstone_slab": return BlockType.CUT_RED_SANDSTONE_SLAB;
            case "purpur_slab": return BlockType.PURPUR_SLAB;
            case "smooth_stone": return BlockType.SMOOTH_STONE;
            case "smooth_sandstone": return BlockType.SMOOTH_SANDSTONE;
            case "smooth_quartz": return BlockType.SMOOTH_QUARTZ;
            case "smooth_red_sandstone": return BlockType.SMOOTH_RED_SANDSTONE;
            case "spruce_fence_gate": return BlockType.SPRUCE_FENCE_GATE;
            case "birch_fence_gate": return BlockType.BIRCH_FENCE_GATE;
            case "jungle_fence_gate": return BlockType.JUNGLE_FENCE_GATE;
            case "acacia_fence_gate": return BlockType.ACACIA_FENCE_GATE;
            case "dark_oak_fence_gate": return BlockType.DARK_OAK_FENCE_GATE;
            case "spruce_fence": return BlockType.SPRUCE_FENCE;
            case "birch_fence": return BlockType.BIRCH_FENCE;
            case "jungle_fence": return BlockType.JUNGLE_FENCE;
            case "acacia_fence": return BlockType.ACACIA_FENCE;
            case "dark_oak_fence": return BlockType.DARK_OAK_FENCE;
            case "spruce_door": return BlockType.SPRUCE_DOOR;
            case "birch_door": return BlockType.BIRCH_DOOR;
            case "jungle_door": return BlockType.JUNGLE_DOOR;
            case "acacia_door": return BlockType.ACACIA_DOOR;
            case "dark_oak_door": return BlockType.DARK_OAK_DOOR;
            case "end_rod": return BlockType.END_ROD;
            case "chorus_plant": return BlockType.CHORUS_PLANT;
            case "chorus_flower": return BlockType.CHORUS_FLOWER;
            case "purpur_block": return BlockType.PURPUR_BLOCK;
            case "purpur_pillar": return BlockType.PURPUR_PILLAR;
            case "purpur_stairs": return BlockType.PURPUR_STAIRS;
            case "end_stone_bricks": return BlockType.END_STONE_BRICKS;
            case "beetroots": return BlockType.BEETROOTS;
            case "dirt_path": return BlockType.DIRT_PATH;
            case "end_gateway": return BlockType.END_GATEWAY;
            case "repeating_command_block": return BlockType.REPEATING_COMMAND_BLOCK;
            case "chain_command_block": return BlockType.CHAIN_COMMAND_BLOCK;
            case "frosted_ice": return BlockType.FROSTED_ICE;
            case "magma_block": return BlockType.MAGMA_BLOCK;
            case "nether_wart_block": return BlockType.NETHER_WART_BLOCK;
            case "red_nether_bricks": return BlockType.RED_NETHER_BRICKS;
            case "bone_block": return BlockType.BONE_BLOCK;
            case "structure_void": return BlockType.STRUCTURE_VOID;
            case "observer": return BlockType.OBSERVER;
            case "shulker_box": return BlockType.SHULKER_BOX;
            case "white_shulker_box": return BlockType.WHITE_SHULKER_BOX;
            case "orange_shulker_box": return BlockType.ORANGE_SHULKER_BOX;
            case "magenta_shulker_box": return BlockType.MAGENTA_SHULKER_BOX;
            case "light_blue_shulker_box": return BlockType.LIGHT_BLUE_SHULKER_BOX;
            case "yellow_shulker_box": return BlockType.YELLOW_SHULKER_BOX;
            case "lime_shulker_box": return BlockType.LIME_SHULKER_BOX;
            case "pink_shulker_box": return BlockType.PINK_SHULKER_BOX;
            case "gray_shulker_box": return BlockType.GRAY_SHULKER_BOX;
            case "light_gray_shulker_box": return BlockType.LIGHT_GRAY_SHULKER_BOX;
            case "cyan_shulker_box": return BlockType.CYAN_SHULKER_BOX;
            case "purple_shulker_box": return BlockType.PURPLE_SHULKER_BOX;
            case "blue_shulker_box": return BlockType.BLUE_SHULKER_BOX;
            case "brown_shulker_box": return BlockType.BROWN_SHULKER_BOX;
            case "green_shulker_box": return BlockType.GREEN_SHULKER_BOX;
            case "red_shulker_box": return BlockType.RED_SHULKER_BOX;
            case "black_shulker_box": return BlockType.BLACK_SHULKER_BOX;
            case "white_glazed_terracotta": return BlockType.WHITE_GLAZED_TERRACOTTA;
            case "orange_glazed_terracotta": return BlockType.ORANGE_GLAZED_TERRACOTTA;
            case "magenta_glazed_terracotta": return BlockType.MAGENTA_GLAZED_TERRACOTTA;
            case "light_blue_glazed_terracotta": return BlockType.LIGHT_BLUE_GLAZED_TERRACOTTA;
            case "yellow_glazed_terracotta": return BlockType.YELLOW_GLAZED_TERRACOTTA;
            case "lime_glazed_terracotta": return BlockType.LIME_GLAZED_TERRACOTTA;
            case "pink_glazed_terracotta": return BlockType.PINK_GLAZED_TERRACOTTA;
            case "gray_glazed_terracotta": return BlockType.GRAY_GLAZED_TERRACOTTA;
            case "light_gray_glazed_terracotta": return BlockType.LIGHT_GRAY_GLAZED_TERRACOTTA;
            case "cyan_glazed_terracotta": return BlockType.CYAN_GLAZED_TERRACOTTA;
            case "purple_glazed_terracotta": return BlockType.PURPLE_GLAZED_TERRACOTTA;
            case "blue_glazed_terracotta": return BlockType.BLUE_GLAZED_TERRACOTTA;
            case "brown_glazed_terracotta": return BlockType.BROWN_GLAZED_TERRACOTTA;
            case "green_glazed_terracotta": return BlockType.GREEN_GLAZED_TERRACOTTA;
            case "red_glazed_terracotta": return BlockType.RED_GLAZED_TERRACOTTA;
            case "black_glazed_terracotta": return BlockType.BLACK_GLAZED_TERRACOTTA;
            case "white_concrete": return BlockType.WHITE_CONCRETE;
            case "orange_concrete": return BlockType.ORANGE_CONCRETE;
            case "magenta_concrete": return BlockType.MAGENTA_CONCRETE;
            case "light_blue_concrete": return BlockType.LIGHT_BLUE_CONCRETE;
            case "yellow_concrete": return BlockType.YELLOW_CONCRETE;
            case "lime_concrete": return BlockType.LIME_CONCRETE;
            case "pink_concrete": return BlockType.PINK_CONCRETE;
            case "gray_concrete": return BlockType.GRAY_CONCRETE;
            case "light_gray_concrete": return BlockType.LIGHT_GRAY_CONCRETE;
            case "cyan_concrete": return BlockType.CYAN_CONCRETE;
            case "purple_concrete": return BlockType.PURPLE_CONCRETE;
            case "blue_concrete": return BlockType.BLUE_CONCRETE;
            case "brown_concrete": return BlockType.BROWN_CONCRETE;
            case "green_concrete": return BlockType.GREEN_CONCRETE;
            case "red_concrete": return BlockType.RED_CONCRETE;
            case "black_concrete": return BlockType.BLACK_CONCRETE;
            case "white_concrete_powder": return BlockType.WHITE_CONCRETE_POWDER;
            case "orange_concrete_powder": return BlockType.ORANGE_CONCRETE_POWDER;
            case "magenta_concrete_powder": return BlockType.MAGENTA_CONCRETE_POWDER;
            case "light_blue_concrete_powder": return BlockType.LIGHT_BLUE_CONCRETE_POWDER;
            case "yellow_concrete_powder": return BlockType.YELLOW_CONCRETE_POWDER;
            case "lime_concrete_powder": return BlockType.LIME_CONCRETE_POWDER;
            case "pink_concrete_powder": return BlockType.PINK_CONCRETE_POWDER;
            case "gray_concrete_powder": return BlockType.GRAY_CONCRETE_POWDER;
            case "light_gray_concrete_powder": return BlockType.LIGHT_GRAY_CONCRETE_POWDER;
            case "cyan_concrete_powder": return BlockType.CYAN_CONCRETE_POWDER;
            case "purple_concrete_powder": return BlockType.PURPLE_CONCRETE_POWDER;
            case "blue_concrete_powder": return BlockType.BLUE_CONCRETE_POWDER;
            case "brown_concrete_powder": return BlockType.BROWN_CONCRETE_POWDER;
            case "green_concrete_powder": return BlockType.GREEN_CONCRETE_POWDER;
            case "red_concrete_powder": return BlockType.RED_CONCRETE_POWDER;
            case "black_concrete_powder": return BlockType.BLACK_CONCRETE_POWDER;
            case "kelp": return BlockType.KELP;
            case "kelp_plant": return BlockType.KELP_PLANT;
            case "dried_kelp_block": return BlockType.DRIED_KELP_BLOCK;
            case "turtle_egg": return BlockType.TURTLE_EGG;
            case "dead_tube_coral_block": return BlockType.DEAD_TUBE_CORAL_BLOCK;
            case "dead_brain_coral_block": return BlockType.DEAD_BRAIN_CORAL_BLOCK;
            case "dead_bubble_coral_block": return BlockType.DEAD_BUBBLE_CORAL_BLOCK;
            case "dead_fire_coral_block": return BlockType.DEAD_FIRE_CORAL_BLOCK;
            case "dead_horn_coral_block": return BlockType.DEAD_HORN_CORAL_BLOCK;
            case "tube_coral_block": return BlockType.TUBE_CORAL_BLOCK;
            case "brain_coral_block": return BlockType.BRAIN_CORAL_BLOCK;
            case "bubble_coral_block": return BlockType.BUBBLE_CORAL_BLOCK;
            case "fire_coral_block": return BlockType.FIRE_CORAL_BLOCK;
            case "horn_coral_block": return BlockType.HORN_CORAL_BLOCK;
            case "dead_tube_coral": return BlockType.DEAD_TUBE_CORAL;
            case "dead_brain_coral": return BlockType.DEAD_BRAIN_CORAL;
            case "dead_bubble_coral": return BlockType.DEAD_BUBBLE_CORAL;
            case "dead_fire_coral": return BlockType.DEAD_FIRE_CORAL;
            case "dead_horn_coral": return BlockType.DEAD_HORN_CORAL;
            case "tube_coral": return BlockType.TUBE_CORAL;
            case "brain_coral": return BlockType.BRAIN_CORAL;
            case "bubble_coral": return BlockType.BUBBLE_CORAL;
            case "fire_coral": return BlockType.FIRE_CORAL;
            case "horn_coral": return BlockType.HORN_CORAL;
            case "dead_tube_coral_fan": return BlockType.DEAD_TUBE_CORAL_FAN;
            case "dead_brain_coral_fan": return BlockType.DEAD_BRAIN_CORAL_FAN;
            case "dead_bubble_coral_fan": return BlockType.DEAD_BUBBLE_CORAL_FAN;
            case "dead_fire_coral_fan": return BlockType.DEAD_FIRE_CORAL_FAN;
            case "dead_horn_coral_fan": return BlockType.DEAD_HORN_CORAL_FAN;
            case "tube_coral_fan": return BlockType.TUBE_CORAL_FAN;
            case "brain_coral_fan": return BlockType.BRAIN_CORAL_FAN;
            case "bubble_coral_fan": return BlockType.BUBBLE_CORAL_FAN;
            case "fire_coral_fan": return BlockType.FIRE_CORAL_FAN;
            case "horn_coral_fan": return BlockType.HORN_CORAL_FAN;
            case "dead_tube_coral_wall_fan": return BlockType.DEAD_TUBE_CORAL_WALL_FAN;
            case "dead_brain_coral_wall_fan": return BlockType.DEAD_BRAIN_CORAL_WALL_FAN;
            case "dead_bubble_coral_wall_fan": return BlockType.DEAD_BUBBLE_CORAL_WALL_FAN;
            case "dead_fire_coral_wall_fan": return BlockType.DEAD_FIRE_CORAL_WALL_FAN;
            case "dead_horn_coral_wall_fan": return BlockType.DEAD_HORN_CORAL_WALL_FAN;
            case "tube_coral_wall_fan": return BlockType.TUBE_CORAL_WALL_FAN;
            case "brain_coral_wall_fan": return BlockType.BRAIN_CORAL_WALL_FAN;
            case "bubble_coral_wall_fan": return BlockType.BUBBLE_CORAL_WALL_FAN;
            case "fire_coral_wall_fan": return BlockType.FIRE_CORAL_WALL_FAN;
            case "horn_coral_wall_fan": return BlockType.HORN_CORAL_WALL_FAN;
            case "sea_pickle": return BlockType.SEA_PICKLE;
            case "blue_ice": return BlockType.BLUE_ICE;
            case "conduit": return BlockType.CONDUIT;
            case "bamboo_sapling": return BlockType.BAMBOO_SAPLING;
            case "bamboo": return BlockType.BAMBOO;
            case "potted_bamboo": return BlockType.POTTED_BAMBOO;
            case "void_air": return BlockType.VOID_AIR;
            case "cave_air": return BlockType.CAVE_AIR;
            case "bubble_column": return BlockType.BUBBLE_COLUMN;
            case "polished_granite_stairs": return BlockType.POLISHED_GRANITE_STAIRS;
            case "smooth_red_sandstone_stairs": return BlockType.SMOOTH_RED_SANDSTONE_STAIRS;
            case "mossy_stone_brick_stairs": return BlockType.MOSSY_STONE_BRICK_STAIRS;
            case "polished_diorite_stairs": return BlockType.POLISHED_DIORITE_STAIRS;
            case "mossy_cobblestone_stairs": return BlockType.MOSSY_COBBLESTONE_STAIRS;
            case "end_stone_brick_stairs": return BlockType.END_STONE_BRICK_STAIRS;
            case "stone_stairs": return BlockType.STONE_STAIRS;
            case "smooth_sandstone_stairs": return BlockType.SMOOTH_SANDSTONE_STAIRS;
            case "smooth_quartz_stairs": return BlockType.SMOOTH_QUARTZ_STAIRS;
            case "granite_stairs": return BlockType.GRANITE_STAIRS;
            case "andesite_stairs": return BlockType.ANDESITE_STAIRS;
            case "red_nether_brick_stairs": return BlockType.RED_NETHER_BRICK_STAIRS;
            case "polished_andesite_stairs": return BlockType.POLISHED_ANDESITE_STAIRS;
            case "diorite_stairs": return BlockType.DIORITE_STAIRS;
            case "polished_granite_slab": return BlockType.POLISHED_GRANITE_SLAB;
            case "smooth_red_sandstone_slab": return BlockType.SMOOTH_RED_SANDSTONE_SLAB;
            case "mossy_stone_brick_slab": return BlockType.MOSSY_STONE_BRICK_SLAB;
            case "polished_diorite_slab": return BlockType.POLISHED_DIORITE_SLAB;
            case "mossy_cobblestone_slab": return BlockType.MOSSY_COBBLESTONE_SLAB;
            case "end_stone_brick_slab": return BlockType.END_STONE_BRICK_SLAB;
            case "smooth_sandstone_slab": return BlockType.SMOOTH_SANDSTONE_SLAB;
            case "smooth_quartz_slab": return BlockType.SMOOTH_QUARTZ_SLAB;
            case "granite_slab": return BlockType.GRANITE_SLAB;
            case "andesite_slab": return BlockType.ANDESITE_SLAB;
            case "red_nether_brick_slab": return BlockType.RED_NETHER_BRICK_SLAB;
            case "polished_andesite_slab": return BlockType.POLISHED_ANDESITE_SLAB;
            case "diorite_slab": return BlockType.DIORITE_SLAB;
            case "brick_wall": return BlockType.BRICK_WALL;
            case "prismarine_wall": return BlockType.PRISMARINE_WALL;
            case "red_sandstone_wall": return BlockType.RED_SANDSTONE_WALL;
            case "mossy_stone_brick_wall": return BlockType.MOSSY_STONE_BRICK_WALL;
            case "granite_wall": return BlockType.GRANITE_WALL;
            case "stone_brick_wall": return BlockType.STONE_BRICK_WALL;
            case "nether_brick_wall": return BlockType.NETHER_BRICK_WALL;
            case "andesite_wall": return BlockType.ANDESITE_WALL;
            case "red_nether_brick_wall": return BlockType.RED_NETHER_BRICK_WALL;
            case "sandstone_wall": return BlockType.SANDSTONE_WALL;
            case "end_stone_brick_wall": return BlockType.END_STONE_BRICK_WALL;
            case "diorite_wall": return BlockType.DIORITE_WALL;
            case "scaffolding": return BlockType.SCAFFOLDING;
            case "loom": return BlockType.LOOM;
            case "barrel": return BlockType.BARREL;
            case "smoker": return BlockType.SMOKER;
            case "blast_furnace": return BlockType.BLAST_FURNACE;
            case "cartography_table": return BlockType.CARTOGRAPHY_TABLE;
            case "fletching_table": return BlockType.FLETCHING_TABLE;
            case "grindstone": return BlockType.GRINDSTONE;
            case "lectern": return BlockType.LECTERN;
            case "smithing_table": return BlockType.SMITHING_TABLE;
            case "stonecutter": return BlockType.STONECUTTER;
            case "bell": return BlockType.BELL;
            case "lantern": return BlockType.LANTERN;
            case "soul_lantern": return BlockType.SOUL_LANTERN;
            case "campfire": return BlockType.CAMPFIRE;
            case "soul_campfire": return BlockType.SOUL_CAMPFIRE;
            case "sweet_berry_bush": return BlockType.SWEET_BERRY_BUSH;
            case "warped_stem": return BlockType.WARPED_STEM;
            case "stripped_warped_stem": return BlockType.STRIPPED_WARPED_STEM;
            case "warped_hyphae": return BlockType.WARPED_HYPHAE;
            case "stripped_warped_hyphae": return BlockType.STRIPPED_WARPED_HYPHAE;
            case "warped_nylium": return BlockType.WARPED_NYLIUM;
            case "warped_fungus": return BlockType.WARPED_FUNGUS;
            case "warped_wart_block": return BlockType.WARPED_WART_BLOCK;
            case "warped_roots": return BlockType.WARPED_ROOTS;
            case "nether_sprouts": return BlockType.NETHER_SPROUTS;
            case "crimson_stem": return BlockType.CRIMSON_STEM;
            case "stripped_crimson_stem": return BlockType.STRIPPED_CRIMSON_STEM;
            case "crimson_hyphae": return BlockType.CRIMSON_HYPHAE;
            case "stripped_crimson_hyphae": return BlockType.STRIPPED_CRIMSON_HYPHAE;
            case "crimson_nylium": return BlockType.CRIMSON_NYLIUM;
            case "crimson_fungus": return BlockType.CRIMSON_FUNGUS;
            case "shroomlight": return BlockType.SHROOMLIGHT;
            case "weeping_vines": return BlockType.WEEPING_VINES;
            case "weeping_vines_plant": return BlockType.WEEPING_VINES_PLANT;
            case "twisting_vines": return BlockType.TWISTING_VINES;
            case "twisting_vines_plant": return BlockType.TWISTING_VINES_PLANT;
            case "crimson_roots": return BlockType.CRIMSON_ROOTS;
            case "crimson_planks": return BlockType.CRIMSON_PLANKS;
            case "warped_planks": return BlockType.WARPED_PLANKS;
            case "crimson_slab": return BlockType.CRIMSON_SLAB;
            case "warped_slab": return BlockType.WARPED_SLAB;
            case "crimson_pressure_plate": return BlockType.CRIMSON_PRESSURE_PLATE;
            case "warped_pressure_plate": return BlockType.WARPED_PRESSURE_PLATE;
            case "crimson_fence": return BlockType.CRIMSON_FENCE;
            case "warped_fence": return BlockType.WARPED_FENCE;
            case "crimson_trapdoor": return BlockType.CRIMSON_TRAPDOOR;
            case "warped_trapdoor": return BlockType.WARPED_TRAPDOOR;
            case "crimson_fence_gate": return BlockType.CRIMSON_FENCE_GATE;
            case "warped_fence_gate": return BlockType.WARPED_FENCE_GATE;
            case "crimson_stairs": return BlockType.CRIMSON_STAIRS;
            case "warped_stairs": return BlockType.WARPED_STAIRS;
            case "crimson_button": return BlockType.CRIMSON_BUTTON;
            case "warped_button": return BlockType.WARPED_BUTTON;
            case "crimson_door": return BlockType.CRIMSON_DOOR;
            case "warped_door": return BlockType.WARPED_DOOR;
            case "crimson_sign": return BlockType.CRIMSON_SIGN;
            case "warped_sign": return BlockType.WARPED_SIGN;
            case "crimson_wall_sign": return BlockType.CRIMSON_WALL_SIGN;
            case "warped_wall_sign": return BlockType.WARPED_WALL_SIGN;
            case "structure_block": return BlockType.STRUCTURE_BLOCK;
            case "jigsaw": return BlockType.JIGSAW;
            case "composter": return BlockType.COMPOSTER;
            case "target": return BlockType.TARGET;
            case "bee_nest": return BlockType.BEE_NEST;
            case "beehive": return BlockType.BEEHIVE;
            case "honey_block": return BlockType.HONEY_BLOCK;
            case "honeycomb_block": return BlockType.HONEYCOMB_BLOCK;
            case "netherite_block": return BlockType.NETHERITE_BLOCK;
            case "ancient_debris": return BlockType.ANCIENT_DEBRIS;
            case "crying_obsidian": return BlockType.CRYING_OBSIDIAN;
            case "respawn_anchor": return BlockType.RESPAWN_ANCHOR;
            case "potted_crimson_fungus": return BlockType.POTTED_CRIMSON_FUNGUS;
            case "potted_warped_fungus": return BlockType.POTTED_WARPED_FUNGUS;
            case "potted_crimson_roots": return BlockType.POTTED_CRIMSON_ROOTS;
            case "potted_warped_roots": return BlockType.POTTED_WARPED_ROOTS;
            case "lodestone": return BlockType.LODESTONE;
            case "blackstone": return BlockType.BLACKSTONE;
            case "blackstone_stairs": return BlockType.BLACKSTONE_STAIRS;
            case "blackstone_wall": return BlockType.BLACKSTONE_WALL;
            case "blackstone_slab": return BlockType.BLACKSTONE_SLAB;
            case "polished_blackstone": return BlockType.POLISHED_BLACKSTONE;
            case "polished_blackstone_bricks": return BlockType.POLISHED_BLACKSTONE_BRICKS;
            case "cracked_polished_blackstone_bricks": return BlockType.CRACKED_POLISHED_BLACKSTONE_BRICKS;
            case "chiseled_polished_blackstone": return BlockType.CHISELED_POLISHED_BLACKSTONE;
            case "polished_blackstone_brick_slab": return BlockType.POLISHED_BLACKSTONE_BRICK_SLAB;
            case "polished_blackstone_brick_stairs": return BlockType.POLISHED_BLACKSTONE_BRICK_STAIRS;
            case "polished_blackstone_brick_wall": return BlockType.POLISHED_BLACKSTONE_BRICK_WALL;
            case "gilded_blackstone": return BlockType.GILDED_BLACKSTONE;
            case "polished_blackstone_stairs": return BlockType.POLISHED_BLACKSTONE_STAIRS;
            case "polished_blackstone_slab": return BlockType.POLISHED_BLACKSTONE_SLAB;
            case "polished_blackstone_pressure_plate": return BlockType.POLISHED_BLACKSTONE_PRESSURE_PLATE;
            case "polished_blackstone_button": return BlockType.POLISHED_BLACKSTONE_BUTTON;
            case "polished_blackstone_wall": return BlockType.POLISHED_BLACKSTONE_WALL;
            case "chiseled_nether_bricks": return BlockType.CHISELED_NETHER_BRICKS;
            case "cracked_nether_bricks": return BlockType.CRACKED_NETHER_BRICKS;
            case "quartz_bricks": return BlockType.QUARTZ_BRICKS;
            case "candle": return BlockType.CANDLE;
            case "white_candle": return BlockType.WHITE_CANDLE;
            case "orange_candle": return BlockType.ORANGE_CANDLE;
            case "magenta_candle": return BlockType.MAGENTA_CANDLE;
            case "light_blue_candle": return BlockType.LIGHT_BLUE_CANDLE;
            case "yellow_candle": return BlockType.YELLOW_CANDLE;
            case "lime_candle": return BlockType.LIME_CANDLE;
            case "pink_candle": return BlockType.PINK_CANDLE;
            case "gray_candle": return BlockType.GRAY_CANDLE;
            case "light_gray_candle": return BlockType.LIGHT_GRAY_CANDLE;
            case "cyan_candle": return BlockType.CYAN_CANDLE;
            case "purple_candle": return BlockType.PURPLE_CANDLE;
            case "blue_candle": return BlockType.BLUE_CANDLE;
            case "brown_candle": return BlockType.BROWN_CANDLE;
            case "green_candle": return BlockType.GREEN_CANDLE;
            case "red_candle": return BlockType.RED_CANDLE;
            case "black_candle": return BlockType.BLACK_CANDLE;
            case "candle_cake": return BlockType.CANDLE_CAKE;
            case "white_candle_cake": return BlockType.WHITE_CANDLE_CAKE;
            case "orange_candle_cake": return BlockType.ORANGE_CANDLE_CAKE;
            case "magenta_candle_cake": return BlockType.MAGENTA_CANDLE_CAKE;
            case "light_blue_candle_cake": return BlockType.LIGHT_BLUE_CANDLE_CAKE;
            case "yellow_candle_cake": return BlockType.YELLOW_CANDLE_CAKE;
            case "lime_candle_cake": return BlockType.LIME_CANDLE_CAKE;
            case "pink_candle_cake": return BlockType.PINK_CANDLE_CAKE;
            case "gray_candle_cake": return BlockType.GRAY_CANDLE_CAKE;
            case "light_gray_candle_cake": return BlockType.LIGHT_GRAY_CANDLE_CAKE;
            case "cyan_candle_cake": return BlockType.CYAN_CANDLE_CAKE;
            case "purple_candle_cake": return BlockType.PURPLE_CANDLE_CAKE;
            case "blue_candle_cake": return BlockType.BLUE_CANDLE_CAKE;
            case "brown_candle_cake": return BlockType.BROWN_CANDLE_CAKE;
            case "green_candle_cake": return BlockType.GREEN_CANDLE_CAKE;
            case "red_candle_cake": return BlockType.RED_CANDLE_CAKE;
            case "black_candle_cake": return BlockType.BLACK_CANDLE_CAKE;
            case "amethyst_block": return BlockType.AMETHYST_BLOCK;
            case "budding_amethyst": return BlockType.BUDDING_AMETHYST;
            case "amethyst_cluster": return BlockType.AMETHYST_CLUSTER;
            case "large_amethyst_bud": return BlockType.LARGE_AMETHYST_BUD;
            case "medium_amethyst_bud": return BlockType.MEDIUM_AMETHYST_BUD;
            case "small_amethyst_bud": return BlockType.SMALL_AMETHYST_BUD;
            case "tuff": return BlockType.TUFF;
            case "calcite": return BlockType.CALCITE;
            case "tinted_glass": return BlockType.TINTED_GLASS;
            case "powder_snow": return BlockType.POWDER_SNOW;
            case "sculk_sensor": return BlockType.SCULK_SENSOR;
            case "oxidized_copper": return BlockType.OXIDIZED_COPPER;
            case "weathered_copper": return BlockType.WEATHERED_COPPER;
            case "exposed_copper": return BlockType.EXPOSED_COPPER;
            case "copper_block": return BlockType.COPPER_BLOCK;
            case "copper_ore": return BlockType.COPPER_ORE;
            case "deepslate_copper_ore": return BlockType.DEEPSLATE_COPPER_ORE;
            case "oxidized_cut_copper": return BlockType.OXIDIZED_CUT_COPPER;
            case "weathered_cut_copper": return BlockType.WEATHERED_CUT_COPPER;
            case "exposed_cut_copper": return BlockType.EXPOSED_CUT_COPPER;
            case "cut_copper": return BlockType.CUT_COPPER;
            case "oxidized_cut_copper_stairs": return BlockType.OXIDIZED_CUT_COPPER_STAIRS;
            case "weathered_cut_copper_stairs": return BlockType.WEATHERED_CUT_COPPER_STAIRS;
            case "exposed_cut_copper_stairs": return BlockType.EXPOSED_CUT_COPPER_STAIRS;
            case "cut_copper_stairs": return BlockType.CUT_COPPER_STAIRS;
            case "oxidized_cut_copper_slab": return BlockType.OXIDIZED_CUT_COPPER_SLAB;
            case "weathered_cut_copper_slab": return BlockType.WEATHERED_CUT_COPPER_SLAB;
            case "exposed_cut_copper_slab": return BlockType.EXPOSED_CUT_COPPER_SLAB;
            case "cut_copper_slab": return BlockType.CUT_COPPER_SLAB;
            case "waxed_copper_block": return BlockType.WAXED_COPPER_BLOCK;
            case "waxed_weathered_copper": return BlockType.WAXED_WEATHERED_COPPER;
            case "waxed_exposed_copper": return BlockType.WAXED_EXPOSED_COPPER;
            case "waxed_oxidized_copper": return BlockType.WAXED_OXIDIZED_COPPER;
            case "waxed_oxidized_cut_copper": return BlockType.WAXED_OXIDIZED_CUT_COPPER;
            case "waxed_weathered_cut_copper": return BlockType.WAXED_WEATHERED_CUT_COPPER;
            case "waxed_exposed_cut_copper": return BlockType.WAXED_EXPOSED_CUT_COPPER;
            case "waxed_cut_copper": return BlockType.WAXED_CUT_COPPER;
            case "waxed_oxidized_cut_copper_stairs": return BlockType.WAXED_OXIDIZED_CUT_COPPER_STAIRS;
            case "waxed_weathered_cut_copper_stairs": return BlockType.WAXED_WEATHERED_CUT_COPPER_STAIRS;
            case "waxed_exposed_cut_copper_stairs": return BlockType.WAXED_EXPOSED_CUT_COPPER_STAIRS;
            case "waxed_cut_copper_stairs": return BlockType.WAXED_CUT_COPPER_STAIRS;
            case "waxed_oxidized_cut_copper_slab": return BlockType.WAXED_OXIDIZED_CUT_COPPER_SLAB;
            case "waxed_weathered_cut_copper_slab": return BlockType.WAXED_WEATHERED_CUT_COPPER_SLAB;
            case "waxed_exposed_cut_copper_slab": return BlockType.WAXED_EXPOSED_CUT_COPPER_SLAB;
            case "waxed_cut_copper_slab": return BlockType.WAXED_CUT_COPPER_SLAB;
            case "lightning_rod": return BlockType.LIGHTNING_ROD;
            case "pointed_dripstone": return BlockType.POINTED_DRIPSTONE;
            case "dripstone_block": return BlockType.DRIPSTONE_BLOCK;
            case "cave_vines": return BlockType.CAVE_VINES;
            case "cave_vines_plant": return BlockType.CAVE_VINES_PLANT;
            case "spore_blossom": return BlockType.SPORE_BLOSSOM;
            case "azalea": return BlockType.AZALEA;
            case "flowering_azalea": return BlockType.FLOWERING_AZALEA;
            case "moss_carpet": return BlockType.MOSS_CARPET;
            case "moss_block": return BlockType.MOSS_BLOCK;
            case "big_dripleaf": return BlockType.BIG_DRIPLEAF;
            case "big_dripleaf_stem": return BlockType.BIG_DRIPLEAF_STEM;
            case "small_dripleaf": return BlockType.SMALL_DRIPLEAF;
            case "hanging_roots": return BlockType.HANGING_ROOTS;
            case "rooted_dirt": return BlockType.ROOTED_DIRT;
            case "deepslate": return BlockType.DEEPSLATE;
            case "cobbled_deepslate": return BlockType.COBBLED_DEEPSLATE;
            case "cobbled_deepslate_stairs": return BlockType.COBBLED_DEEPSLATE_STAIRS;
            case "cobbled_deepslate_slab": return BlockType.COBBLED_DEEPSLATE_SLAB;
            case "cobbled_deepslate_wall": return BlockType.COBBLED_DEEPSLATE_WALL;
            case "polished_deepslate": return BlockType.POLISHED_DEEPSLATE;
            case "polished_deepslate_stairs": return BlockType.POLISHED_DEEPSLATE_STAIRS;
            case "polished_deepslate_slab": return BlockType.POLISHED_DEEPSLATE_SLAB;
            case "polished_deepslate_wall": return BlockType.POLISHED_DEEPSLATE_WALL;
            case "deepslate_tiles": return BlockType.DEEPSLATE_TILES;
            case "deepslate_tile_stairs": return BlockType.DEEPSLATE_TILE_STAIRS;
            case "deepslate_tile_slab": return BlockType.DEEPSLATE_TILE_SLAB;
            case "deepslate_tile_wall": return BlockType.DEEPSLATE_TILE_WALL;
            case "deepslate_bricks": return BlockType.DEEPSLATE_BRICKS;
            case "deepslate_brick_stairs": return BlockType.DEEPSLATE_BRICK_STAIRS;
            case "deepslate_brick_slab": return BlockType.DEEPSLATE_BRICK_SLAB;
            case "deepslate_brick_wall": return BlockType.DEEPSLATE_BRICK_WALL;
            case "chiseled_deepslate": return BlockType.CHISELED_DEEPSLATE;
            case "cracked_deepslate_bricks": return BlockType.CRACKED_DEEPSLATE_BRICKS;
            case "cracked_deepslate_tiles": return BlockType.CRACKED_DEEPSLATE_TILES;
            case "infested_deepslate": return BlockType.INFESTED_DEEPSLATE;
            case "smooth_basalt": return BlockType.SMOOTH_BASALT;
            case "raw_iron_block": return BlockType.RAW_IRON_BLOCK;
            case "raw_copper_block": return BlockType.RAW_COPPER_BLOCK;
            case "raw_gold_block": return BlockType.RAW_GOLD_BLOCK;
            case "potted_azalea_bush": return BlockType.POTTED_AZALEA_BUSH;
            case "potted_flowering_azalea_bush": return BlockType.POTTED_FLOWERING_AZALEA_BUSH;
            default: return BlockType.AIR;
        }
    }
    
}